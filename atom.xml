<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>自然生长</title>
  <icon>https://www.gravatar.com/avatar/fb20af54a84c65c750ac6ea8f31c40bb</icon>
  <subtitle>你寻找的阳光和沙滩，温暖碧蓝</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liziczh.com/"/>
  <updated>2018-07-26T09:47:36.765Z</updated>
  <id>https://liziczh.com/</id>
  
  <author>
    <name>栗子</name>
    <email>liziczh@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaWeb | 文件上传下载</title>
    <link href="https://liziczh.com/JavaWeb-FileUpload&amp;Download.html"/>
    <id>https://liziczh.com/JavaWeb-FileUpload&amp;Download.html</id>
    <published>2018-07-22T13:02:16.000Z</published>
    <updated>2018-07-26T09:47:36.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>文件上传，一般使用 Apache 的开源工具 common-fileupload 实现文件上传功能，struts 的上传功能也是基于此组件。common-fileupload 依赖于 common-io，所以需要提前下载 commons-io-x.x.jar。</p><a id="more"></a><h3 id="基于表单的文件上传"><a href="#基于表单的文件上传" class="headerlink" title="基于表单的文件上传"></a>基于表单的文件上传</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"uploadFile"</span> <span class="attr">value</span>=<span class="string">"选择文件"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>method:&quot;post&quot;</code>：POST 请求没有数据长度限制。</li><li><code>enctype=&quot;multipart/form-data&quot;</code>：意为不对字符编码，在使用包含文件上传控件的表单时，必须使用该值。 </li></ul></blockquote><h3 id="Commons-fileupload-组件"><a href="#Commons-fileupload-组件" class="headerlink" title="Commons-fileupload 组件"></a>Commons-fileupload 组件</h3><p><strong>DiskFileItemFactory</strong>：文件上传工厂类，将请求表单中每一项封装成一个 FileItem 对象。</p><ul><li><code>factory.setRepository(file)</code> - 设置上传临时目录。</li></ul><p><strong>ServletFileUpload</strong>：文件上传解析器，将请求表单每一项解析为一个 FileItem 对象。</p><ul><li><code>boolean static isMultipartContent(request)</code> - 判断是否为多媒体上传。</li><li><code>List&lt;FileItem&gt; parseRequest(request)</code> - 解析上传数据，返回一个 <code>List&lt;FileItem&gt;</code> 集合。</li><li><code>setFileSizeMax(fileSizeMax)</code> - 设置单个上传文件的最大值。</li><li><code>setSizeMax(sizeMax)</code> - 设置所有上传文件总的最大值。</li><li><code>setHeaderEcoding(&quot;UTF-8&quot;)</code> - 设置上传文件名的编码。</li></ul><p><strong>FileItem</strong>：请求表单项。</p><ul><li><code>getFiledName()</code> - 获取表单元素的名称。</li><li><code>getString(&quot;UTF-8&quot;)</code> - 获取上传数据。</li><li><code>getName()</code> - 获取文件名。[文件上传项]</li><li><code>getInputStream()</code> - 获取文件输入流 。[文件上传项]</li><li><code>getContentType()</code> - 获取上传文件类型。[文件上传项]</li><li><code>getSize()</code> - 获取文件大小。[文件上传项]</li><li><code>isInMemory()</code> - 判断文件是否在内存中。[文件上传项]</li><li><code>write(file)</code> - 将数据写入文件中。</li><li><code>delete()</code> - 删除临时文件。</li></ul><h3 id="UploadServlet-源码"><a href="#UploadServlet-源码" class="headerlink" title="UploadServlet 源码"></a>UploadServlet 源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建一个DiskFileItemFactory工厂</span></span><br><span class="line">DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line"><span class="comment">// 2. 创建一个文件上传解析器</span></span><br><span class="line">ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line"><span class="comment">// 3. 使用文件上传解析器将表单数据解析为List&lt;FileItem&gt;集合</span></span><br><span class="line">List&lt;FileItem&gt; items = upload.parseRequest(request);</span><br></pre></td></tr></table></figure><h3 id="文件上传细节"><a href="#文件上传细节" class="headerlink" title="文件上传细节"></a>文件上传细节</h3><ol><li><p>保证服务器安全：将上传文件存放在外界无法直接访问的WEB-INF目录下。</p></li><li><p>上传数据中文乱码：String value = item.getString(“UTF-8”);</p></li><li><p>上传文件名中文乱码：request.setCharacterEncoding(“UTF-8”); </p></li><li><p>防止重名文件覆盖，为上传文件产生一个唯一的文件名。</p><p>System.currentMillions()+”_”+a.txt(乐观)</p><p>UUID+”_”+a.txt</p></li><li><p>分目录存储上传文件，以日期建立文件夹</p></li><li><p>限制上传文件最大值。①单个文件大小限制；②总文件大小限制；</p></li><li><p>限制上传文件类型，①判断后缀名是否合法。②<code>getContentType()</code> 。</p></li></ol><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><h3 id="WebUpload"><a href="#WebUpload" class="headerlink" title="WebUpload"></a>WebUpload</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件上传&quot;&gt;&lt;a href=&quot;#文件上传&quot; class=&quot;headerlink&quot; title=&quot;文件上传&quot;&gt;&lt;/a&gt;文件上传&lt;/h2&gt;&lt;p&gt;文件上传，一般使用 Apache 的开源工具 common-fileupload 实现文件上传功能，struts 的上传功能也是基于此组件。common-fileupload 依赖于 common-io，所以需要提前下载 commons-io-x.x.jar。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://liziczh.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="https://liziczh.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb | Filter</title>
    <link href="https://liziczh.com/JavaWeb-Filter.html"/>
    <id>https://liziczh.com/JavaWeb-Filter.html</id>
    <published>2018-07-22T13:02:16.000Z</published>
    <updated>2018-07-26T01:10:43.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><p>Filter 过滤器，使用 Filter 可以动态拦截请求和响应，可以对 web 服务器管理的所有 web 资源（Servlet、JSP、静态图片或静态 html 等）进行拦截，从而实现一些特殊的功能。如 URL 级别的权限访问控制、过滤敏感词汇、压缩响应信息等一些高级功能。</p><a id="more"></a><h2 id="Servlet-Filter"><a href="#Servlet-Filter" class="headerlink" title="Servlet Filter"></a>Servlet Filter</h2><h3 id="Filter-接口的方法"><a href="#Filter-接口的方法" class="headerlink" title="Filter 接口的方法"></a>Filter 接口的方法</h3><ul><li><code>init(FilterConfig config)</code> - Filter 初始化。</li><li><code>doFilter(ServletRequest, ServletResponse, FilterChain)</code> - 实现过滤操作，Web 服务器每次调用 service() 方法前都会先调用 Filter 的 doFilter() 方法，FilterChain 用于访问后续 Filter。</li><li><code>destroy()</code> - 销毁 Filter 前调用。</li></ul><h3 id="doFilter-方法详解"><a href="#doFilter-方法详解" class="headerlink" title="doFilter() 方法详解"></a>doFilter() 方法详解</h3><p>Web 服务器每次调用 Servlet 的 service() 方法前都会先执行其 Filter 的 doFilter() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 预处理：在客户端请求调用Web资源前执行。</span></span><br><span class="line">    System.out.println(<span class="string">"doFilter() 方法前执行"</span>);</span><br><span class="line">    <span class="comment">// 如果存在后续Filter，则根据过滤链传递给下一过滤器处理，</span></span><br><span class="line">    <span class="comment">// 若Filter全部处理完毕，则访问Web资源。</span></span><br><span class="line">    chain.doFilter(req, resp);</span><br><span class="line">    <span class="comment">// 后处理：调用Web资源后执行</span></span><br><span class="line">    System.out.println(<span class="string">"doFilter() 方法后执行"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Filter 拦截：</p><ul><li>预处理：在客户端的请求访问后端资源之前，拦截这些请求。</li><li>后处理：在服务器的响应发送回客户端之前，处理这些响应。</li></ul><h3 id="Filter-链"><a href="#Filter-链" class="headerlink" title="Filter 链"></a>Filter 链</h3><p>Filter 链由多个 Filter 按先后顺序组合起来形成。</p><p>Filter 链调用顺序由 <code>web.xml</code> 中的<strong>映射顺序</strong>决定。</p><h2 id="Filter-配置"><a href="#Filter-配置" class="headerlink" title="Filter 配置"></a>Filter 配置</h2><p>在 web.xml 中配置 Filter 信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 注册Filter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>firstFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.lizi.filter.FirstFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2. Filter映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>firstFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通配符*表示拦截所有请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用注解配置</p><h2 id="FilterConfig"><a href="#FilterConfig" class="headerlink" title="FilterConfig"></a>FilterConfig</h2><h2 id="Filter-应用"><a href="#Filter-应用" class="headerlink" title="Filter 应用"></a>Filter 应用</h2><h3 id="字符编码过滤"><a href="#字符编码过滤" class="headerlink" title="字符编码过滤"></a>字符编码过滤</h3><h3 id="检查用户是否登陆"><a href="#检查用户是否登陆" class="headerlink" title="检查用户是否登陆"></a>检查用户是否登陆</h3><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><p>用户、角色、权限、用户角色关系、角色权限关系。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Filter&quot;&gt;&lt;a href=&quot;#Filter&quot; class=&quot;headerlink&quot; title=&quot;Filter&quot;&gt;&lt;/a&gt;Filter&lt;/h1&gt;&lt;p&gt;Filter 过滤器，使用 Filter 可以动态拦截请求和响应，可以对 web 服务器管理的所有 web 资源（Servlet、JSP、静态图片或静态 html 等）进行拦截，从而实现一些特殊的功能。如 URL 级别的权限访问控制、过滤敏感词汇、压缩响应信息等一些高级功能。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://liziczh.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="https://liziczh.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb | Listener</title>
    <link href="https://liziczh.com/JavaWeb-Listener.html"/>
    <id>https://liziczh.com/JavaWeb-Listener.html</id>
    <published>2018-07-22T13:02:16.000Z</published>
    <updated>2018-07-26T01:10:57.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h1><p>Listener 监听器，用于监听 ServletContext、HttpSession、ServletRequest 等域对象的初始化、销毁、属性变化事件。</p><a id="more"></a><p>监听对象：</p><ul><li>ServletContext：application</li><li>HttpSession：session</li><li>ServletRequest：request</li></ul><h2 id="Servlet-Listener"><a href="#Servlet-Listener" class="headerlink" title="Servlet Listener"></a>Servlet Listener</h2><p>ServletContextListener</p><p>HttpSessionListener</p><p>HttpSessionAttributeListener</p><p>ServletRequestListener</p><p>ServletRequestAttributeListener</p><h3 id="Listener-XML-配置"><a href="#Listener-XML-配置" class="headerlink" title="Listener XML 配置"></a>Listener XML 配置</h3><p>使用 web.xml 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.lizi.listener.IndexListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用注解配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@WebListener(<span class="string">"This is a Listener"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Listener&quot;&gt;&lt;a href=&quot;#Listener&quot; class=&quot;headerlink&quot; title=&quot;Listener&quot;&gt;&lt;/a&gt;Listener&lt;/h1&gt;&lt;p&gt;Listener 监听器，用于监听 ServletContext、HttpSession、ServletRequest 等域对象的初始化、销毁、属性变化事件。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://liziczh.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="https://liziczh.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb | AJAX</title>
    <link href="https://liziczh.com/JavaWeb-ajax.html"/>
    <id>https://liziczh.com/JavaWeb-ajax.html</id>
    <published>2018-07-19T13:02:16.000Z</published>
    <updated>2018-07-26T01:10:20.857Z</updated>
    
    <content type="html"><![CDATA[<!--# AJAX--><p>AJAX（Asynchronous JavaScript and XML，异步的 JavaScript 和 XML）一种异步请求、局部刷新技术。它在不重新载入全部页面的情况下，与服务器交换数据，实现对部分页面的更新。</p><a id="more"></a><ul><li>XMLHttpRequest 对象（异步的与服务器交换数据）</li><li>JavaScript/DOM（信息显示/交互）</li><li>CSS（给数据定义样式）</li><li>XML（作为转换数据的格式）</li></ul><p>AJAX 应用程序与浏览器和平台无关的！</p><h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><h3 id="XHR-创建对象"><a href="#XHR-创建对象" class="headerlink" title="XHR 创建对象"></a>XHR 创建对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXMLHttpRequest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xmlhttp;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">    <span class="comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// IE6, IE5 浏览器执行代码</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 XMLHttpRequest 对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = createXMLHttpRequest();</span><br></pre></td></tr></table></figure><h3 id="XHR-请求"><a href="#XHR-请求" class="headerlink" title="XHR 请求"></a>XHR 请求</h3><p>（1）<code>open(String method, String url, boolean async)</code> - 打开与服务器的连接。</p><blockquote><ul><li>method：请求类型，GET / POST；</li><li>url：文件路径；</li><li>async：true (异步)，false (同步)，默认为 true；</li></ul></blockquote><p>（2）<code>send(String data)</code>  - 将请求的数据发送到服务器。</p><blockquote><ul><li>GET请求：<code>send()</code>，数据可直接通过 open() 中的URL地址传送。</li><li>POST请求：<code>send(&quot;key=value&amp;key=value&quot;)</code>，数据以键值对形式发送。</li></ul><p>如果是 POST 请求，则需要在 open() 打开链接后，设置请求头内容类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; xhr.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>GET 请求发送数据示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开与服务器的连接</span></span><br><span class="line">xhr.open(<span class="string">"GET"</span>,<span class="string">"/getDemo.jsp?key1=value1&amp;key2=value2"</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 发送数据，GET请求数据已包含在URL中，此处发送null即可。</span></span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p><strong>POST 请求发送数据示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开与服务器的连接</span></span><br><span class="line">xhr.open(<span class="string">"POST"</span>,<span class="string">"/postDemo.jsp"</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line"><span class="comment">// POST请求数据以键值对形式发送</span></span><br><span class="line">xhr.send(<span class="string">"key=value&amp;key=value"</span>);</span><br></pre></td></tr></table></figure><h3 id="XHR-响应"><a href="#XHR-响应" class="headerlink" title="XHR 响应"></a>XHR 响应</h3><p>（1）<code>responseText</code> - 获得字符串形式的响应数据。</p><p>（2）<code>responseXML</code> - 获得 XML 形式的响应数据。</p><p><strong>使用 responseText 获取响应数据示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xhr.responseText;</span><br></pre></td></tr></table></figure><h3 id="XHR-readyState"><a href="#XHR-readyState" class="headerlink" title="XHR readyState"></a>XHR readyState</h3><p>（1）<code>onreadystatechange</code> - 每当 readyState 改变时，触发 onreadystatechange 事件。</p><p>（2）<code>readyState</code> - 表示 XHR 的状态。</p><blockquote><ul><li>0: 请求未初始化。对象已创建，未调用 open()；</li><li>1: 服务器连接已建立。open() 成功调用，未调用 send()；</li><li>2: 请求已接收。send() 成功调用，尚未开始接受数据；</li><li>3: 请求处理中。正在接受数据，尚未接受完成；</li><li>4: 请求已完成，且响应已就绪。</li></ul></blockquote><p>（3）<code>status</code> - HTTP 状态码（如 <code>200</code>: “OK”，<code>404</code>: “未找到页面”，<code>500</code>: “服务器内部错误”等）。</p><p><strong>readyState 示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span> &amp;&amp; xmlhttp.status == <span class="number">200</span>)&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML = xhr.responseText;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AJAX-异步请求流程"><a href="#AJAX-异步请求流程" class="headerlink" title="AJAX 异步请求流程"></a>AJAX 异步请求流程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXMLHttpRequest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">    <span class="comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line">    xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// IE6, IE5 浏览器执行代码</span></span><br><span class="line">    xhr=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 创建一个 XMLHttpRequest 对象</span></span><br><span class="line">  <span class="keyword">var</span> xhr = createXMLHttpRequest();</span><br><span class="line">  <span class="comment">// 2. 打开与服务器的连接</span></span><br><span class="line">  xhr.open(<span class="string">"POST"</span>,<span class="string">"/index.jsp"</span>,<span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// -  POST 请求需要设置请求头</span></span><br><span class="line">  xhr.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>)</span><br><span class="line">  <span class="comment">// 3. 发送数据</span></span><br><span class="line">  xhr.send(<span class="string">"username=scott&amp;password=tiger"</span>);</span><br><span class="line">  <span class="comment">// 4. 当响应完成&amp;页面正常的情况下，接受响应数据，写入myDiv中。</span></span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span> &amp;&amp; xmlhttp.status == <span class="number">200</span>)&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML = xhr.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><h2 id="jQuery-AJAX"><a href="#jQuery-AJAX" class="headerlink" title="jQuery AJAX"></a>jQuery AJAX</h2><h3 id="load"><a href="#load" class="headerlink" title="load()"></a>load()</h3><p><code>jQuery load()</code> ：从服务器加载数据，并将返回的数据放入元素中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).load(URL,[data],<span class="function"><span class="keyword">function</span>(<span class="params">responseTxt,statusTxt,xhr</span>));</span></span><br></pre></td></tr></table></figure><blockquote><p>URL：加载内容的地址。</p><p>data：规定与请求一同发送的查询字符串键/值对集合。 </p><p>function(response,status,xhr)：load() 方法完成后所执行的回调函数。</p><ul><li>responseTxt：调用成功后的结果内容</li><li>statusTxt：调用状态</li><li>xhr：XMLHttpRequest 对象</li></ul></blockquote><h3 id="get-amp-post"><a href="#get-amp-post" class="headerlink" title="get() &amp; post()"></a>get() &amp; post()</h3><p>（1）<code>$.get()</code> 方法通过 HTTP GET 请求从服务器上请求数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.get(URL,data,callback,type);</span><br></pre></td></tr></table></figure><p>（2）<code>$.post()</code> 方法通过 HTTP POST 请求从服务器上请求数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.post(URL,data,callback,type);</span><br></pre></td></tr></table></figure><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>同源策略：</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataType: <span class="string">"jsonp"</span>,</span><br><span class="line">jsonpCallback: <span class="string">"callback"</span>,</span><br></pre></td></tr></table></figure><blockquote><p>只支持 GET 请求 </p></blockquote><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>,<span class="string">"*"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>支持 GET 和 POST 请求</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!--# AJAX--&gt;
&lt;p&gt;AJAX（Asynchronous JavaScript and XML，异步的 JavaScript 和 XML）一种异步请求、局部刷新技术。它在不重新载入全部页面的情况下，与服务器交换数据，实现对部分页面的更新。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://liziczh.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="https://liziczh.com/tags/JavaWeb/"/>
    
      <category term="AJAX" scheme="https://liziczh.com/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb | EL&amp;JSTL</title>
    <link href="https://liziczh.com/javaweb-el&amp;jstl.html"/>
    <id>https://liziczh.com/javaweb-el&amp;jstl.html</id>
    <published>2018-07-18T02:45:55.000Z</published>
    <updated>2018-07-26T01:10:07.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EL-amp-JSTL"><a href="#EL-amp-JSTL" class="headerlink" title="EL&amp;JSTL"></a>EL&amp;JSTL</h1><p>避免页面出现大量 Java 代码，使用 EL&amp;JSTL 替换 JSP 页面中的 Java 脚本表达式</p><a id="more"></a><h2 id="EL-表达式"><a href="#EL-表达式" class="headerlink" title="EL 表达式"></a>EL 表达式</h2><p>EL 表达式用于获取数据，替换 JSP 页面中的脚本表达式。</p><p>EL 表达式访问 JavaBean 属性</p><p><code>${empty param.name}</code>：<code>null</code> 与 <code>&quot;&quot;</code> 都返回 <code>true</code>；</p><h3 id="EL-表达式11个隐含对象"><a href="#EL-表达式11个隐含对象" class="headerlink" title="EL 表达式11个隐含对象"></a>EL 表达式11个隐含对象</h3><ul><li>pageContext</li><li>pageScope</li><li>requestScope</li><li>sessionScope</li><li>applicationScope</li><li>param</li><li>paramValues</li><li>header</li><li>headerValues</li><li>cookie</li><li>initParam</li></ul><h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h2><p>JSTL（JSP Standard Tag Library，JSP标准标签库），为弥补 html 的不足，规范自定义标签。</p><ul><li>核心标签库</li><li>I18 标签库</li><li>SQL 标签库</li><li>XML 标签库</li><li>函数标签库</li></ul><p>jstl 导入jar包，引入标签库</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"fmt"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"fn"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/function"</span> %&gt;</span><br></pre></td></tr></table></figure><p>常用核心库：</p><p>set，out，remove</p><p>c:if，c:choose，c:when，c:otherwise，test=””</p><p>c:forEach，item，var</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;EL-amp-JSTL&quot;&gt;&lt;a href=&quot;#EL-amp-JSTL&quot; class=&quot;headerlink&quot; title=&quot;EL&amp;amp;JSTL&quot;&gt;&lt;/a&gt;EL&amp;amp;JSTL&lt;/h1&gt;&lt;p&gt;避免页面出现大量 Java 代码，使用 EL&amp;amp;JSTL 替换 JSP 页面中的 Java 脚本表达式&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://liziczh.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="https://liziczh.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb | Cookie&amp;Session</title>
    <link href="https://liziczh.com/javaweb-CookieAndSession.html"/>
    <id>https://liziczh.com/javaweb-CookieAndSession.html</id>
    <published>2018-07-16T12:45:55.000Z</published>
    <updated>2018-07-23T02:24:46.944Z</updated>
    
    <content type="html"><![CDATA[<!--# Java会话与状态管理--><p>由于 HTTP 是一种<strong>无状态</strong>协议，浏览器每一次请求都是独立的，无法维持客户端与Web 服务器之间的会话状态，所以引入<strong>会话跟踪</strong>技术，即 <strong>Cookie</strong> 和 <strong>Session</strong> 机制。</p><p>Web 应用中的<strong>会话</strong>指一个客户端浏览器与 Web 服务器之间连续发生的一系列请求与响应过程。<strong>会话状态</strong>指 Web 服务器与浏览器在会话过程中产生的状态信息。<strong>SessionID</strong> 用于唯一地标识一个会话的请求信息。</p><a id="more"></a><h2 id="Cookie-机制"><a href="#Cookie-机制" class="headerlink" title="Cookie 机制"></a>Cookie 机制</h2><p>Cookie 机制采用在客户端保持 HTTP 状态信息的方案实现会话跟踪。</p><p>Cookie 是指在浏览器访问 Web 服务器时，Web 服务器在 <strong>HTTP 响应头</strong>中附带的一个小文本文件。Cookie存储在客户端上，保留了各种跟踪信息。其中，会话Cookie保存在内存中，持久Cookie保存在磁盘中。</p><p>Cookie 机制：①服务器脚本向客户端浏览器发送一组 Cookie；②客户端浏览器将这些信息存储在本地计算机上；③当下一次浏览器向 Web 服务器发送请求时，浏览器会将这些 Cookie 信息发送到服务器，服务器通过这些 Cookie 信息识别用户。</p><p>Cookie 底层原理：Web 服务器在 HTTP 响应中增加 <code>Set-Cookie</code> 响应头字段将 Cookie 发送给浏览器；浏览器通过在 HTTP 请求中增加 Cookie 请求头字段将 Cookie 回传给服务器。</p><h3 id="Servlet-Cookie"><a href="#Servlet-Cookie" class="headerlink" title="Servlet Cookie"></a>Servlet Cookie</h3><p><strong>Cookie 类</strong>：</p><ul><li><code>Cookie(String name, String value)</code> - Cookie 构造方法</li><li><code>getName()</code> - 获取 Cookie name</li><li><code>getValue()</code> 和 <code>setValue(String value)</code>  - 获取/设置 Cookie Value</li><li><code>getMaxAge()</code> 和 <code>setMaxAge(int expiry)</code> - 获取/设置 Cookie 最大生存周期</li><li><code>getPath()</code> 和 <code>setPath(String url)</code> - 获取/设置 Cookie 适用路径</li></ul><p><strong>HttpServletResponse 添加 Cookie 到 HTTP 响应头中</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> response.addCookie(Cookie cookie)</span><br></pre></td></tr></table></figure><p><strong>HttpServletRequest 获取当前请求的所有 Cookie</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] request.getCookie()</span><br></pre></td></tr></table></figure><h3 id="Cookie应用"><a href="#Cookie应用" class="headerlink" title="Cookie应用"></a>Cookie应用</h3><h4 id="自动登陆"><a href="#自动登陆" class="headerlink" title="自动登陆"></a>自动登陆</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Session-机制"><a href="#Session-机制" class="headerlink" title="Session 机制"></a>Session 机制</h2><p>Session 机制采用在服务器端记录客户端会话状态的方案保持会话状态。</p><p>Session 机制：①在客户端浏览器第一次访问服务器时，Web 服务器为客户端浏览器创建一个会话对象（session 对象），并生成一个对应的 SessionID，服务器把客户端会话状态记录在用户独享的 session 对象中。②在客户端再次访问时，服务器根据客户端携带的 SessionID 从 session 域中查找用户的信息。</p><h3 id="保存-SessionID"><a href="#保存-SessionID" class="headerlink" title="保存 SessionID"></a>保存 SessionID</h3><p>Session 机制中客户端保存用户的 SessionID，用户的会话记录保存在服务器端，Web 服务器通过 SessionID 区分不同用户的会话状态。</p><p>保存 SessionID 的方式：</p><ul><li>以 cookie 形式写回客户端。</li><li>当浏览器禁用 cookie 后，服务器采用 URL 重写：将 session_id 附在 URL 后面。</li></ul><p>Session 持久化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"JSESSION"</span>,session.getId());</span><br><span class="line">cookie.setMaxAge(<span class="number">20</span>);</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="HttpSession"><a href="#HttpSession" class="headerlink" title="HttpSession"></a>HttpSession</h3><p>获取session对象：request.getSession()</p><p>getSession(true)：先创建session对象，再返回session。</p><p>获取sessionID：session.getId()</p><p>SessionID保存在Cookie中。</p><p>Session会话，保存在服务端，客户端只存在一个sessionID信息。</p><p>一般将jsp页面放在WEB-IFO下。</p><p>常用方法：</p><p>获取SessionID：</p><p>设置最大有效时间：</p><p>使session失效：invalidate()</p><h3 id="销毁-Session"><a href="#销毁-Session" class="headerlink" title="销毁 Session"></a>销毁 Session</h3><ul><li><code>session.invalidate()</code> - </li><li>设置的 session-timeout 的时间到了</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- session 配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- session 销毁时机 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>5<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>服务器卸载应用</li></ul><h3 id="利用URL重写实现session跟踪"><a href="#利用URL重写实现session跟踪" class="headerlink" title="利用URL重写实现session跟踪"></a>利用URL重写实现session跟踪</h3><p>当cookie被禁用时，如何跟踪session？</p><p>URL重写技术：将会话标识号以参数形式附加在URL地址后面</p><p>HttpServletResponse接口的方法：</p><ul><li><code>encodeURL()</code></li><li><code>encodeRedirectURL()</code></li></ul><p>URL重写实例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a herf= &lt;%=response.encodeURL("/hello_2.jsp")%&gt; &gt;hello_2.jsp&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="请求的绝对路径"><a href="#请求的绝对路径" class="headerlink" title="请求的绝对路径"></a>请求的绝对路径</h3><p>获取项目根目录的绝对路径：</p><ul><li><code>request.getContextPath()</code></li><li><code>application.getContextPath()</code></li></ul><p>绝对路径写法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a herf= request.getContextPath() + "/hello_2.jsp" &gt;hello_2.jsp&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="Session应用"><a href="#Session应用" class="headerlink" title="Session应用"></a>Session应用</h3><h4 id="防止表单多次提交"><a href="#防止表单多次提交" class="headerlink" title="防止表单多次提交"></a>防止表单多次提交</h4><p>（1）使用JavaScript实现防止表单重复提交：</p><ul><li>提交一次，将submit按钮置为disabled。</li><li>绑定onSubmit事件。</li></ul><p>（2）使用Session实现防止表单重复提交：</p><ul><li>Token对比</li></ul><h4 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h4><ul><li>使用Cookie存储</li><li>使用Session存储</li><li>使用Cookie+数据库存储（常用）</li></ul><h4 id="一次性验证码"><a href="#一次性验证码" class="headerlink" title="一次性验证码"></a>一次性验证码</h4>]]></content>
    
    <summary type="html">
    
      &lt;!--# Java会话与状态管理--&gt;
&lt;p&gt;由于 HTTP 是一种&lt;strong&gt;无状态&lt;/strong&gt;协议，浏览器每一次请求都是独立的，无法维持客户端与Web 服务器之间的会话状态，所以引入&lt;strong&gt;会话跟踪&lt;/strong&gt;技术，即 &lt;strong&gt;Cookie&lt;/strong&gt; 和 &lt;strong&gt;Session&lt;/strong&gt; 机制。&lt;/p&gt;
&lt;p&gt;Web 应用中的&lt;strong&gt;会话&lt;/strong&gt;指一个客户端浏览器与 Web 服务器之间连续发生的一系列请求与响应过程。&lt;strong&gt;会话状态&lt;/strong&gt;指 Web 服务器与浏览器在会话过程中产生的状态信息。&lt;strong&gt;SessionID&lt;/strong&gt; 用于唯一地标识一个会话的请求信息。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://liziczh.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="https://liziczh.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb | Servlet&amp;JSP</title>
    <link href="https://liziczh.com/javaweb-ServletAndJsp.html"/>
    <id>https://liziczh.com/javaweb-ServletAndJsp.html</id>
    <published>2018-06-22T04:35:34.000Z</published>
    <updated>2018-07-21T09:35:17.994Z</updated>
    
    <content type="html"><![CDATA[<p>JavaWeb-Servlet</p><a id="more"></a><h1 id="JavaWeb后端"><a href="#JavaWeb后端" class="headerlink" title="JavaWeb后端"></a>JavaWeb后端</h1><ul><li>Servlet</li><li>JSP</li><li>MVC</li><li>JavaWeb会话与状态管理</li><li>EL&amp;JSTL</li><li>过滤器Filter</li><li>监听器Listener</li><li>Web文件上传下载</li><li>国际化</li><li>目标：实现Web网上商城</li><li>AJAX：局部刷新</li></ul><h2 id="JavaWeb概述"><a href="#JavaWeb概述" class="headerlink" title="JavaWeb概述"></a>JavaWeb概述</h2><p>静态web资源：html</p><p>动态web资源：JSP/Servlet、ASP、PHP。</p><p>JavaWeb：动态Web资源开发技术。</p><p>JavaWeb三大组件：Servlet，Filter，Listener；（全属于动态资源）</p><p>Servlet容器：Tomcat，确保JAVA_HOME配置正确</p><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>Dynamic Web Project，New Server：location：tomcat安装目录下wtpwebapp；</p><p>配置<code>server.xml</code>的<code>Context</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"D:\Code\Java\Tomcat\apache-tomcat-9.0.8\wtpwebapps\MyWeb"</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">source</span>=<span class="string">"org.eclipse.jst.jee.server:MyWeb"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="虚拟目录配置"><a href="#虚拟目录配置" class="headerlink" title="虚拟目录配置"></a>虚拟目录配置</h3><p>在<code>tmocat\conf\Catalina\localhost</code>下，自定义一个xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"D:\Code\Java\WebApp\MyWeb"</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">source</span>=<span class="string">"org.eclipse.jst.jee.server:MyWeb"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="虚拟主机配置"><a href="#虚拟主机配置" class="headerlink" title="虚拟主机配置"></a>虚拟主机配置</h3><p>基于主机名的虚拟主机配置：在server.xml中配置多个Host。</p><p>基于端口号的虚拟主机配置：在server.xml中配置多个Service。</p><h3 id="Web项目打包"><a href="#Web项目打包" class="headerlink" title="Web项目打包"></a>Web项目打包</h3><p>war包：可以直接拷贝到webapps目录中，会自动解压直接使用tomcat运行。</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>HTTP超文本传输协议。请求协议+响应协议。请求响应模式</p><p>HTTP特点：无连接，无状态。</p><p>GET（查）、POST（改）、PUT（增）、DELETE（删）。</p><ul><li><strong>GET</strong> - 从指定的资源请求数据。一般用于<strong>查询资源信息</strong>。</li><li><strong>POST</strong> - 向指定的资源提交要被处理的数据。一般用于<strong>更新资源信息</strong>。 </li></ul><table><thead><tr><th>操作方式</th><th>GET</th><th>POST</th></tr></thead><tbody><tr><td>数据位置</td><td>HTTP包头</td><td>HTTP正文</td></tr><tr><td>数据加密</td><td>明文（数据暴露在URL中）</td><td>可明可密</td></tr><tr><td>数据安全</td><td>不安全</td><td>安全</td></tr><tr><td>数据长度</td><td>1KB以下</td><td>无限制</td></tr><tr><td>应用场景</td><td>查询数据</td><td>修改数据</td></tr></tbody></table><h3 id="？HTTPS"><a href="#？HTTPS" class="headerlink" title="？HTTPS"></a>？HTTPS</h3><p><strong>1.HTTPS协议是什么？</strong></p><p>在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。 </p><p>https协议需要到ca申请证书，一般免费证书很少，需要交费。 </p><p>http是超文本传输协议，信息是明文传输，https 则是具有安全性的SSL加密传输协议。 </p><p>http协议使用80端口，https协议使用443端口。</p><p>https协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议。</p><p><strong>2.HTTPS常见加密算法有哪些？</strong></p><ul><li><p><strong>非对称加密算法</strong>（密钥对，客户端用公钥加密数据发送给服务端，服务端用私钥解密数据）：DH、RSA、EL GAML、ECC </p><p>RSA：是目前最有影响力的公钥加密算法，已被ISO推荐为公钥数据的加密标准。其背后复杂的数学原理，简单来说就是：将2个大素数（质数）相乘非常容易，但要对其乘积结果因式分解非常困难。 </p></li><li><p><strong>对称加密算法</strong>（只有一个密钥，加密和解密都用这个密钥）：DES、IDEA、RC2、RC4、SKIPJACK </p></li><li><strong>HASH算法</strong>，常用的摘要算法：MD5、SHA1、SHA256 </li></ul><p><strong>3.如何在tomcat中开启HTTPS协议？</strong></p><p>在jdk的安装目录\bin\keytool.exe下打开keytool.exe</p><p>在命令行中输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkeypair -alias "tomcat" -keyalg "RSA" -keystore "g:\tomcat.keystore"</span><br></pre></td></tr></table></figure><p>配置server.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"443"</span> <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11Protocol"</span> <span class="attr">SSLEnabled</span>=<span class="string">"true"</span>  </span></span><br><span class="line"><span class="tag"><span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">scheme</span>=<span class="string">"https"</span> <span class="attr">secure</span>=<span class="string">"true"</span>  </span></span><br><span class="line"><span class="tag"><span class="attr">clientAuth</span>=<span class="string">"false"</span> <span class="attr">sslProtocol</span>=<span class="string">"TLS"</span></span></span><br><span class="line"><span class="tag"><span class="attr">keystoreFile</span>=<span class="string">"d:\tomcat.keystore"</span></span></span><br><span class="line"><span class="tag"><span class="attr">keystorePass</span>=<span class="string">"123456"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>Servlet用于处理请求，属于动态资源。</p><p>Servlet处理请求过程：</p><ul><li>接收请求数据</li><li>处理请求</li><li>完成响应</li></ul><p>Servlet容器：Tomcat；</p><h3 id="创建Servlet"><a href="#创建Servlet" class="headerlink" title="创建Servlet"></a>创建Servlet</h3><p><strong>创建Servlet三种方式</strong>：</p><ol><li>实现 Servlet 接口</li><li>继承 GenericServlet 类</li><li>继承 HttpServlet 类</li></ol><p><strong>Servlet接口的方法</strong>：</p><ul><li><code>init()</code> - 用于初始化，只执行一次。</li><li><code>service()</code> - 用于处理请求，请求一次执行一次。</li><li><code>destory()</code> - 用于完成扫尾工作，当Servlet从容器中卸载时执行。</li><li><code>getServletConfig()</code></li><li><code>getServletInfo()</code></li></ul><h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><ul><li>Servlet 通过调用 <strong>init ()</strong> 方法进行初始化。</li><li>Servlet 调用 <strong>service()</strong> 方法来处理客户端的请求。</li><li>Servlet 通过调用 <strong>destroy()</strong> 方法终止（结束）。</li><li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li></ul><h3 id="Servlet配置"><a href="#Servlet配置" class="headerlink" title="Servlet配置"></a>Servlet配置</h3><p>当通过浏览器去访问localhost:8080时，tomcat会首先解析web.xml。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在Servlet容器中注册Servlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--Servlet名称--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>firstName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--Servlet类名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.lizi.web.FirstServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--配置servlet的初始化参数--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--参数名称--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--参数值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>world<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--servlet的初始化的时机，</span></span><br><span class="line"><span class="comment">       负数，在第一次请求时对servlet初始化</span></span><br><span class="line"><span class="comment">       0/正数，在servlet容器启动时对servlet初始化（正数越小，初始化越早）</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Servlet映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Servlet名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>firstName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--对应的url地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>url-pattern配置</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--通常使用通配符*配置url--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ServletRequest servletRequest：封装了请求信息（请求头+请求体）；</p><p>ServletResponse servletResponse ：封装了响应信息（响应头+响应体）；</p><h3 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h3><p>GenericServlet类：抽象service方法，实现其他方法。</p><p>继承GenericServlet类：只需实现service方法即可。</p><h3 id="Servlet-3-0-配置"><a href="#Servlet-3-0-配置" class="headerlink" title="Servlet 3.0 配置"></a>Servlet 3.0 配置</h3><p>在开发中两种配置方式：约定 &gt; 配置。</p><ul><li>使用<strong>注解</strong>配置开发Servlet；</li><li>使用<strong>xml</strong>配置开发Servlet；</li></ul><p><strong>Servlet 3.0支持注解配置</strong>：约定 &gt; 配置；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"ServletDemo2"</span> , urlPatterns = &#123;<span class="string">"/demo2"</span>,<span class="string">"/hello"</span> &#125;)</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/demo2"</span>)   <span class="comment">// 未定义参数名，则默认为 urlPatterns。</span></span><br></pre></td></tr></table></figure><p>@WebServlet 约定这是一个Servlet。</p><h3 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h3><p>HttpServlet对http协议提供了特殊支持。</p><ul><li>doGet() - Get请求时执行</li><li>doPost() - Post请求时执行</li></ul><h4 id="请求类型"><a href="#请求类型" class="headerlink" title="请求类型"></a>请求类型</h4><p>URL请求类型为GET类型。</p><p>将请求参数拼接在URL后边 <code>url？name=val&amp;name=val</code>；</p><p>一个Servlet同时执行多种请求：<code>URL?method=delete</code>；</p><p>Form表单可指定请求类型 (GET/POST) 。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"GET/POST"</span>&gt;</span></span><br><span class="line">表单域：表单元素；</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件上传使用POST请求 (文件大小无限制) ；</p><p><strong>获取请求表单数据</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getParameter</span><span class="params">(String name)</span></span>;  <span class="comment">// 通过name获取参数值</span></span><br><span class="line">String[] getParameterValues(String name);  <span class="comment">// 通过name获取所有同名参数的value属性值</span></span><br></pre></td></tr></table></figure><h2 id="Servlet-API"><a href="#Servlet-API" class="headerlink" title="Servlet API"></a>Servlet API</h2><h3 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h3><p>ServletConfig 对象由 Servlet 独享。</p><p>1.获取 ServletName</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getServletName</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>2.获取初始化参数值 By 初始化参数 Name</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getInitParameter</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure><p>3.获取所有初始化参数 Name</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>枚举 (enum)：有穷可列举。</p><p>4.获取 ServletContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ServletContext <span class="title">getServletContext</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p>ServletContext 的生命周期贯穿整个web应用，(域对象)。</p><p>ServletContext 数据由一个web应用中的所有Servlet共享，(Application域)。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>appname<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>app<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>获取ServletContext对象</strong>：</p><ul><li>ServletConfig对象调用getServletContext()方法；</li><li>HttpServlet子类对象调用getServletContext()方法；</li></ul><p><strong>ServletContext域属性操作</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, Object value)</span></span>;</span><br><span class="line"><span class="function">Object <span class="title">getAttribute</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure><p>获取资源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getRealPath</span><span class="params">(String filepath)</span></span>;  <span class="comment">// 获取资源物理路径</span></span><br><span class="line"><span class="function">InputStream <span class="title">getResourceAsStream</span><span class="params">(String filepath)</span></span>;  <span class="comment">// 获取文件流</span></span><br></pre></td></tr></table></figure><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p>每一次请求创建一个request对象。（域对象）</p><p>request对象生命周期：发出请求到请求结束。</p><p><strong>获取请求头</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getHeader</span><span class="params">(String name)</span></span>;  <span class="comment">// 获取指定name的请求头</span></span><br><span class="line"><span class="function">Enumeration <span class="title">getHeaderNames</span><span class="params">()</span></span>;  <span class="comment">// 获取所有请求头name</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getIntHeader</span><span class="params">(String name)</span></span>;  <span class="comment">//获取int类型值的请求头</span></span><br></pre></td></tr></table></figure><p><strong>获取请求URL信息</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getContentLength</span><span class="params">()</span>  <span class="comment">// 获取请求体的字节数，GET请求没有请求体，没有请求体返回-1；</span></span></span><br><span class="line"><span class="function">String <span class="title">getContentType</span><span class="params">()</span>  <span class="comment">// 获取请求类型，如果请求是GET，那么这个方法返回null；如果是POST请求，那么默认为application/x-www-form-urlencoded，表示请求体内容使用了URL编码；</span></span></span><br><span class="line"><span class="function">String <span class="title">getMethod</span><span class="params">()</span>  <span class="comment">// 返回请求方法，例如：GET</span></span></span><br><span class="line"><span class="function">Locale <span class="title">getLocale</span><span class="params">()</span>  <span class="comment">// 返回当前客户端浏览器的Locale。java.util.Locale表示国家和言语，这个东西在国际化中很有用；</span></span></span><br><span class="line"><span class="function">String <span class="title">getCharacterEncoding</span><span class="params">()</span>  <span class="comment">//获取请求编码，如果没有setCharacterEncoding()，那么返回null，表示使用ISO-8859-1编码；</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(String code)</span>  <span class="comment">// 设置请求编码，只对请求体有效！注意，对于GET而言，没有请求体！！！所以此方法只能对POST请求中的参数有效！</span></span></span><br><span class="line"><span class="function">String <span class="title">getContextPath</span><span class="params">()</span>  <span class="comment">// 返回上下文路径，例如：/hello</span></span></span><br><span class="line"><span class="function">String <span class="title">getQueryString</span><span class="params">()</span>  <span class="comment">// 返回请求URL中的参数，例如：name=zhangSan</span></span></span><br><span class="line"><span class="function">String <span class="title">getRequestURI</span><span class="params">()</span>  <span class="comment">// 返回请求URI路径，例如：/hello/oneServlet</span></span></span><br><span class="line"><span class="function">StringBuffer <span class="title">getRequestURL</span><span class="params">()</span>  <span class="comment">// 返回请求URL路径，例如：http://localhost/hello/oneServlet，即返回除了参数以外的路径信息；</span></span></span><br><span class="line"><span class="function">String <span class="title">getServletPath</span><span class="params">()</span>  <span class="comment">// 返回Servlet路径，例如：/oneServlet</span></span></span><br><span class="line"><span class="function">String <span class="title">getRemoteAddr</span><span class="params">()</span>  <span class="comment">// 返回当前客户端的IP地址；</span></span></span><br><span class="line"><span class="function">String <span class="title">getRemoteHost</span><span class="params">()</span>  <span class="comment">// 返回当前客户端的主机名，但这个方法的实现还是获取IP地址；</span></span></span><br><span class="line"><span class="function">String <span class="title">getScheme</span><span class="params">()</span>  <span class="comment">// 返回请求协议，例如：http；</span></span></span><br><span class="line"><span class="function">String <span class="title">getServerName</span><span class="params">()</span>  <span class="comment">// 返回主机名，例如：localhost</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getServerPort</span><span class="params">()</span>  <span class="comment">// 返回服务器端口号，例如：8080</span></span></span><br></pre></td></tr></table></figure><p><strong>获取请求参数</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getParameter</span><span class="params">(String name)</span></span>; <span class="comment">// 获取指定名称的参数值</span></span><br><span class="line">String[] getParameterValues(String name); <span class="comment">// 获取多个同名参数值</span></span><br><span class="line"><span class="function">Enumeration&lt;String&gt; <span class="title">getParameterNames</span><span class="params">()</span></span>; <span class="comment">// 获取参数名称</span></span><br></pre></td></tr></table></figure><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><h4 id="设置响应正文"><a href="#设置响应正文" class="headerlink" title="设置响应正文"></a>设置响应正文</h4><p>字符流</p><p>字节流</p><p>在一个请求中，不能同时使用两个流。</p><h4 id="设置响应头"><a href="#设置响应头" class="headerlink" title="设置响应头"></a>设置响应头</h4><h4 id="设置状态码"><a href="#设置状态码" class="headerlink" title="设置状态码"></a>设置状态码</h4><h3 id="Servlet请求转发"><a href="#Servlet请求转发" class="headerlink" title="Servlet请求转发"></a>Servlet请求转发</h3><h4 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h4><p>请求转发：保存当前请求的request和response对象，转发到指定URL处理。请求转发共享一个request和一个response对象，只发送一次请求，页面不跳转（地址栏不发生改变）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">"/servletDemo2"</span>).forward(request,response);</span><br></pre></td></tr></table></figure><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>重定向：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(String location);</span><br></pre></td></tr></table></figure><p>客户端发送了两次请求，地址栏发生变化。</p><p>重定向第二个请求一定是GET。</p><h4 id="请求包含"><a href="#请求包含" class="headerlink" title="请求包含"></a>请求包含</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">"/servletDemo2"</span>).include(request,response);</span><br></pre></td></tr></table></figure><p>请求包含多用于JSP页面，完成多页面的合并。</p><p>请求转发多用于Servlet中，转发目标大多是JSP页面。</p><h3 id="中文乱码问题"><a href="#中文乱码问题" class="headerlink" title="中文乱码问题"></a>中文乱码问题</h3><p>中文乱码产生原因：编码解码字符集不一致。</p><p><strong>POST请求中文乱码</strong>解决方案：在获取各种参数之前<code>setCharacterEncoding(&quot;UTF-8&quot;)</code>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure><p><strong>GET请求中文乱码</strong>解决方案：在Tomcat中server.xml中设置<code>URIEncoding = &quot;UTF-8&quot;</code>；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span> / &gt;</span></span><br></pre></td></tr></table></figure><p><strong>字符串终极解决方案</strong>：如果以上两种配置都没用，重新编码；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">name = <span class="keyword">new</span> String(name.getBytes(<span class="string">"iso-8859-1"</span>),<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure><p><strong>响应内容中文乱码</strong>解决方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);  <span class="comment">// 设置响应内容的字符集</span></span><br></pre></td></tr></table></figure><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>JSP（Java Server Pages，Java 服务器页面），是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。 </p><p>JSP本质是Java Servlet。将jsp部署到Web容器后，jsp文件会被翻译为index_jsp.java文件。</p><p>JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。 </p><p>JSP = html +  java代码片段 + jsp动态标签</p><h3 id="JSP-语法"><a href="#JSP-语法" class="headerlink" title="JSP 语法"></a>JSP 语法</h3><p><strong>JSP 注释</strong>：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--注释内容--%&gt;</span><br></pre></td></tr></table></figure><p><strong>JSP 表达式</strong>：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= Java表达式 %&gt;</span><br></pre></td></tr></table></figure><blockquote><p>JSP表达式不加分号，Java表达式被翻译成一条 <code>out.print()</code> 语句。</p></blockquote><p><strong>JSP 声明</strong>：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! Java定义类成员 %&gt;</span><br></pre></td></tr></table></figure><p><strong>JSP 脚本片段</strong>：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% Java代码片段 %&gt;</span><br></pre></td></tr></table></figure><blockquote><p>JSP脚本片段可以直接使用JSP提供的隐式对象完成WebAPP特定功能。<br>JSP脚本片段中的Java代码将原样搬进由JSP页面翻译成的Servlet中的jspService方法中。</p></blockquote><h3 id="JSP-九大隐含对象★"><a href="#JSP-九大隐含对象★" class="headerlink" title="JSP 九大隐含对象★"></a>JSP 九大隐含对象★</h3><p><strong>隐含对象/内置对象</strong>：在jsp页面上无需显式声明，即可直接使用。（在jsp转换为servlet时，隐含对象已被声明在servlet的 <code>_jspService</code> 方法中）</p><table><thead><tr><th>JSP 隐含对象</th><th>描述</th></tr></thead><tbody><tr><td><code>out</code></td><td>PrintWriter类的对象，用于将内容响应在页面上</td></tr><tr><td><code>pageContext</code></td><td>ServletContext类的对象，获取当前页面的所有对象</td></tr><tr><td><code>session</code></td><td>HttpSession类的对象，表示一次会话</td></tr><tr><td><code>page</code></td><td>表示当前页面对象（this）</td></tr><tr><td><code>config</code></td><td>ServletConfig类的对象，表示当前servlet的配置信息</td></tr><tr><td><code>application</code></td><td>ServletContext类的对象，表示当前应用上下文</td></tr><tr><td><code>request</code></td><td>HttpRequest类的对象，表示一次请求</td></tr><tr><td><code>response</code></td><td>HttpResponse类的对象，表示一次响应</td></tr><tr><td><code>exception</code></td><td>Exception类的对象，表示当前页面的异常对象</td></tr></tbody></table><blockquote><p>exception对象必须在 <code>isErrorPage=&quot;true&quot;</code> 的情况下使用。</p></blockquote><h3 id="JSP-域对象"><a href="#JSP-域对象" class="headerlink" title="JSP 域对象"></a>JSP 域对象</h3><p><strong>JSP 四个域对象</strong>：pageContext，request，session，application</p><table><thead><tr><th>JSP域对象</th><th>作用范围</th><th>描述</th></tr></thead><tbody><tr><td>pageContext</td><td>page域</td><td>只能在当前jsp页面使用（当前页面)</td></tr><tr><td>request</td><td>request域</td><td>只能在同一个请求中使用（转发）</td></tr><tr><td>session</td><td>session域</td><td>只能在同一个会话中使用 （私有）</td></tr><tr><td>application</td><td>context域</td><td>只能在一个web应用中使用（全局）</td></tr></tbody></table><blockquote><p>一次会话：浏览器打开直到浏览器关闭。</p></blockquote><p><strong>域对象属性操作</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置域对象属性</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, Object value)</span></span>;</span><br><span class="line"><span class="comment">// 获取域对象属性</span></span><br><span class="line"><span class="function">Object <span class="title">getAttribute</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="comment">// 移除域对象属性</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>域对象的作用</strong>：保存数据，获取数据，数据共享。</p><h3 id="JSP-指令"><a href="#JSP-指令" class="headerlink" title="JSP 指令"></a>JSP 指令</h3><p>JSP指令用来设置整个JSP页面相关的属性，告诉JSP引擎如何处理JSP页面其他部分。</p><p><strong>基本语法</strong>：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ 指令 属性名=<span class="string">"值"</span> %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br></pre></td></tr></table></figure><p><strong>指令类型</strong>：</p><table><thead><tr><th>指令标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;%@ page ... %&gt;</code></td><td>定义网页依赖属性</td></tr><tr><td><code>&lt;%@ include ... %&gt;</code></td><td>包含其他文件</td></tr><tr><td><code>&lt;%@ taglib ... %&gt;</code></td><td>引入标签库</td></tr></tbody></table><h4 id="page指令"><a href="#page指令" class="headerlink" title="page指令"></a>page指令</h4><p><strong>page指令</strong>：为JSP页面的定义各种属性。</p><table><thead><tr><th>常用属性</th><th>描述</th></tr></thead><tbody><tr><td>`import=”{packag.class \</td><td>package.*}, …”`</td><td>导包</td></tr><tr><td>`session=”true</td><td>false”`</td><td>指定当前页面是否生成隐含对象session</td></tr><tr><td><code>contentType=&quot;mimeType;charset=字符集&quot;</code></td><td>指定MIME类型和字符编码</td></tr><tr><td><code>pageEncoding=&quot;字符集&quot;</code></td><td>指定页面编码字符集</td></tr><tr><td>`isELIgnored=”true</td><td>false”`</td><td>指定是否执行EL表达式</td></tr><tr><td><code>errorPage=&quot;relative_url&quot;</code></td><td>指定错误处理页面的相对路径</td></tr><tr><td>`isErrorPage=”true</td><td>false”`</td><td>指定当前页面是否为错误处理页面</td></tr></tbody></table><p><strong>errorPage与isErrorPage对比</strong>：</p><ul><li><code>errorPage</code> 属性值必须使用相对路径（<code>/</code>代表当前WEB应用的根目录）。响应errorPage使用请求转发方式。</li><li><code>isErrorPage</code> 指定当前页面是否为错误处理页面，当前页面是否隐含exception对象。</li></ul><h4 id="include-指令"><a href="#include-指令" class="headerlink" title="include 指令"></a>include 指令</h4><p><strong>include 指令</strong>：包含其他文件（静态包含），当前JSP页面与引入页面在被JSP引擎翻译成Servlet的过程中合并为一个Servlet。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">"relativeURL"</span> %&gt;</span><br></pre></td></tr></table></figure><blockquote><p>被引入文件必须遵循JSP语法。<br>被引入文件可以使用任意扩展名，建议使用.jspf。</p></blockquote><h3 id="JSP-动作元素"><a href="#JSP-动作元素" class="headerlink" title="JSP 动作元素"></a>JSP 动作元素</h3><p>JSP Action元素完成各种通用JSP页面功能，实现一些处理复杂业务逻辑的专用功能。</p><p><strong><code>&lt;jsp:include&gt;</code></strong>：包含其他文件（动态包含）。将另一个页面的输出内容插入当前JSP页面的输出内容之中。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">"relative URL"</span> flush=<span class="string">"true"</span> /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>page属性指定引入资源的相对路径。<br>flush属性定义在包含资源前是否刷新缓存区 </p></blockquote><p><strong><code>&lt;jsp:forward&gt;</code></strong>：请求转发</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">"Relative URL"</span> /&gt;</span><br></pre></td></tr></table></figure><p><strong><code>&lt;jsp:param&gt;</code></strong>：以键值对形式为其他标签提供附加信息。</p><p><code>&lt;jsp:param&gt;</code>与<code>&lt;jsp:include&gt;</code>搭配使用：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">"resource/sum.jsp"</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"number"</span> value=<span class="string">"300"</span> /&gt;</span><br><span class="line">&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure><p><strong>静态包含与动态包含的区别</strong>：</p><p>（1）语法不同：</p><ul><li>静态包含：JSP指令 - <code>&lt;%@ include file=&quot;&quot;%&gt;</code></li><li>动态包含：JSP行为 - <code>&lt;jsp: include page=&quot;&quot;%&gt;</code></li></ul><p>（2）生成文件数量不同：</p><ul><li>静态包含：两个文件二合一，整体编译，生成一个servlet和class文件。</li><li>动态包含：各个jsp分别转换，分别编译，生成多个servlet和class文件。</li></ul><p>（3）包含时机不同：</p><ul><li>静态包含：JSP翻译成Servlet阶段。</li><li>动态包含：执行class文件阶段，动态加入。</li></ul><p>（4）静态包含在两个文件中不能有相同的变量，动态包含允许</p><p>（5）静态包含只能包含文件，动态包含还可以包含servlet输出的结果</p><p>（6）静态包含不能使用变量作为文件名，动态包含可以使用变量作为文件名</p><p>（7）动态包含文件发生变化，包含文件会感知变化</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaWeb-Servlet&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://liziczh.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="https://liziczh.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>Hexo | （五）Yilia主题优化</title>
    <link href="https://liziczh.com/hexo-yilia-optimization.html"/>
    <id>https://liziczh.com/hexo-yilia-optimization.html</id>
    <published>2018-06-17T11:13:57.000Z</published>
    <updated>2018-06-19T10:12:02.959Z</updated>
    
    <content type="html"><![CDATA[<!--# Hexo | （五）Yilia主题优化--><p>yilia主题简单优雅，但是缺少一些我想要的功能，所以我自己稍微扩展了一些功能，比如添加了之前使用的LiveRe评论系统，新增了百度自动推送功能，在文章底部追加了版权声明，勉强实现了相册功能。<br>优化后的yilia主题：<a href="https://github.com/liziczh/hexo-theme-yilia" target="_blank" rel="noopener">https://github.com/liziczh/hexo-theme-yilia</a></p><a id="more"></a><h3 id="add-LiveRe评论系统"><a href="#add-LiveRe评论系统" class="headerlink" title="add:LiveRe评论系统"></a>add:LiveRe评论系统</h3><p>1.在<code>yilia/layout/_partial/post</code>下添加<code>livere.ejs</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">&lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;&lt;%=theme.livere_uid%&gt;&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">   (function(d, s) &#123;</span><br><span class="line">       var j, e = d.getElementsByTagName(s)[0];</span><br><span class="line">       if (typeof LivereTower === &apos;function&apos;) &#123; return; &#125;</span><br><span class="line">       j = d.createElement(s);</span><br><span class="line">       j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;;</span><br><span class="line">       j.async = true;</span><br><span class="line">       e.parentNode.insertBefore(j, e);</span><br><span class="line">   &#125;)(document, &apos;script&apos;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- City版安装代码已完成 --&gt;</span><br></pre></td></tr></table></figure><p>2.编辑<code>yilia/layout/_partial/article.ejs</code>，在评论代码中引用<code>livere.ejs</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.livere_uid)&#123; %&gt;</span><br><span class="line">   &lt;%- partial(&apos;post/livere&apos;, &#123;</span><br><span class="line">     key: post.slug,</span><br><span class="line">     title: post.title,</span><br><span class="line">     url: config.url+url_for(post.path)</span><br><span class="line">   &#125;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>3.编辑<code>yilia/_config.yml</code>，添加<code>livere_uid</code>属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#0、liveRe评论</span></span><br><span class="line"><span class="attr">livere_uid:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="add-百度推送"><a href="#add-百度推送" class="headerlink" title="add:百度推送"></a>add:百度推送</h3><p>1.在<code>yilia/layout/_partial</code>下添加<code>baidu-push.ejs</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.baidu_push)&#123; %&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">(function()&#123;</span><br><span class="line">    var bp = document.createElement(&apos;script&apos;);</span><br><span class="line">    var curProtocol = window.location.protocol.split(&apos;:&apos;)[0];</span><br><span class="line">    if (curProtocol === &apos;https&apos;) &#123;</span><br><span class="line">        bp.src = &apos;https://zz.bdstatic.com/linksubmit/push.js&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        bp.src = &apos;http://push.zhanzhang.baidu.com/push.js&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    var s = document.getElementsByTagName(&quot;script&quot;)[0];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>2.编辑<code>layout/_partial/head.ejs</code>，引用<code>baidu-push.ejs</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(&apos;baidu-push&apos;) %&gt;</span><br></pre></td></tr></table></figure><p>3.编辑<code>yilia/_config.yml</code>，添加<code>baidu_push</code>属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 百度推送</span></span><br><span class="line"><span class="attr">baidu_push:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="add-版权声明"><a href="#add-版权声明" class="headerlink" title="add:版权声明"></a>add:版权声明</h3><p>1.编辑<code>layout/_partial/head.ejs</code>，添加<code>post-copyright</code>代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (((theme.copyright_type === 2 &amp;&amp; !post.copyright) || (theme.copyright_type === 1 &amp;&amp; post.copyright)) &amp;&amp; !index)&#123; %&gt;</span><br><span class="line">&lt;div&gt; </span><br><span class="line">    &lt;ul class=&quot;post-copyright&quot;&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;strong&gt;本文作者：&lt;/strong&gt;&lt;%= config.author%&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;strong&gt;本文链接：&lt;/strong&gt;</span><br><span class="line">            &lt;a href=&quot;&lt;%= config.url %&gt;&lt;%- url_for(post.path) %&gt;&quot; title=&quot;&lt;%= config.title %&gt;&quot;&gt;&lt;%= config.url %&gt;&lt;%- url_for(post.path) %&gt;&lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;strong&gt;版权声明： &lt;/strong&gt;</span><br><span class="line">            本博客所有文章除特别声明外，均采用 &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/3.0/&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;CC BY-NC-SA 3.0&lt;/a&gt; 许可协议。转载请注明出处!</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>2.添加<code>.post-copyright</code>的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-copyright</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0em</span> <span class="number">0em</span> <span class="number">0em</span> <span class="number">0em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">border-left</span>:<span class="number">3px</span> solid <span class="number">#ff1700</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.编辑<code>yilia/_config.yml</code>，添加<code>copyright_type</code>属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 版权声明</span></span><br><span class="line"><span class="comment"># type：0-关闭版权声明； 1-存在copyright:true属性的文章，显示版权声明； 2-所有文章均有版权声明</span></span><br><span class="line"><span class="attr">copyright_type:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="new-相册页面（未完成）"><a href="#new-相册页面（未完成）" class="headerlink" title="new:相册页面（未完成）"></a>new:相册页面（未完成）</h3><p>暂时是直接将以下代码嵌入index.md文档中，勉强实现相册功能。但这样写我自己看着都难受，之后有时间再改。</p><p>1.相册图片CSS</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.img</span>&#123;<span class="attribute">width</span>:<span class="number">240px</span>;<span class="attribute">display</span>:inline-block;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.img-last</span>&#123;<span class="attribute">width</span>:<span class="number">240px</span>;<span class="attribute">display</span>:inline-block;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">0</span>;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>2.原生JS实现jQuery入口函数，实现手机图片自适应。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">/*原生JS实现jQuery入口函数*/</span></span><br><span class="line"><span class="undefined">function ready(fn)&#123;</span></span><br><span class="line"><span class="undefined">    if(document.addEventListener&#123;</span></span><br><span class="line"><span class="undefined">       document.addEventListener('DOMContentLoaded',function()&#123;</span></span><br><span class="line"><span class="undefined">        document.removeEventListener('DOMContentLoaded',arguments.callee,false);</span></span><br><span class="line"><span class="undefined">        fn();</span></span><br><span class="line"><span class="undefined">    &#125;,false);</span></span><br><span class="line"><span class="undefined">&#125;else if(document.attachEvent)&#123;</span></span><br><span class="line"><span class="undefined">    document.attachEvent('onreadystatechange',function()&#123;</span></span><br><span class="line"><span class="undefined">        if(document.readyState=='complete')&#123;</span></span><br><span class="line"><span class="undefined">            document.detachEvent('onreadystatechange',arguments.callee);</span></span><br><span class="line"><span class="undefined">            fn();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">&#125;&#125;; </span></span><br><span class="line"><span class="undefined">/*手机图片自适应*/</span></span><br><span class="line"><span class="undefined">ready(function()&#123;</span></span><br><span class="line"><span class="undefined">    var img = document.getElementsByTagName("img");</span></span><br><span class="line"><span class="undefined">    if(window.screen.width &lt; 500)&#123;</span></span><br><span class="line"><span class="undefined">        for(var i = 0 ; i &lt; img.length;i++)&#123;</span></span><br><span class="line"><span class="undefined">            var len = (window.screen.width-40) / 2;</span></span><br><span class="line"><span class="undefined">            img[i].style.width = len.toString()+"px";</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;); </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="new-Ones页面（未完成）"><a href="#new-Ones页面（未完成）" class="headerlink" title="new:Ones页面（未完成）"></a>new:Ones页面（未完成）</h3><p>单独写一个Ones的静态界面，暂未完成，之后再说。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--# Hexo | （五）Yilia主题优化--&gt;
&lt;p&gt;yilia主题简单优雅，但是缺少一些我想要的功能，所以我自己稍微扩展了一些功能，比如添加了之前使用的LiveRe评论系统，新增了百度自动推送功能，在文章底部追加了版权声明，勉强实现了相册功能。&lt;br&gt;优化后的yilia主题：&lt;a href=&quot;https://github.com/liziczh/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/liziczh/hexo-theme-yilia&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo博客" scheme="https://liziczh.com/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo博客" scheme="https://liziczh.com/tags/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Java调用阿里OCR接口实现印刷文字识别</title>
    <link href="https://liziczh.com/java-aliocr-impl.html"/>
    <id>https://liziczh.com/java-aliocr-impl.html</id>
    <published>2018-06-08T07:17:29.000Z</published>
    <updated>2018-07-06T07:52:27.866Z</updated>
    
    <content type="html"><![CDATA[<!--# Java调用阿里OCR接口实现印刷文字识别--><p><strong>印刷文字识别(OCR)</strong>：通俗来讲就是将图片中的印刷文字识别出来。<br>阿里云提供了多种<a href="https://market.tianchi.aliyun.com/outsource/api/products/56956004/?spm=a2c22.11465550.1067954.btn1.2cb43d0fwS0C9j#ymk=%7B%22categoryId%22%3A56956004%2C%22pageIndex%22%3A1%2C%22pageSize%22%3A10%2C%22saleMode%22%3A0%2C%22tag%22%3A%22%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%98%E6%96%B9%22%2C%22keywords%22%3A%22%22%7D" target="_blank" rel="noopener">OCR服务</a>，在此使用的是<strong>印刷文字识别－文档小说图片文字识别</strong>，主要用于企业文档，法律法务文档，信件等，以及小说，文学类书籍等场景的文字识别。</p><a id="more"></a><h3 id="文档小说图片文字识别"><a href="#文档小说图片文字识别" class="headerlink" title="文档小说图片文字识别"></a>文档小说图片文字识别</h3><p>思路：将图片转化为base64编码，借助阿里OCR接口分析，返回印刷文字的json文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizi.ocr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lizi.tools.HttpUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用阿里OCR接口实现印刷文档图片转文字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OCRDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将图片转换为base64编码格式</span></span><br><span class="line">        String imgPath = <span class="string">"C:\\Users\\lizic\\Desktop\\2.png"</span>;</span><br><span class="line">        String imgStr = imgToBase64(imgPath);</span><br><span class="line">        ocr(imgStr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阿里OCR接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ocr</span><span class="params">(String imgBase64)</span></span>&#123;</span><br><span class="line">        String host = <span class="string">"https://ocrapi-document.taobao.com"</span>; <span class="comment">// 阿里接口地址</span></span><br><span class="line">        String path = <span class="string">"/ocrservice/document"</span>; <span class="comment">// 具体地址</span></span><br><span class="line">        String method = <span class="string">"POST"</span>;  <span class="comment">// 请求类型POST</span></span><br><span class="line">        String appcode = <span class="string">"你购买的阿里OCR服务的AppCode"</span>; <span class="comment">// 产品密钥</span></span><br><span class="line">        Map&lt;String, String&gt; headers = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        <span class="comment">//最后在header中的格式(中间是英文空格)为Authorization:APPCODE yourAppCode</span></span><br><span class="line">        headers.put(<span class="string">"Authorization"</span>, <span class="string">"APPCODE "</span> + appcode);</span><br><span class="line">        <span class="comment">//根据API的要求，定义相对应的Content-Type</span></span><br><span class="line">        headers.put(<span class="string">"Content-Type"</span>, <span class="string">"application/json; charset=UTF-8"</span>);</span><br><span class="line">        Map&lt;String, String&gt; querys = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        <span class="comment">// img 和 url 只能使用一个</span></span><br><span class="line">        String bodys = <span class="string">"&#123;\"img\":\""</span>+imgBase64+<span class="string">"\",\"prob\":false&#125;"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * HttpUtils下载：https://github.com/aliyun/api-gateway-demo-sign-java/blob/master/src/main/java/com/aliyun/api/gateway/demo/util/HttpUtils.java</span></span><br><span class="line"><span class="comment">             * 相关依赖请参照：https://github.com/aliyun/api-gateway-demo-sign-java/blob/master/pom.xml</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            HttpResponse response = HttpUtils.doPost(host, path, method, headers, querys, bodys);</span><br><span class="line">            System.out.println(response.toString());</span><br><span class="line">            <span class="comment">// 获取response的body</span></span><br><span class="line">            System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将图片转换为base64字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imgPath 编码图片的路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> imgStr 图片的base64编码字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">imgToBase64</span><span class="params">(String imgPath)</span></span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">null</span>;</span><br><span class="line">        InputStream in = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将图片读入data中</span></span><br><span class="line">            in = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(imgPath));</span><br><span class="line">            data = <span class="keyword">new</span> <span class="keyword">byte</span>[in.available()];</span><br><span class="line">            in.read(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对data进行Base64编码</span></span><br><span class="line">        BASE64Encoder encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">        String imgStr = encoder.encode(data);</span><br><span class="line">        <span class="keyword">return</span> imgStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将Base64字符串转换为图片</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imgStr 图片的base64编码字符串；</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imgPath 生成图片的路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否生成图片</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">base64ToImg</span><span class="params">(String imgStr, String imgPath)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(imgStr == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对imgBase64字符串进行解码</span></span><br><span class="line">        OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BASE64Decoder decoder = <span class="keyword">new</span> BASE64Decoder();</span><br><span class="line">            <span class="keyword">byte</span>[] b = decoder.decodeBuffer(imgStr);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;b.length ; i++)&#123;</span><br><span class="line">                <span class="comment">// 调整异常数据</span></span><br><span class="line">                <span class="keyword">if</span>(b[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    b[i] += <span class="number">256</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 生成图片文件</span></span><br><span class="line">            out = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(imgPath));</span><br><span class="line">            out.write(b);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!--# Java调用阿里OCR接口实现印刷文字识别--&gt;
&lt;p&gt;&lt;strong&gt;印刷文字识别(OCR)&lt;/strong&gt;：通俗来讲就是将图片中的印刷文字识别出来。&lt;br&gt;阿里云提供了多种&lt;a href=&quot;https://market.tianchi.aliyun.com/outsource/api/products/56956004/?spm=a2c22.11465550.1067954.btn1.2cb43d0fwS0C9j#ymk=%7B%22categoryId%22%3A56956004%2C%22pageIndex%22%3A1%2C%22pageSize%22%3A10%2C%22saleMode%22%3A0%2C%22tag%22%3A%22%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%98%E6%96%B9%22%2C%22keywords%22%3A%22%22%7D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OCR服务&lt;/a&gt;，在此使用的是&lt;strong&gt;印刷文字识别－文档小说图片文字识别&lt;/strong&gt;，主要用于企业文档，法律法务文档，信件等，以及小说，文学类书籍等场景的文字识别。&lt;/p&gt;
    
    </summary>
    
      <category term="Java小程序" scheme="https://liziczh.com/categories/Java%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Java小程序" scheme="https://liziczh.com/tags/Java%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java使用POI实现对Excel文件的读写</title>
    <link href="https://liziczh.com/java-poi-impl.html"/>
    <id>https://liziczh.com/java-poi-impl.html</id>
    <published>2018-06-03T03:42:30.000Z</published>
    <updated>2018-06-19T09:37:04.352Z</updated>
    
    <content type="html"><![CDATA[<!--# Java使用POI实现对Excel文件的读写--><p>Apache POI提供了Java程序读取和写入MS Office文档的接口。<br>对于Excel文档读写：<br>-HSSF：提供读写MS Excel的xls文件的功能。<br>-XSSF：提供读写MS Excel的xlsx文件的功能。</p><a id="more"></a><h3 id="Java使用POI实现对Excel文件的读写操作"><a href="#Java使用POI实现对Excel文件的读写操作" class="headerlink" title="Java使用POI实现对Excel文件的读写操作"></a>Java使用POI实现对Excel文件的读写操作</h3><p>本篇的ExcelUtils工具类，主要针对于<strong>一行数据(row)作为一个实例(t)</strong>的情况使用。</p><table><thead><tr><th>Excel对象</th><th>Java对象</th></tr></thead><tbody><tr><td>表格（sheet）</td><td><code>List&lt;T&gt;</code></td></tr><tr><td>行（row）</td><td>T 的一个实例 (t)</td></tr><tr><td>单元格（cell）</td><td>对象 t 的某个属性</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liziczh.ims.tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFCellStyle;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Excel文件读写工具类：针对一行数据(row)作为一个实例(t)的情况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 针对xlsx文件，使用XSSFWorkbook，要求excel版本在2007以上</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> T 泛型类，行对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filepath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">readExcel</span><span class="params">(Class T,String filepath)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(filepath != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(filepath))&#123;</span><br><span class="line">                <span class="comment">// 工作簿</span></span><br><span class="line">                Workbook xwb = <span class="keyword">new</span> XSSFWorkbook(<span class="keyword">new</span> FileInputStream(filepath));</span><br><span class="line">                <span class="comment">// 表格</span></span><br><span class="line">                Sheet sheet = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 行</span></span><br><span class="line">                Row row = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 单元格</span></span><br><span class="line">                Cell cell = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 表</span></span><br><span class="line">                sheet = xwb.getSheetAt(<span class="number">0</span>);</span><br><span class="line">                List&lt;T&gt; sheetList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = sheet.getFirstRowNum()+<span class="number">1</span>; i &lt; sheet.getPhysicalNumberOfRows(); i++)&#123;</span><br><span class="line">                    <span class="comment">// 获取第i行</span></span><br><span class="line">                    row = sheet.getRow(i);</span><br><span class="line">                    <span class="comment">// 利用反射生成一个实例</span></span><br><span class="line">                    T t = (T) T.newInstance();</span><br><span class="line">                    <span class="comment">// 依此获取单元格放入对象t中</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = row.getFirstCellNum(); j &lt; row.getPhysicalNumberOfCells(); j++)&#123;</span><br><span class="line">                        <span class="comment">// 获取第i行第j列的单元格，</span></span><br><span class="line">                        cell = row.getCell(j);</span><br><span class="line">                        <span class="comment">// 获取对象的属性数组</span></span><br><span class="line">                        Field[] fs = t.getClass().getDeclaredFields();</span><br><span class="line">                        <span class="comment">// 设置属性为可访问</span></span><br><span class="line">                        fs[j].setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        <span class="comment">// 类型转换：将单元格内容先转为String再转为当前属性所对应的类型</span></span><br><span class="line">                        <span class="keyword">if</span>(fs[j].getType() == String.class)&#123;</span><br><span class="line">                            fs[j].set(t,fs[j].getType().cast(cell.toString()));</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fs[j].getType() == <span class="keyword">int</span>.class) &#123;</span><br><span class="line">                            fs[j].set(t,<span class="keyword">new</span> Integer(cell.toString()));</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(fs[j].getType() == <span class="keyword">short</span>.class)&#123;</span><br><span class="line">                            fs[j].set(t,<span class="keyword">new</span> Short(cell.toString()));</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(fs[j].getType() == <span class="keyword">long</span>.class)&#123;</span><br><span class="line">                            fs[j].set(t,<span class="keyword">new</span> Long(cell.toString()));</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(fs[j].getType() == <span class="keyword">byte</span>.class)&#123;</span><br><span class="line">                            fs[j].set(t,<span class="keyword">new</span> Byte(cell.toString()));</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(fs[j].getType() == <span class="keyword">float</span>.class)&#123;</span><br><span class="line">                            fs[j].set(t,<span class="keyword">new</span> Float(cell.toString()));</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(fs[j].getType() == <span class="keyword">double</span>.class)&#123;</span><br><span class="line">                            fs[j].set(t,<span class="keyword">new</span> Double(cell.toString()));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 将对象t添加到集合中</span></span><br><span class="line">                    sheetList.add(t);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sheetList;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 针对xlsx文件，使用XSSFWorkbook，要求excel版本在2007以上</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> T 泛型类，行对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> colNames 表头信息,</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filepath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">writeExcel</span><span class="params">(List&lt;T&gt; list,Class T,String[] colNames,String filepath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(filepath != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(filepath))&#123;</span><br><span class="line">            <span class="comment">// 工作簿</span></span><br><span class="line">            Workbook workbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">            <span class="comment">// 表格</span></span><br><span class="line">            Sheet sheet = workbook.createSheet(<span class="string">"0"</span>);</span><br><span class="line">            <span class="comment">// 行</span></span><br><span class="line">            Row row = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 单元格</span></span><br><span class="line">            Cell cell = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 设置表头样式</span></span><br><span class="line">            CellStyle headerStyle = workbook.createCellStyle();</span><br><span class="line">            headerStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">            Font headerFont = workbook.createFont();</span><br><span class="line">            headerFont.setBold(<span class="keyword">true</span>);</span><br><span class="line">            headerStyle.setFont(headerFont);</span><br><span class="line">            <span class="comment">// 通过colNames数组生成表头</span></span><br><span class="line">            row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; colNames.length; c++) &#123;</span><br><span class="line">                cell = row.createCell(c);</span><br><span class="line">                cell.setCellValue(colNames[c]);</span><br><span class="line">                cell.setCellStyle(headerStyle);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置单元格样式</span></span><br><span class="line">            CellStyle cellStyle = workbook.createCellStyle();</span><br><span class="line">            cellStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">            <span class="comment">// 通过一个List生成表内数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; list.size(); r++) &#123;</span><br><span class="line">                <span class="comment">// 获取一个List元素（即一个T的实例）</span></span><br><span class="line">                T t = list.get(r);</span><br><span class="line">                <span class="comment">// 获取对象t的所有属性</span></span><br><span class="line">                Field[] fs = t.getClass().getDeclaredFields();</span><br><span class="line">                <span class="comment">// 生成行</span></span><br><span class="line">                row = sheet.createRow(r + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 依此获取对象t的属性值 赋予 单元格</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; fs.length; j++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 设置属性为可访问</span></span><br><span class="line">                        fs[j].setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        <span class="comment">// 生成一个单元格</span></span><br><span class="line">                        cell = row.createCell(j);</span><br><span class="line">                        <span class="comment">// 将属性值赋予单元格</span></span><br><span class="line">                        cell.setCellValue(String.valueOf(fs[j].get(t)));</span><br><span class="line">                        cell.setCellStyle(cellStyle);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置表名</span></span><br><span class="line">            workbook.setSheetName(<span class="number">0</span>, T.getName());</span><br><span class="line">            <span class="comment">// 生成xlsx文件</span></span><br><span class="line">            FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(filepath));</span><br><span class="line">                workbook.write(out);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!--# Java使用POI实现对Excel文件的读写--&gt;
&lt;p&gt;Apache POI提供了Java程序读取和写入MS Office文档的接口。&lt;br&gt;对于Excel文档读写：&lt;br&gt;-HSSF：提供读写MS Excel的xls文件的功能。&lt;br&gt;-XSSF：提供读写MS Excel的xlsx文件的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Java小程序" scheme="https://liziczh.com/categories/Java%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Java小程序" scheme="https://liziczh.com/tags/Java%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Oracle新建数据库</title>
    <link href="https://liziczh.com/oracle-newdb.html"/>
    <id>https://liziczh.com/oracle-newdb.html</id>
    <published>2018-05-20T06:56:29.000Z</published>
    <updated>2018-06-22T15:36:49.005Z</updated>
    
    <content type="html"><![CDATA[<!--# Oracle新建数据库--><p>Oracle新建数据库，即新建一块表空间，将表空间分配给某个用户。</p><a id="more"></a><h4 id="1-创建表空间："><a href="#1-创建表空间：" class="headerlink" title="1.创建表空间："></a><strong>1.创建表空间</strong>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLESPACE &lt;表空间名&gt; </span><br><span class="line">DATAFILE &apos;C:\app\oradata\orcl\date.dbf&apos; </span><br><span class="line">SIZE &lt;空间&gt;[K|M] </span><br><span class="line">[AUTOEXTEND [OFF|ON]];</span><br></pre></td></tr></table></figure><h4 id="2-创建用户："><a href="#2-创建用户：" class="headerlink" title="2.创建用户："></a><strong>2.创建用户</strong>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &lt;用户名&gt; IDENTIFIED BY &lt;密码&gt;  </span><br><span class="line">DEFAULT TABLESPACE &lt;表空间名&gt; </span><br><span class="line">[TEMPORARY TABLESPACE &lt;l临时表空间名&gt;];</span><br></pre></td></tr></table></figure><h4 id="3-将表空间分配给用户："><a href="#3-将表空间分配给用户：" class="headerlink" title="3.将表空间分配给用户："></a><strong>3.将表空间分配给用户</strong>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &lt;用户名&gt; DEFAULT TABLESPACE &lt;表空间名&gt;;</span><br></pre></td></tr></table></figure><h4 id="4-给用户授权："><a href="#4-给用户授权：" class="headerlink" title="4.给用户授权："></a><strong>4.给用户授权</strong>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT create session,create table,unlimited tablespace </span><br><span class="line">TO &lt;用户名&gt;;</span><br></pre></td></tr></table></figure><h4 id="5-用户登陆："><a href="#5-用户登陆：" class="headerlink" title="5.用户登陆："></a><strong>5.用户登陆</strong>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn &lt;用户名&gt;/&lt;密码&gt;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!--# Oracle新建数据库--&gt;
&lt;p&gt;Oracle新建数据库，即新建一块表空间，将表空间分配给某个用户。&lt;/p&gt;
    
    </summary>
    
      <category term="DataBase" scheme="https://liziczh.com/categories/DataBase/"/>
    
    
      <category term="Oracle" scheme="https://liziczh.com/tags/Oracle/"/>
    
      <category term="Database" scheme="https://liziczh.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Java | Tetris</title>
    <link href="https://liziczh.com/java-tetris.html"/>
    <id>https://liziczh.com/java-tetris.html</id>
    <published>2018-05-19T15:01:34.000Z</published>
    <updated>2018-07-23T01:33:42.209Z</updated>
    
    <content type="html"><![CDATA[<!--# Tetris--><p>基于 Java-Swing 实现俄罗斯方块<br>GitHub：<a href="https://github.com/liziczh/Tetris" target="_blank" rel="noopener">https://github.com/liziczh/Tetris</a></p><a id="more"></a><h2 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h2><p><strong>普通模式</strong>：</p><p><img src="http://p6uturdzt.bkt.clouddn.com/tetris-NormalMode.PNG" alt="Tetris"></p><p><strong>加速模式</strong>：</p><p><img src="http://p6uturdzt.bkt.clouddn.com/tetris-AccelMode.PNG" alt="Accel"></p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><h3 id="方块的属性"><a href="#方块的属性" class="headerlink" title="方块的属性"></a>方块的属性</h3><ul><li>方块表示：<ul><li>由四维数组 <code>SHAPE[][][][]</code> 表示7种方块及每种方块的4种翻转状态。</li><li>由<code>SHAPE[type][state]</code>可以唯一标识一个方块。</li></ul></li><li>方块属性：<ul><li><code>type</code>：方块类型</li><li><code>state</code>：方块翻转状态</li><li><code>(x, y)</code>：方块坐标</li><li><code>nextType</code>：下一方块类型</li><li><code>nextState</code>：下一方块翻转状态</li></ul></li><li>背景块：由<code>map[ROW][COl]</code>表示已固定的背景块。</li></ul><h3 id="方块的行为"><a href="#方块的行为" class="headerlink" title="方块的行为"></a>方块的行为</h3><p><strong>方块翻转</strong>：通过改变方块的state属性实现翻转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> temp = state;</span><br><span class="line">  state = (state + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">  <span class="comment">// 如果旋转后不合法，还原上一状态</span></span><br><span class="line">  <span class="keyword">if</span> (!check(type, state, x, y)) &#123;</span><br><span class="line">  state = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方块下落</strong>：通过改变方块纵坐标实现下落</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果下一个下落状态合法，则下落；不合法，则固定，清行，新建块。</span></span><br><span class="line">  <span class="keyword">if</span> (check(type, state, x, y + <span class="number">1</span>)) &#123;</span><br><span class="line">  y++;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  fix(type, state, x, y);</span><br><span class="line">  clearLines();</span><br><span class="line">  createShape();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.repaint();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方块左移</strong>：通过改变方块横坐标实现左移</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">left</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (check(type, state, x - <span class="number">1</span>, y)) &#123;</span><br><span class="line">  x--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方块右移</strong>：通过改变方块横坐标实现右移</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">right</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (check(type, state, x + <span class="number">1</span>, y)) &#123;</span><br><span class="line">  x++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="核心方法实现"><a href="#核心方法实现" class="headerlink" title="核心方法实现"></a>核心方法实现</h3><p><strong>方块碰撞检测</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">int</span> state, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SHAPE[type][state].length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; SHAPE[type][state][<span class="number">0</span>].length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (SHAPE[type][state][i][j] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 在坐标系中小方块坐标(x+j,y+i);在背景矩阵中小方块位置map[y+i][x+j];</span></span><br><span class="line"><span class="keyword">if</span> ((x + j &gt;= COL) || (x + j &lt; <span class="number">0</span>) || (y + i &gt;= ROW) || (map[y + i][x + j] == <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>固定当前方块到背景中</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fix</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">int</span> state, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SHAPE[type][state].length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; SHAPE[type][state][<span class="number">0</span>].length; j++) &#123;</span><br><span class="line"><span class="comment">// 在坐标系中小方块坐标(x+j,y+i);在背景矩阵中小方块位置map[y+i][x+j];</span></span><br><span class="line"><span class="keyword">if</span> ((y + i &lt; ROW) &amp;&amp; (x + j &gt;= <span class="number">0</span>) &amp;&amp; (x + j &lt; COL) &amp;&amp; (map[y + i][x + j] == <span class="number">0</span>)) &#123;</span><br><span class="line">map[y + i][x + j] = SHAPE[type][state][i][j];</span><br><span class="line">mapColor[y + i][x + j] = color[type];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>清行加分</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearLines</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> lines = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">boolean</span> isFull = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.length; i++) &#123;</span><br><span class="line">isFull = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; map[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (map[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">isFull = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isFull) &#123;</span><br><span class="line">lines++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = i; m &gt; <span class="number">0</span>; m--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; map[<span class="number">0</span>].length; n++) &#123;</span><br><span class="line">map[m][n] = map[m - <span class="number">1</span>][n];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">score += lines * lines * <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (isAccelMode) &#123;</span><br><span class="line">up();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h3><p>绘制图形：重写paint()方法，使用Graphics类随意绘制。</p><p>Graphics类绘制方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setColor(Color color);  <span class="comment">// 设置画笔颜色</span></span><br><span class="line">drawRect(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> width,<span class="keyword">int</span> height);  <span class="comment">// 绘制矩形边框</span></span><br><span class="line">fillRect(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> width,<span class="keyword">int</span> height);  <span class="comment">// 填充矩形</span></span><br><span class="line">fill3DRect(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> width,<span class="keyword">int</span> height, <span class="keyword">boolean</span> raised); <span class="comment">// 填充3D矩形。</span></span><br><span class="line">drawLine(x1,y1,x2,y2);  <span class="comment">// 绘制线条</span></span><br><span class="line">setFont(Font font); <span class="comment">// 设置字体</span></span><br><span class="line">drawString(String text, <span class="keyword">int</span> x, <span class="keyword">int</span> y);  <span class="comment">// 绘制字符串</span></span><br></pre></td></tr></table></figure><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a><strong>文件目录</strong></h2><p>com.lizich.tetris下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">|——TetrisMain</span>  <span class="comment"># 游戏窗口，由此运行</span></span><br><span class="line"><span class="string">|——TetrisCtrl</span>  <span class="comment"># 绘制游戏面板&amp;游戏逻辑</span></span><br></pre></td></tr></table></figure><p>com.lizi.tetris.singleclass下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">|——Tetris</span> <span class="comment"># 合并了TetrisMain与TetrisCtrl</span></span><br></pre></td></tr></table></figure><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><strong>TetrisMain</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liziczh.tetris;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JMenu;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JMenuBar;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JMenuItem;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JOptionPane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TetrisMain</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 版本号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="comment">// 游戏面板</span></span><br><span class="line"><span class="keyword">private</span> TetrisCtrl tCtrl = <span class="keyword">new</span> TetrisCtrl();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 游戏窗口初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TetrisMain</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 设置标题</span></span><br><span class="line"><span class="keyword">this</span>.setTitle(<span class="string">"Lizi Tetris"</span>);</span><br><span class="line"><span class="comment">// 设置大小</span></span><br><span class="line"><span class="keyword">this</span>.setSize(tCtrl.getSize());</span><br><span class="line"><span class="comment">// 调用方法居中</span></span><br><span class="line"><span class="keyword">this</span>.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// 设置关闭操作：关闭窗口，程序结束运行；</span></span><br><span class="line"><span class="keyword">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"><span class="comment">// 设置窗体大小不改变</span></span><br><span class="line"><span class="keyword">this</span>.setResizable(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 添加键盘监听事件</span></span><br><span class="line"><span class="keyword">this</span>.addKeyListener(keyListener);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 菜单栏</span></span><br><span class="line">JMenuBar menu = <span class="keyword">new</span> JMenuBar();</span><br><span class="line"><span class="keyword">this</span>.setJMenuBar(menu);</span><br><span class="line">JMenu gameMenu = <span class="keyword">new</span> JMenu(<span class="string">"游戏"</span>);</span><br><span class="line">JMenuItem newGameItem = gameMenu.add(<span class="string">"新游戏"</span>);</span><br><span class="line">newGameItem.addActionListener(newGameAction);</span><br><span class="line">JMenuItem pauseItem = gameMenu.add(<span class="string">"暂停"</span>);</span><br><span class="line">pauseItem.addActionListener(pauseAction);</span><br><span class="line">JMenuItem continueItem = gameMenu.add(<span class="string">"继续"</span>);</span><br><span class="line">continueItem.addActionListener(continueAction);</span><br><span class="line">JMenuItem exitItem = gameMenu.add(<span class="string">"退出"</span>);</span><br><span class="line">exitItem.addActionListener(exitAction);</span><br><span class="line">JMenu modeMenu = <span class="keyword">new</span> JMenu(<span class="string">"模式"</span>);</span><br><span class="line">JMenuItem normalModeItem = modeMenu.add(<span class="string">"普通模式"</span>);</span><br><span class="line">normalModeItem.addActionListener(normalModeAction);</span><br><span class="line">JMenuItem accelModeItem = modeMenu.add(<span class="string">"加速模式"</span>);</span><br><span class="line">accelModeItem.addActionListener(accelModeAction);</span><br><span class="line">JMenu helpMenu = <span class="keyword">new</span> JMenu(<span class="string">"帮助"</span>);</span><br><span class="line">JMenuItem aboutItem = helpMenu.add(<span class="string">"关于"</span>);</span><br><span class="line">aboutItem.addActionListener(aboutAction);</span><br><span class="line">menu.add(gameMenu);</span><br><span class="line">menu.add(modeMenu);</span><br><span class="line">menu.add(helpMenu);</span><br><span class="line"><span class="comment">// 设置窗口可见</span></span><br><span class="line"><span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 添加TetrisPanel</span></span><br><span class="line"><span class="keyword">this</span>.add(tCtrl);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 键盘事件监听</span></span><br><span class="line">KeyListener keyListener = <span class="keyword">new</span> KeyAdapter() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (e.getKeyCode()) &#123;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_UP:</span><br><span class="line"><span class="comment">// ↑：旋转</span></span><br><span class="line">tCtrl.turn();</span><br><span class="line">tCtrl.repaint();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_LEFT:</span><br><span class="line"><span class="comment">// ←：左移</span></span><br><span class="line">tCtrl.left();</span><br><span class="line">tCtrl.repaint();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_RIGHT:</span><br><span class="line"><span class="comment">// →：右移</span></span><br><span class="line">tCtrl.right();</span><br><span class="line">tCtrl.repaint();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_DOWN:</span><br><span class="line"><span class="comment">// ↓：下移</span></span><br><span class="line">tCtrl.down();</span><br><span class="line">tCtrl.repaint();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新游戏</span></span><br><span class="line">ActionListener newGameAction = <span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent arg0)</span> </span>&#123;</span><br><span class="line">tCtrl.init();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 暂停</span></span><br><span class="line">ActionListener pauseAction = <span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent arg0)</span> </span>&#123;</span><br><span class="line">tCtrl.setPause();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 继续</span></span><br><span class="line">ActionListener continueAction = <span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">tCtrl.setContinue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出</span></span><br><span class="line">ActionListener exitAction = <span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通模式</span></span><br><span class="line">ActionListener normalModeAction = <span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">tCtrl.setNormal();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加速模式</span></span><br><span class="line">ActionListener accelModeAction = <span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">tCtrl.setAccel();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关于</span></span><br><span class="line">ActionListener aboutAction = <span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">JOptionPane.showMessageDialog(tCtrl, <span class="string">"Tetris v1.0 from liziczh"</span>, <span class="string">"关于"</span>, getDefaultCloseOperation());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> TetrisMain();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>TetrisCtrl</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liziczh.tetris;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.JOptionPane;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.Timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TetrisCtrl</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 版本号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方块边长，单位像素(px)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> LEN = <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Panel区域：20行10列</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> ROW = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> COL = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SHAPE[type][state]：方块形状； type方块类型， state方块旋转状态；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[][][][] SHAPE = <span class="keyword">new</span> <span class="keyword">int</span>[][][][] &#123;</span><br><span class="line"><span class="comment">// S:</span></span><br><span class="line">&#123; &#123; &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125; &#125;,</span><br><span class="line"><span class="comment">// Z:</span></span><br><span class="line">&#123; &#123; &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125; &#125;,</span><br><span class="line"><span class="comment">// L:</span></span><br><span class="line">&#123; &#123; &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125; &#125;,</span><br><span class="line"><span class="comment">// J:</span></span><br><span class="line">&#123; &#123; &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125; &#125;,</span><br><span class="line"><span class="comment">// I:</span></span><br><span class="line">&#123; &#123; &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125; &#125;,</span><br><span class="line"><span class="comment">// O:</span></span><br><span class="line">&#123; &#123; &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125; &#125;,</span><br><span class="line"><span class="comment">// T:</span></span><br><span class="line">&#123; &#123; &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125;,</span><br><span class="line">&#123; &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125; &#125; &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前方块的四个参数：type方块类型，state方块旋转状态，坐标(x,y)。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> type, state, x, y;</span><br><span class="line"><span class="comment">// 下一个块的参数：nextType方块类型，nextState方块旋转状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> nextType, nextState;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 背景：已固定块</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[][] map = <span class="keyword">new</span> <span class="keyword">int</span>[ROW][COL];</span><br><span class="line"><span class="comment">// 已固定块的颜色</span></span><br><span class="line"><span class="keyword">private</span> Color[][] mapColor = <span class="keyword">new</span> Color[ROW][COL];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得分</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 等级</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 下落延时</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> delay = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否在暂停状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isPause = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为加速模式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isAccelMode = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方块颜色：color[type]</span></span><br><span class="line"><span class="keyword">private</span> Color[] color = <span class="keyword">new</span> Color[] &#123; Color.green, Color.red, Color.orange, Color.blue, Color.cyan, Color.yellow,</span><br><span class="line">Color.magenta, Color.gray &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TetrisCtrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 初始化Panel大小</span></span><br><span class="line"><span class="keyword">this</span>.setSize(LEN * <span class="number">20</span>, LEN * <span class="number">25</span>);</span><br><span class="line"><span class="keyword">this</span>.init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 游戏初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 初始化背景map</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; map[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">map[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化分数</span></span><br><span class="line">score = <span class="number">0</span>;</span><br><span class="line">isPause = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">// 随机生成下一方块</span></span><br><span class="line">nextType = (<span class="keyword">int</span>) (Math.random() * <span class="number">7</span>);</span><br><span class="line">nextState = (<span class="keyword">int</span>) (Math.random() * <span class="number">4</span>);</span><br><span class="line"><span class="comment">// 生成当前方块</span></span><br><span class="line">createShape();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动timer</span></span><br><span class="line">timer.start();</span><br><span class="line"><span class="comment">// 绘图</span></span><br><span class="line"><span class="keyword">this</span>.repaint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个新方块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 当前块</span></span><br><span class="line">type = nextType;</span><br><span class="line">state = nextState;</span><br><span class="line">x = <span class="number">3</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 下一块</span></span><br><span class="line">nextType = (<span class="keyword">int</span>) (Math.random() * <span class="number">7</span>);</span><br><span class="line">nextState = (<span class="keyword">int</span>) (Math.random() * <span class="number">4</span>);</span><br><span class="line"><span class="comment">// 如果新块不合法，则表示游戏已结束，则重新开始</span></span><br><span class="line"><span class="keyword">if</span> (!check(type, state, x, y)) &#123;</span><br><span class="line">JOptionPane.showMessageDialog(<span class="keyword">this</span>, <span class="string">"GAME OVER!"</span>);</span><br><span class="line">init();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断方块是否合法：true合法，false不合法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">int</span> state, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SHAPE[type][state].length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; SHAPE[type][state][<span class="number">0</span>].length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (SHAPE[type][state][i][j] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 在坐标系中小方块坐标(x+j,y+i);在背景矩阵中小方块位置map[y+i][x+j];</span></span><br><span class="line"><span class="keyword">if</span> ((x + j &gt;= COL) || (x + j &lt; <span class="number">0</span>) || (y + i &gt;= ROW) || (map[y + i][x + j] == <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 固定shape到map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fix</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">int</span> state, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SHAPE[type][state].length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; SHAPE[type][state][<span class="number">0</span>].length; j++) &#123;</span><br><span class="line"><span class="comment">// 在坐标系中小方块坐标(x+j,y+i);在背景矩阵中小方块位置map[y+i][x+j];</span></span><br><span class="line"><span class="keyword">if</span> ((y + i &lt; ROW) &amp;&amp; (x + j &gt;= <span class="number">0</span>) &amp;&amp; (x + j &lt; COL) &amp;&amp; (map[y + i][x + j] == <span class="number">0</span>)) &#123;</span><br><span class="line">map[y + i][x + j] = SHAPE[type][state][i][j];</span><br><span class="line">mapColor[y + i][x + j] = color[type];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消行加分</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearLines</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> lines = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">boolean</span> isFull = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.length; i++) &#123;</span><br><span class="line">isFull = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; map[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (map[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">isFull = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isFull) &#123;</span><br><span class="line">lines++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = i; m &gt; <span class="number">0</span>; m--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; map[<span class="number">0</span>].length; n++) &#123;</span><br><span class="line">map[m][n] = map[m - <span class="number">1</span>][n];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">score += lines * lines * <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (isAccelMode) &#123;</span><br><span class="line">up();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 升级加速：UP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> limit = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt; limit * level) &#123;</span><br><span class="line">level++;</span><br><span class="line">delay /= <span class="number">1.5</span>;</span><br><span class="line">timer.setDelay(delay);</span><br><span class="line">limit = limit * level;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turn</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = state;</span><br><span class="line">state = (state + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line"><span class="comment">// 如果旋转后不合法，还原上一状态</span></span><br><span class="line"><span class="keyword">if</span> (!check(type, state, x, y)) &#123;</span><br><span class="line">state = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 如果下一个下落状态合法，则下落；不合法，则固定。</span></span><br><span class="line"><span class="keyword">if</span> (check(type, state, x, y + <span class="number">1</span>)) &#123;</span><br><span class="line">y++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fix(type, state, x, y);</span><br><span class="line">clearLines();</span><br><span class="line">createShape();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.repaint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">right</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (check(type, state, x + <span class="number">1</span>, y)) &#123;</span><br><span class="line">x++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">left</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (check(type, state, x - <span class="number">1</span>, y)) &#123;</span><br><span class="line">x--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘图：重写paint()方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> javax.swing.JComponent#paint(java.awt.Graphics)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 游戏区域的左、上边距</span></span><br><span class="line"><span class="keyword">int</span> MARGIN_LEFT = LEN;</span><br><span class="line"><span class="keyword">int</span> MARGIN_TOP = LEN + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 边栏的起始坐标</span></span><br><span class="line"><span class="keyword">int</span> SIDEBAR_X = LEN * <span class="number">13</span>;<span class="comment">// 文本的横坐标</span></span><br><span class="line"><span class="keyword">int</span> SIDEBAR_Y = LEN * <span class="number">9</span>; <span class="comment">// 文本的纵坐标</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 填充背景色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">g.setColor(Color.white);</span><br><span class="line">g.fillRect(<span class="number">0</span>, <span class="number">0</span>, (<span class="keyword">int</span>) (<span class="keyword">this</span>.getSize().getWidth()), (<span class="keyword">int</span>) (<span class="keyword">this</span>.getSize().getHeight()));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 画边框</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">g.setColor(Color.gray);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> offset = <span class="number">1</span>; offset &lt; <span class="number">2</span>; offset++) &#123;</span><br><span class="line"><span class="comment">// 绘制矩形边框：drawRect(int x,int y,int width,int height);</span></span><br><span class="line">g.drawRect(MARGIN_LEFT - offset, MARGIN_TOP - offset, COL * LEN + offset * <span class="number">2</span>, ROW * LEN + offset * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 画网状线</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">g.setColor(Color.gray);</span><br><span class="line"><span class="comment">// 11条竖线</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 绘制线条：drawLine(x1,y1,x2,y2);</span></span><br><span class="line">g.drawLine(MARGIN_LEFT + LEN * i, MARGIN_TOP, MARGIN_LEFT + LEN * i, MARGIN_TOP + ROW * LEN);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 21条横线</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">21</span>; i++) &#123;</span><br><span class="line">g.drawLine(MARGIN_LEFT, MARGIN_TOP + LEN * i, MARGIN_LEFT + COL * LEN, MARGIN_TOP + LEN * i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 画侧栏</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 画文本：下一个</span></span><br><span class="line">g.setColor(Color.gray);</span><br><span class="line">g.setFont(<span class="keyword">new</span> Font(<span class="string">"Times"</span>, Font.BOLD, <span class="number">20</span>));</span><br><span class="line">g.drawString(<span class="string">"下一个："</span>, SIDEBAR_X, LEN * <span class="number">2</span> + <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 画提示方块（下一个方块）</span></span><br><span class="line">g.setColor(color[nextType]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (SHAPE[nextType][nextState][i][j] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 填充3D矩形：fill3DRect(int x,int y,int width,int height,boolean raised)</span></span><br><span class="line">g.fill3DRect(SIDEBAR_X + <span class="number">20</span> + j * LEN, LEN * <span class="number">3</span> + i * LEN, LEN, LEN, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 画文本：得分</span></span><br><span class="line">g.setColor(Color.gray);</span><br><span class="line">g.setFont(<span class="keyword">new</span> Font(<span class="string">"Times"</span>, Font.BOLD, <span class="number">24</span>));</span><br><span class="line">g.drawString(<span class="string">"等级："</span> + level, SIDEBAR_X, SIDEBAR_Y);</span><br><span class="line">g.drawString(<span class="string">"得分："</span> + score, SIDEBAR_X, SIDEBAR_Y + <span class="number">40</span>);</span><br><span class="line"><span class="comment">// 画文本：游戏说明</span></span><br><span class="line">g.setColor(Color.gray);</span><br><span class="line">g.setFont(<span class="keyword">new</span> Font(<span class="string">"Times"</span>, Font.BOLD, <span class="number">15</span>));</span><br><span class="line">g.drawString(<span class="string">"玩法："</span>, SIDEBAR_X, SIDEBAR_Y + LEN * <span class="number">4</span>);</span><br><span class="line">g.drawString(<span class="string">"上箭头：旋转"</span>, SIDEBAR_X, SIDEBAR_Y + LEN * <span class="number">5</span>);</span><br><span class="line">g.drawString(<span class="string">"左箭头：左移"</span>, SIDEBAR_X, SIDEBAR_Y + LEN * <span class="number">6</span>);</span><br><span class="line">g.drawString(<span class="string">"右箭头：右移"</span>, SIDEBAR_X, SIDEBAR_Y + LEN * <span class="number">7</span>);</span><br><span class="line">g.drawString(<span class="string">"下箭头：下落"</span>, SIDEBAR_X, SIDEBAR_Y + LEN * <span class="number">8</span>);</span><br><span class="line">g.drawString(<span class="string">"@栗子"</span>, SIDEBAR_X, SIDEBAR_Y + LEN * <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画当前下落块</span></span><br><span class="line">g.setColor(color[type]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (SHAPE[type][state][i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">g.fill3DRect(MARGIN_LEFT + (x + j) * LEN, MARGIN_TOP + (y + i) * LEN, LEN, LEN, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画背景map</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; map[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (map[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">g.setColor(mapColor[i][j]);</span><br><span class="line">g.fill3DRect(MARGIN_LEFT + j * LEN, MARGIN_TOP + i * LEN, LEN, LEN, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画暂停</span></span><br><span class="line"><span class="keyword">if</span> (isPause) &#123;</span><br><span class="line">g.setColor(Color.black);</span><br><span class="line">g.drawString(<span class="string">"PAUSE"</span>, MARGIN_LEFT + LEN * <span class="number">8</span>, LEN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画普通模式</span></span><br><span class="line"><span class="keyword">if</span> (!isAccelMode) &#123;</span><br><span class="line">g.setColor(Color.black);</span><br><span class="line">g.drawString(<span class="string">"Normal Mode"</span>, LEN, LEN);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 画加速模式</span></span><br><span class="line"><span class="keyword">if</span> (isAccelMode) &#123;</span><br><span class="line">g.setColor(Color.black);</span><br><span class="line">g.drawString(<span class="string">"Accel Mode"</span>, LEN, LEN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Timer timer = <span class="keyword">new</span> Timer(delay, <span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"><span class="comment">// 定时器任务</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">down();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暂停</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">timer.stop();</span><br><span class="line">isPause = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">this</span>.repaint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继续</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContinue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">timer.restart();</span><br><span class="line">isPause = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">this</span>.repaint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单模式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">isAccelMode = <span class="keyword">false</span>;</span><br><span class="line">level = <span class="number">0</span>;</span><br><span class="line">timer.setDelay(<span class="number">1000</span>);</span><br><span class="line">init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加速模式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">isAccelMode = <span class="keyword">true</span>;</span><br><span class="line">level = <span class="number">1</span>;</span><br><span class="line">timer.setDelay(<span class="number">500</span>);</span><br><span class="line">init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>emmmmmm……不好意思，寒假作业，快到暑假了才完成。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--# Tetris--&gt;
&lt;p&gt;基于 Java-Swing 实现俄罗斯方块&lt;br&gt;GitHub：&lt;a href=&quot;https://github.com/liziczh/Tetris&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/liziczh/Tetris&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java小程序" scheme="https://liziczh.com/categories/Java%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Java小程序" scheme="https://liziczh.com/tags/Java%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>JDBC</title>
    <link href="https://liziczh.com/jdbc.html"/>
    <id>https://liziczh.com/jdbc.html</id>
    <published>2018-05-18T15:33:29.000Z</published>
    <updated>2018-07-23T01:49:12.813Z</updated>
    
    <content type="html"><![CDATA[<!--# JDBC--><p>JDBC（Java Database Connectivity ，Java数据库连接），一种用于执行SQL语句的Java API，为访问不同的关系型数据库提供了统一规范。</p><a id="more"></a><h2 id="JDBC-简介"><a href="#JDBC-简介" class="headerlink" title="JDBC 简介"></a>JDBC 简介</h2><p>JDBC 提供了两种规范：</p><ul><li>JDBC API：提供了应用程序与 JDBC 管理器的连接，供<strong>开发人员</strong>连接数据库、执行SQL语句、获得结果。</li><li>JDBC Driver API：提供了 JDBC 管理器与驱动程序的连接，供<strong>数据库厂商</strong>开发数据库驱动程序使用。</li></ul><p>数据库厂商通过 JDBC Driver API 开发相应的数据库驱动程序，开发人员只需导入数据库驱动程序，即可使用 JDBC API 编写代码操纵该数据库。</p><h2 id="JDBC-API-组件"><a href="#JDBC-API-组件" class="headerlink" title="JDBC API 组件"></a>JDBC API 组件</h2><ul><li><strong>DriverManager</strong>：此接口用于管理一系列数据库驱动程序。匹配连接使用通信子协议从Java应用程序请求相应的数据库驱动程序。识别JDBC在某个子协议的第一个驱动程序将被用来建立数据库连接。 </li><li>Driver：此接口用于处理与数据库服务器的通信。很少直接直接使用驱动程序（Driver）对象，一般使用<code>DriverManager</code>中的对象。</li><li><strong>Connection</strong>：此接口拥有接触数据库的所有方法。连接对象表示通信上下文，即与数据库中的所有的通信是通过此唯一的连接对象。 </li><li><strong>Statement</strong>：创建该接口对象将SQL语句提交到数据库。</li><li><strong>ResultSet</strong>：保存使用<code>Statement</code>对象执行SQL查询的结果集，可迭代结果集。</li><li><strong>SQLException</strong>：用于处理发生在数据库应用程序中的错误。</li></ul><h2 id="JDBC-连接数据库"><a href="#JDBC-连接数据库" class="headerlink" title="JDBC 连接数据库"></a>JDBC 连接数据库</h2><p><strong>前提</strong>：安装由数据库厂商提供的数据库驱动程序 (导入数据库驱动jar包)。</p><p><strong>JDBC 连接数据库步骤</strong>：</p><ol><li>加载和注册驱动</li><li>获取数据库连接</li><li>执行sql语句</li><li>处理结果集</li><li>释放资源</li></ol><p><strong>JDBC 简单示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 声明变量</span></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">Statement stat = <span class="keyword">null</span>;</span><br><span class="line">ResultSet res = <span class="keyword">null</span>;</span><br><span class="line">List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.加载和注册驱动</span></span><br><span class="line">String driverClassName = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">Class.forName(driverClassName);</span><br><span class="line"><span class="comment">// 2.获取数据库连接</span></span><br><span class="line">String url = <span class="string">"jdbc:mysql:///lizi"</span>;</span><br><span class="line">String ur = <span class="string">"root"</span>;</span><br><span class="line">String pwd = <span class="string">"root"</span>;</span><br><span class="line">conn = DriverManager.getConnection(url, ur, pwd);</span><br><span class="line"><span class="comment">// 3.执行sql查询语句</span></span><br><span class="line">stat = conn.createStatement();</span><br><span class="line">String sql = <span class="string">" select * from user "</span>;</span><br><span class="line">res = stat.executeQuery(sql);</span><br><span class="line"><span class="comment">// 4.迭代处理结果集</span></span><br><span class="line"><span class="keyword">while</span>(res.next()) &#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(res.getInt(<span class="string">"id"</span>));</span><br><span class="line">user.setUsername(res.getString(<span class="string">"username"</span>));</span><br><span class="line">user.setPassword(res.getString(<span class="string">"password"</span>));</span><br><span class="line">userList.add(user);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 5.关闭连接，释放资源</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 释放结果集</span></span><br><span class="line">res.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 释放statement对象</span></span><br><span class="line">stat.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 关闭数据库连接</span></span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-加载和注册驱动"><a href="#1-加载和注册驱动" class="headerlink" title="1.加载和注册驱动"></a>1.加载和注册驱动</h3><p><strong>使用 <code>DriverManager.registerDriver()</code> 加载和注册驱动</strong>：</p><p>Oracle：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册Oracle驱动</span></span><br><span class="line">Driver oracleDriver = <span class="keyword">new</span> oracle.jdbc.driver.OracleDriver();</span><br><span class="line">DriverManager.registerDriver(oracleDriver);</span><br></pre></td></tr></table></figure><p>MySql：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册MySql驱动</span></span><br><span class="line">Driver mysqlDriver = <span class="keyword">new</span> com.mysql.jdbc.Driver();</span><br><span class="line">DriverManager.registerDriver(mysqlDriver);</span><br></pre></td></tr></table></figure><p><strong>使用 <code>Class.forName()</code> 加载和注册驱动</strong>：</p><p>Oracle：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载和注册Oracle驱动</span></span><br><span class="line">String driverClassName = <span class="string">"oracle.jdbc.driver.OracleDriver"</span>;</span><br><span class="line">Class.forName(driverClassName);</span><br></pre></td></tr></table></figure><p>MySql：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载和注册MySql驱动</span></span><br><span class="line">String driverClassName = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">Class.forName(driverClassName);</span><br></pre></td></tr></table></figure><blockquote><p>推荐使用 <code>Class.forName()</code> 加载驱动。</p></blockquote><h3 id="2-获取数据库连接"><a href="#2-获取数据库连接" class="headerlink" title="2.获取数据库连接"></a>2.获取数据库连接</h3><p><strong>（1）使用 <code>*.properties</code> 文件配置数据库属性</strong></p><p>Oracle：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driverClassName=oracle.jdbc.driver.OracleDriver</span><br><span class="line">url=jdbc:oracle:thin:@192.168.124.15:1521:orcl</span><br><span class="line">username=scott</span><br><span class="line">password=tiger</span><br></pre></td></tr></table></figure><p>MySql：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/lizi?useUnicode=true&amp;characterEncode=utf8&amp;useSSL=false</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br></pre></td></tr></table></figure><p><strong>（2）读取 properties 文件，获取属性值</strong></p><p><code>Propertoes</code> 对象获取属性的方法：</p><ul><li><code>load()</code>：加载文件流。</li><li><code>getProperties(String name)</code>：根据属性名获取属性值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用properties文件流获取属性值</span></span><br><span class="line">InputStream in = JDBCUtils.class.getClassLoader().getResourceAsStream(String filepath);</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">// 加载文件流</span></span><br><span class="line">properties.load(in);</span><br><span class="line"><span class="comment">// 获取properties文件属性值</span></span><br><span class="line">String url = properties.getProperties(<span class="string">"url"</span>);</span><br><span class="line">String username = properties.getProperties(<span class="string">"username"</span>);</span><br><span class="line">String password = properties.getProperties(<span class="string">"password"</span>);</span><br></pre></td></tr></table></figure><p><strong>（3）获取数据库连接</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure><h3 id="3-执行SQL语句"><a href="#3-执行SQL语句" class="headerlink" title="3.执行SQL语句"></a>3.执行SQL语句</h3><h4 id="Statement-执行SQL语句"><a href="#Statement-执行SQL语句" class="headerlink" title="Statement 执行SQL语句"></a>Statement 执行SQL语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Statement对象执行SQL语句</span></span><br><span class="line">Statement stat = conn.createStatement();</span><br><span class="line">String sql = <span class="string">" select * from \"user\" "</span>;</span><br><span class="line"><span class="comment">// 获取SQL查询结果集</span></span><br><span class="line">ResultSet res = stat.executeQuery(sql);</span><br></pre></td></tr></table></figure><p><code>Statement</code> 对象的执行SQL语句方法：</p><ul><li><code>boolean execute (String sql)</code>：如果存在结果集，返回 <code>true</code> ；否则返回 <code>false</code> 。</li><li><code>int executeUpdate (String sql)</code>：执行SQL更新语句，返回受影响的行数。</li><li><code>ResultSet executeQuery(String sql)</code>： 执行SQL查询语句，返回查询结果集。</li></ul><h4 id="PreparedStatement-预编译"><a href="#PreparedStatement-预编译" class="headerlink" title="PreparedStatement 预编译"></a>PreparedStatement 预编译</h4><p>为了防止SQL注入，采用 PreparedStatement 预编译SQL语句，使用 <code>?</code> 作为参数占位符，使用<code>setXXX(int parameterIndex, XXX x)</code> 动态填充参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预编译</span></span><br><span class="line">String sql = <span class="string">"select * from user where username = ? and password = ? "</span>;</span><br><span class="line">PreparedStatement pstat = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">// 根据'?'索引填充参数值</span></span><br><span class="line">pstat.setString(<span class="number">1</span>, <span class="string">"admin"</span>);</span><br><span class="line">pstat.setString(<span class="number">2</span>, <span class="string">"123456"</span>);</span><br><span class="line"><span class="comment">// 获取SQL查询结果集</span></span><br><span class="line">ResultSet res = pstat.executeQuery(sql);</span><br></pre></td></tr></table></figure><ul><li>setXXX(int paraIndex, XXX x)：根据 <code>?</code> 参数索引 (1,2,3…) 填充XXX类型的数据。</li></ul><h3 id="4-ResultSet-结果集"><a href="#4-ResultSet-结果集" class="headerlink" title="4.ResultSet 结果集"></a>4.ResultSet 结果集</h3><p><code>ResultSet</code>：表示数据库结果集的数据表，通常通过执行<strong>SQL查询</strong>语句生成。</p><ul><li><code>boolean next()</code>：将光标移至下一行。如果没有更多行，返回 <code>false</code> 。</li><li><code>XXX getXXX(String columnName)</code>：返回columnName列中当前行的XXX类型值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代保存结果集</span></span><br><span class="line"><span class="keyword">while</span>(res.next()) &#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(res.getInt(<span class="string">"id"</span>));</span><br><span class="line">user.setUsername(res.getString(<span class="string">"username"</span>));</span><br><span class="line">user.setPassword(res.getString(<span class="string">"password"</span>));</span><br><span class="line">userList.add(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-释放资源"><a href="#5-释放资源" class="headerlink" title="5.释放资源"></a>5.释放资源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 释放结果集</span></span><br><span class="line">res.close();</span><br><span class="line"><span class="comment">// 释放statement对象</span></span><br><span class="line">stat.close();</span><br><span class="line"><span class="comment">// 关闭数据库连接</span></span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><h2 id="JDBC-事务处理"><a href="#JDBC-事务处理" class="headerlink" title="JDBC 事务处理"></a>JDBC 事务处理</h2><p><code>Connection</code> 对象的事务处理方法：</p><ul><li><code>setAutoCommit(false)</code>：关闭自动提交</li><li><code>commit()</code>：提交事务</li><li><code>rollback()</code>：回滚事务</li><li><code>setSavepoint(String savepointName)</code>：设置保存点</li><li><code>releaseSavepoint(Savepoint savepointName)</code>：删除保存点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// 关闭自动提交事务</span></span><br><span class="line">    conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">/* SQL操作 */</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// If there is no error.</span></span><br><span class="line">    conn.commit();</span><br><span class="line">&#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line"><span class="comment">// If there is any error.</span></span><br><span class="line">conn.rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDBC-批量处理"><a href="#JDBC-批量处理" class="headerlink" title="JDBC 批量处理"></a>JDBC 批量处理</h2><p><code>Statement</code> 对象的批处理方法：</p><ul><li><code>void addBatch()</code>：添加SQL语句到批处理中。</li><li><code>int[] executeBatch()</code>： 执行所有SQL语句。返回一个整数数组，数组的每个元素表示相应更新语句的更新计数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建Statement对象</span></span><br><span class="line">Statement stat = conn.createStatement();</span><br><span class="line"><span class="comment">// 2.关闭自动提交</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 3.添加SQL语句到批处理中</span></span><br><span class="line">String sql = <span class="string">"INSERT INTO Employees (id, first, last, age) "</span> +</span><br><span class="line">             <span class="string">"VALUES(200,'Ruby', 'Yang', 30)"</span>;</span><br><span class="line">stat.addBatch(sql);</span><br><span class="line">......</span><br><span class="line"><span class="comment">// 4.执行所有SQL语句，返回更新记数数组</span></span><br><span class="line"><span class="keyword">int</span>[] count = stat.executeBatch();</span><br><span class="line"><span class="comment">// 5.提交更新</span></span><br><span class="line">conn.commit();</span><br></pre></td></tr></table></figure><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个。释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。</p><p>数据库连接提前创建了多个数据库连接，避免在程序运行期间频繁打开/关闭数据库连接造成的性能损耗。这项技术能明显提高对数据库操作的性能。 </p><p>总而言之，数据库连接是一种昂贵的资源，采用数据库连接池可以控制连接数量，复用连接，提高性能。</p><h3 id="常用的数据库连接池"><a href="#常用的数据库连接池" class="headerlink" title="常用的数据库连接池"></a>常用的数据库连接池</h3><ul><li><strong>DBCP</strong>，Apache 提供的一个Java连接池项目，配置简单，没有连接池监控功能，大并发下速度稍慢。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BasicDataSource ds = <span class="keyword">new</span> BasicDataSource();</span><br></pre></td></tr></table></figure><ul><li><strong>C3P0</strong>，配置简单，没有连接池监控功能，大并发下速度稳定。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br></pre></td></tr></table></figure><ul><li><strong>Druid</strong>，阿里巴巴开源提供的一个数据库连接池实现，在DBCP、C3P0等的基础上添加了日志监控功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataSource dataSource = DruidDataSourceFactory.createDataSource();</span><br></pre></td></tr></table></figure><h3 id="数据库连接池的使用"><a href="#数据库连接池的使用" class="headerlink" title="数据库连接池的使用"></a>数据库连接池的使用</h3><p>以DBCP为例，其他大同小异。</p><p><strong>前提</strong>：安装数据库连接池程序（导入dbcp的jar包）</p><p><strong>（1）dbcp.properties</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#基本配置</span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/lizi</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br><span class="line">#初始化池大小</span><br><span class="line">initialSize=10</span><br><span class="line">#最大连接数</span><br><span class="line">maxActive=8</span><br><span class="line">#最大空闲连接</span><br><span class="line">maxIdle=8</span><br><span class="line">#最小空闲连接</span><br><span class="line">minIdle=0</span><br><span class="line">#最大等待时间</span><br><span class="line">maxWait=-1</span><br><span class="line">#连接属性</span><br><span class="line">connectionProperties=useUnicode=true;characterEncoding=UTF8;useServerPrepStmts=true;cachePrepStmts=true;prepStmtCacheSize=50;prepStmtCacheSqlLimit=300</span><br><span class="line">#连接的默认提交方式</span><br><span class="line">defaultAutoCommit=true</span><br><span class="line">#连接是否为只读连接</span><br><span class="line">defaultReadOnly=false</span><br><span class="line">#指定事务的事务隔离级别</span><br><span class="line">defaultTransactionIsolation=REPEATABLE_READ</span><br></pre></td></tr></table></figure><p><strong>（2）使用 DataSource 获取数据库连接</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 DataSource 数据源对象</span></span><br><span class="line">BasicDataSource ds = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line"><span class="comment">// 设置数据库连接池参数</span></span><br><span class="line">ds.setDriverClassName(properties.getProperty(<span class="string">"driverClassName"</span>));</span><br><span class="line">ds.setUrl(properties.getProperty(<span class="string">"url"</span>));</span><br><span class="line">ds.setUsername(properties.getProperty(<span class="string">"username"</span>));</span><br><span class="line">ds.setPassword(properties.getProperty(<span class="string">"password"</span>));</span><br><span class="line">ds.setMaxActive(Integer.parseInt(properties.getProperty(<span class="string">"maxIdle"</span>)));</span><br><span class="line">ds.setMaxWait(Long.parseLong(properties.getProperty(<span class="string">"maxWait"</span>)));</span><br><span class="line">ds.setMaxActive(Integer.parseInt(properties.getProperty(<span class="string">"maxActive"</span>)));</span><br><span class="line">ds.setInitialSize(Integer.parseInt(properties.getProperty(<span class="string">"initialSize"</span>));</span><br><span class="line"><span class="comment">// 获取数据库连接</span></span><br><span class="line">Connection conn = ds.getConnection();</span><br></pre></td></tr></table></figure><h2 id="DBUtils"><a href="#DBUtils" class="headerlink" title="DBUtils"></a>DBUtils</h2><p>Commons DBUtils 是 Apache 提供的一个对 JDBC 进行简单封装的开源工具类库。</p><h3 id="DBUtils-组件"><a href="#DBUtils-组件" class="headerlink" title="DBUtils 组件"></a>DBUtils 组件</h3><ul><li><strong>QueryRunner</strong>：执行SQL语句。</li><li><strong>ResultSetHandle</strong>：封装结果集的策略对象（将数据存入对象、数组、集合等）。</li></ul><h3 id="DBUtils-使用"><a href="#DBUtils-使用" class="headerlink" title="DBUtils 使用"></a>DBUtils 使用</h3><p><strong>前提</strong>：前往 Apache 官网下载安装DBUtils（导入dbutils的jar包）。</p><p><code>QueryRunner</code> 对象执行SQL语句的方法：</p><ul><li><code>&lt;T&gt; T query(String sql,ResultSetHandler&lt;T&gt; rsh,Object... params)</code>：执行SQL查询语句，返回结果对象/数组/集合。</li><li><code>int update(String sql,Object...params)</code>：执行SQL更新。</li></ul><p><strong>（1）创建 QueryRunner 对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(DataSource ds);</span><br></pre></td></tr></table></figure><p><strong>（2）执行SQL查询语句（有返回值）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select * from \"product\" where \"proId\" = ?"</span>;</span><br><span class="line">Product product = qr.query(sql,<span class="keyword">new</span> BeanHandler&lt;&gt;(Product.class),id);</span><br></pre></td></tr></table></figure><p><strong>（3）执行SQL更新语句（无返回值）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"delete from \"product\" where \"proId\" = ?;</span></span><br><span class="line"><span class="string">qr.update(sql,id);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!--# JDBC--&gt;
&lt;p&gt;JDBC（Java Database Connectivity ，Java数据库连接），一种用于执行SQL语句的Java API，为访问不同的关系型数据库提供了统一规范。&lt;/p&gt;
    
    </summary>
    
      <category term="DataBase" scheme="https://liziczh.com/categories/DataBase/"/>
    
    
      <category term="Database" scheme="https://liziczh.com/tags/Database/"/>
    
      <category term="Java" scheme="https://liziczh.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Database | 分页SQL语句</title>
    <link href="https://liziczh.com/db-pagination.html"/>
    <id>https://liziczh.com/db-pagination.html</id>
    <published>2018-05-16T04:50:55.000Z</published>
    <updated>2018-06-28T02:09:33.083Z</updated>
    
    <content type="html"><![CDATA[<!--# Database | 分页SQL语句--><p>使用数据库SQL语句实现分页功能。</p><a id="more"></a><h3 id="Oracle分页语句"><a href="#Oracle分页语句" class="headerlink" title="Oracle分页语句"></a>Oracle分页语句</h3><p>Oracle使用<code>ROWNUM</code>伪列实现分页：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> ( </span><br><span class="line">  <span class="keyword">select</span> <span class="string">"temp"</span>.*, <span class="keyword">ROWNUM</span> <span class="string">"rn"</span> </span><br><span class="line">  <span class="keyword">from</span>  &lt;表/查询块&gt; <span class="string">"temp"</span> </span><br><span class="line">  <span class="keyword">where</span> <span class="keyword">ROWNUM</span> &lt;= currengPage * pageSize ) </span><br><span class="line"><span class="keyword">where</span> <span class="string">"rn"</span> &gt; (currentPage<span class="number">-1</span>) * pageSize</span><br></pre></td></tr></table></figure><blockquote><p>currentPage：当前页数。<br>pageSize：每页显示的数据条数。</p></blockquote><h3 id="MySql分页语句"><a href="#MySql分页语句" class="headerlink" title="MySql分页语句"></a>MySql分页语句</h3><p>MySql使用<code>LIMIT</code>关键字实现分页：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> &lt;表/查询块&gt;</span><br><span class="line"><span class="keyword">limit</span> (currentPage<span class="number">-1</span>)*pageSize, pageSize</span><br></pre></td></tr></table></figure><blockquote><p>currentPage：当前页数。<br>pageSize：每页显示的数据条数。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!--# Database | 分页SQL语句--&gt;
&lt;p&gt;使用数据库SQL语句实现分页功能。&lt;/p&gt;
    
    </summary>
    
      <category term="DataBase" scheme="https://liziczh.com/categories/DataBase/"/>
    
    
      <category term="Database" scheme="https://liziczh.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Oracle | PL/SQL编程</title>
    <link href="https://liziczh.com/oracle-plsql.html"/>
    <id>https://liziczh.com/oracle-plsql.html</id>
    <published>2018-05-15T09:19:29.000Z</published>
    <updated>2018-06-27T11:10:38.167Z</updated>
    
    <content type="html"><![CDATA[<!--# Oracle | （三）PL/SQL编程--><p>PL/SQL（Procedural Language/SQL，过程化SQL语言），是一种高级数据库程序设计语言，专门用于在各种环境下对ORACLE数据库进行访问。由于该语言集成于数据库服务器中，所以PL/SQL代码可以对数据进行快速高效的处理。 </p><a id="more"></a><h2 id="PL-SQL-中可引用的SQL语句"><a href="#PL-SQL-中可引用的SQL语句" class="headerlink" title="PL/SQL 中可引用的SQL语句"></a>PL/SQL 中可引用的SQL语句</h2><ul><li>可用DML语句：SELECT INTO，INSERT，UPDATE，DELETE。</li><li>可用TCL语句：COMMIT，ROLLBACK，SAVEPOINT。</li><li>不能使用DDL语句。</li></ul><h2 id="PL-SQL-块"><a href="#PL-SQL-块" class="headerlink" title="PL/SQL 块"></a>PL/SQL 块</h2><p>PL/SQL块：声明部分+执行部分+异常处理部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 单行注释</span><br><span class="line">DECLARE</span><br><span class="line">/* 声明部分：声明变量，类型、游标、局部存储过程和函数 */</span><br><span class="line">BEGIN</span><br><span class="line">/* 执行部分：执行过程和SQL语句 */</span><br><span class="line">[EXCEPTION]</span><br><span class="line">/* 异常处理部分 */</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h2 id="PL-SQL-变量"><a href="#PL-SQL-变量" class="headerlink" title="PL/SQL 变量"></a>PL/SQL 变量</h2><h3 id="PL-SQL-变量命名"><a href="#PL-SQL-变量命名" class="headerlink" title="PL/SQL 变量命名"></a>PL/SQL 变量命名</h3><table><thead><tr><th>标识符</th><th>命名规则</th></tr></thead><tbody><tr><td>程序变量</td><td>V_name</td></tr><tr><td>程序常量</td><td>C_Name</td></tr><tr><td>游标变量</td><td>Name_cursor</td></tr><tr><td>异常标识</td><td>E_name</td></tr><tr><td>表类型</td><td>Name_table_type</td></tr><tr><td>表</td><td>Name_table</td></tr><tr><td>记录类型</td><td>Name_record</td></tr></tbody></table><h3 id="PL-SQL-变量类型"><a href="#PL-SQL-变量类型" class="headerlink" title="PL/SQL 变量类型"></a>PL/SQL 变量类型</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>number，char，varchar2，long，date</p><h4 id="记录类型"><a href="#记录类型" class="headerlink" title="记录类型"></a>记录类型</h4><p>记录类型：把逻辑相关的数据作为一个单元存储起来，用于存放互不相同但逻辑相关的信息。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TYPE record_type IS RECORD(</span><br><span class="line">   Field1 type1  [NOT NULL]  [:= exp1 ],</span><br><span class="line">   Field2 type2  [NOT NULL]  [:= exp2 ],</span><br><span class="line">   . . .   . . .</span><br><span class="line">   Fieldn typen  [NOT NULL]  [:= expn ] ) ;</span><br></pre></td></tr></table></figure><h4 id="TYPE-类型"><a href="#TYPE-类型" class="headerlink" title="%TYPE 类型"></a>%TYPE 类型</h4><p>%TYPE类型：指某个已定义变量的数据类型类型，或数据表中某列的数据类型。</p><p>使用%TYPE特性的优点：</p><ul><li>所引用的数据库列的数据类型可以不必知道；</li><li>所引用的数据库列的数据类型可以实时改变。</li></ul><h4 id="RowType-类型"><a href="#RowType-类型" class="headerlink" title="%RowType 类型"></a>%RowType 类型</h4><p>%RowType类型：返回一个与数据库表的数据结构一致的记录类型。</p><p>使用%ROWTYPE特性的优点：</p><ul><li>所引用的数据库中列的个数和数据类型可以不必知道；</li><li>所引用的数据库中列的个数和数据类型可以实时改变。</li></ul><h3 id="PL-SQL-特殊运算符"><a href="#PL-SQL-特殊运算符" class="headerlink" title="PL/SQL 特殊运算符"></a>PL/SQL 特殊运算符</h3><p>赋值运算符：<code>:=</code><br>关系运算符：<code>=&gt;</code><br>上下限运算符：<code>..</code></p><h2 id="PL-SQL-流程控制"><a href="#PL-SQL-流程控制" class="headerlink" title="PL/SQL 流程控制"></a>PL/SQL 流程控制</h2><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="IF-语句"><a href="#IF-语句" class="headerlink" title="IF 语句"></a>IF 语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IF &lt;条件语句1&gt; THEN</span><br><span class="line">语句1;</span><br><span class="line">ELSIF &lt;条件语句2&gt; THEN</span><br><span class="line">语句2;</span><br><span class="line">ELSE</span><br><span class="line">语句3;</span><br><span class="line">END IF;</span><br></pre></td></tr></table></figure><blockquote><p>注意是<code>ELSIF</code>不是<s><code>ELSEIF</code></s>；</p></blockquote><h4 id="CASE-语句"><a href="#CASE-语句" class="headerlink" title="CASE 语句"></a>CASE 语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CASE &lt;变量&gt;</span><br><span class="line">WHEN &lt;值1&gt; THEN &lt;结果1&gt;</span><br><span class="line">WHEN &lt;值2&gt; THEN &lt;结果1&gt;</span><br><span class="line">...</span><br><span class="line">WHEN &lt;值N&gt; THEN &lt;结果N&gt;</span><br><span class="line">[ELSE &lt;结果N+1&gt;]</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="do…while-循环"><a href="#do…while-循环" class="headerlink" title="do…while 循环"></a>do…while 循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LOOP</span><br><span class="line">循环语句;</span><br><span class="line">EXIT WHEN &lt;条件语句&gt;</span><br><span class="line">END LOOP;</span><br></pre></td></tr></table></figure><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WHILE &lt;条件语句&gt; LOOP</span><br><span class="line">循环语句;</span><br><span class="line">END LOOP;</span><br></pre></td></tr></table></figure><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FOR &lt;循环计数器&gt; IN [REVERSE] &lt;下限&gt; .. &lt;上限&gt; LOOP</span><br><span class="line">  循环语句;</span><br><span class="line">END LOOP;</span><br></pre></td></tr></table></figure><h3 id="GOTO-语句"><a href="#GOTO-语句" class="headerlink" title="GOTO 语句"></a>GOTO 语句</h3><p>定义标号：<code>&lt;&lt;标号名&gt;&gt;</code>；</p><p>GOTO语句：<code>GOTO 标号名</code>；</p><h3 id="NULL-语句"><a href="#NULL-语句" class="headerlink" title="NULL 语句"></a>NULL 语句</h3><p>NULL语句：不做任何事，增强代码可读性。</p><h2 id="PL-SQL-异常处理"><a href="#PL-SQL-异常处理" class="headerlink" title="PL/SQL 异常处理"></a>PL/SQL 异常处理</h2><h3 id="异常错误类型"><a href="#异常错误类型" class="headerlink" title="异常错误类型"></a>异常错误类型</h3><ul><li>预定义错误：无需在程序中定义，由Oracle自动将其引发。</li><li>非预定义错误：用户需在程序中定义，然后由Oracle自动将其引发。</li><li>用户定义错误：用户在程序中定义，然后显式地在程序中将其引发。</li></ul><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EXCEPTION</span><br><span class="line">   WHEN &lt;异常1&gt; THEN  &lt;异常处理代码&gt;</span><br><span class="line">   WHEN &lt;异常2&gt; THEN  &lt;异常处理代码&gt;</span><br><span class="line">   WHEN OTHERS THEN  &lt;异常处理代码&gt;</span><br></pre></td></tr></table></figure><h2 id="游标-CURSOR"><a href="#游标-CURSOR" class="headerlink" title="游标-CURSOR"></a>游标-CURSOR</h2><p>为了处理 SQL 语句，Oracle 会分配一片叫上下文 (context area) 的区域来处理所必需的信息，即系统为用户开设的一个数据缓冲区，存放SQL语句的执行结果。游标就是一个指向上下文的句柄或指针。</p><h3 id="显式游标"><a href="#显式游标" class="headerlink" title="显式游标"></a>显式游标</h3><p>显式游标主要是用于对查询语句的处理，尤其是查询结果为多条记录的情况。</p><h4 id="显式游标处理："><a href="#显式游标处理：" class="headerlink" title="显式游标处理："></a><strong>显式游标处理</strong>：</h4><p>①定义游标：定义游标名及对应的 SELECT 查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CURSOR cursor_name (参数1 参数类型,参数2 参数类型...) IS </span><br><span class="line">SELECT查询块;</span><br></pre></td></tr></table></figure><blockquote><p>数据类型不能使用长度约束。</p></blockquote><p>②打开游标：执行游标的 SELECT 查询，将查询结果放入缓冲区，并指向缓冲区首部。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPEN cursor_name (参数1 =&gt; 值,参数2 =&gt; 值...);</span><br></pre></td></tr></table></figure><p>③提取游标数据：检索结果集中的数据行，放入指定输出变量中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FETCH cursor_name INTO &#123;variable_list | record_variable &#125;;</span><br></pre></td></tr></table></figure><p>④关闭游标：释放游标占用的系统资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLOSE cursor_name;</span><br></pre></td></tr></table></figure><h4 id="显式游标属性"><a href="#显式游标属性" class="headerlink" title="显式游标属性"></a>显式游标属性</h4><table><thead><tr><th>游标属性</th><th>描述</th></tr></thead><tbody><tr><td><code>%FOUND</code></td><td>布尔型，当最近一次读记录时成功返回,则值为TRUE</td></tr><tr><td><code>%NOTFOUND</code></td><td>布尔型，当最近一次读记录时返回失败,则值为TRUE</td></tr><tr><td><code>%ISOPEN</code></td><td>布尔型，当游标已打开时返回 TRUE</td></tr><tr><td><code>%ROWCOUNT</code></td><td>数值型，返回已从游标中读取的记录数</td></tr></tbody></table><h4 id="游标的FOR循环："><a href="#游标的FOR循环：" class="headerlink" title="游标的FOR循环："></a>游标的FOR循环：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FOR 索引 IN 游标[值1,值2...] LOOP</span><br><span class="line">    循环语句;</span><br><span class="line">END LOOP;</span><br></pre></td></tr></table></figure><h3 id="隐式游标"><a href="#隐式游标" class="headerlink" title="隐式游标"></a>隐式游标</h3><p>隐式游标主要用于数据更新操作。隐式游标的名字为<code>SQL</code>，由Oracle系统提供，无需用户处理。</p><h4 id="隐式游标属性"><a href="#隐式游标属性" class="headerlink" title="隐式游标属性"></a>隐式游标属性</h4><table><thead><tr><th>游标属性</th><th>描述</th></tr></thead><tbody><tr><td><code>SQL%FOUND</code></td><td>布尔型，当最近一次读记录时成功返回,则值为TRUE</td></tr><tr><td><code>SQL%NOTFOUND</code></td><td>布尔型，当最近一次读记录时返回失败,则值为TRUE</td></tr><tr><td><code>SQL%ISOPEN</code></td><td>布尔型，当游标已打开时返回 TRUE</td></tr><tr><td><code>SQL%ROWCOUNT</code></td><td>数值型，返回已从游标中读取的记录数</td></tr></tbody></table><h2 id="存储过程与函数"><a href="#存储过程与函数" class="headerlink" title="存储过程与函数"></a>存储过程与函数</h2><p>存储过程用于执行特定操作，无返回值；函数用于执行复杂操作，有返回值；存储函数与函数统称为PL/SQL子程序。</p><h3 id="存储过程-PROCEDURE"><a href="#存储过程-PROCEDURE" class="headerlink" title="存储过程-PROCEDURE"></a>存储过程-PROCEDURE</h3><p>存储过程：执行特定操作，无返回值，多用于更新操作。</p><h4 id="定义存储过程"><a href="#定义存储过程" class="headerlink" title="定义存储过程"></a>定义存储过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE [OR REPLACE] PROCEDURE Procedure_name</span><br><span class="line">[ (argment [ &#123; IN | IN OUT &#125;] Type,</span><br><span class="line">      argment [ &#123; IN | OUT | IN OUT &#125; ] Type ]</span><br><span class="line">&#123; IS | AS &#125;</span><br><span class="line">&lt;类型.变量的说明&gt; </span><br><span class="line">BEGIN</span><br><span class="line">&lt;执行部分&gt;</span><br><span class="line">EXCEPTION</span><br><span class="line">&lt;异常处理&gt;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h3 id="函数-FUNCTION"><a href="#函数-FUNCTION" class="headerlink" title="函数-FUNCTION"></a>函数-FUNCTION</h3><p>函数：执行复杂操作，有返回值。</p><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE [OR REPLACE] FUNCTION &lt;函数名&gt;[(argument [ &#123; IN | IN OUT &#125;] type,argument [ &#123; IN | OUT | IN OUT &#125; ] type]RETURN &lt;返回值类型&gt;</span><br><span class="line">&#123; IS | AS &#125;</span><br><span class="line">&lt;类型.变量的说明&gt; </span><br><span class="line">BEGIN</span><br><span class="line">&lt;执行部分&gt;</span><br><span class="line">EXCEPTION</span><br><span class="line">&lt;异常处理&gt;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h4 id="函数执行方式"><a href="#函数执行方式" class="headerlink" title="函数执行方式"></a>函数执行方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbms_output.put_line(fun());</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select fun() from dual;</span><br></pre></td></tr></table></figure><h4 id="函数参数类型"><a href="#函数参数类型" class="headerlink" title="函数参数类型"></a>函数参数类型</h4><ul><li>输入参数 <code>IN</code>；</li><li>输出参数 <code>OUT</code>；</li><li>输入输出参数 <code>IN OUT</code>；</li></ul><h4 id="参数传递类型"><a href="#参数传递类型" class="headerlink" title="参数传递类型"></a>参数传递类型</h4><p><strong>位置表示法</strong>：根据参数位置依此传值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">argument_value1[,argument_value2 …]</span><br></pre></td></tr></table></figure><p><strong>名称表示法</strong>：使用关系运算符<code>=&gt;</code>为参数传值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">argument =&gt; parameter [,…]</span><br></pre></td></tr></table></figure><h2 id="触发器-TRIGGER"><a href="#触发器-TRIGGER" class="headerlink" title="触发器-TRIGGER"></a>触发器-TRIGGER</h2><p>触发器：用户定义的一类由事件触发而执行的特殊过程。</p><h3 id="定义触发器"><a href="#定义触发器" class="headerlink" title="定义触发器"></a>定义触发器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE [OR REPLACE] TRIGGER &lt;触发器名称&gt;</span><br><span class="line">&#123;BEFORE | AFTER | INSTEAD OF&#125;</span><br><span class="line">&#123;INSERT | DELETE | UPDATE [OF column [, column …]]&#125;</span><br><span class="line">ON &lt;表/视图&gt;</span><br><span class="line">[REFERENCING &#123;OLD [AS] old | NEW [AS] new| PARENT as parent&#125;]</span><br><span class="line">[FOR EACH ROW | STATEMENT]</span><br><span class="line">[WHEN condition]</span><br><span class="line">trigger_body;</span><br></pre></td></tr></table></figure><p>触发事件：INSERT | DELETE | UPDATE</p><p>触发时机：BEFORE | AFTER</p><p>触发频率：</p><ul><li>ROW：行级触发；当某触发事件发生时，对受到该操作影响的每一行数据，触发器都单独执行一次。</li><li>STATEMENT：语句级触发；当某触发事件发生时，该触发器只执行一次。</li></ul><p>触发器的新值与旧值：</p><ul><li>:new  事件触发后的新的数据行；</li><li>:old  事件触发前的旧的数据行；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!--# Oracle | （三）PL/SQL编程--&gt;
&lt;p&gt;PL/SQL（Procedural Language/SQL，过程化SQL语言），是一种高级数据库程序设计语言，专门用于在各种环境下对ORACLE数据库进行访问。由于该语言集成于数据库服务器中，所以PL/SQL代码可以对数据进行快速高效的处理。 &lt;/p&gt;
    
    </summary>
    
      <category term="DataBase" scheme="https://liziczh.com/categories/DataBase/"/>
    
    
      <category term="Oracle" scheme="https://liziczh.com/tags/Oracle/"/>
    
      <category term="Database" scheme="https://liziczh.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Oracle | DDL&amp;约束&amp;DCL&amp;TCL</title>
    <link href="https://liziczh.com/db-oracle-ddl.html"/>
    <id>https://liziczh.com/db-oracle-ddl.html</id>
    <published>2018-05-13T09:32:29.000Z</published>
    <updated>2018-06-27T11:10:25.742Z</updated>
    
    <content type="html"><![CDATA[<!--# Oracle | DDL&约束&DCL&TCL--><ul><li>DDL（Data Definition Language，数据定义语言），用于创建/修改/删除数据库的各种对象，如表、视图、索引、同义词、序列等。DDL语句主要包括 <code>CREATE</code> 创建、<code>ALTER</code> 修改、<code>TRUNCATE</code> 截断 、<code>DROP</code> 删除。</li><li>约束CONSTRAINT，用于限制表的数据的类型，主要包括非空约束 <code>NOT NULL</code>、唯一约束 <code>UNIQUE</code>、主键约束 <code>PRIMARY KEY</code>、检查约束 <code>CHECK</code>、外键约束 <code>FOREIGN KEY</code>。</li><li>DCL（Data Control Language，数据控制语言），用于授予/回收访问数据库的权限。DCL 语句即<code>GRANT</code> 授予、<code>REVOKE</code> 回收。</li><li>TCL（Transaction Control Language，事务控制语言），用于事务的提交/回滚。TCL语句包括 <code>COMMIT</code> 提交、<code>ROLLBACK</code> 回滚，<code>SAVEPOINT</code> 保存点。</li></ul><a id="more"></a><h1 id="Oracle数据库"><a href="#Oracle数据库" class="headerlink" title="Oracle数据库"></a>Oracle数据库</h1><h2 id="解锁账户"><a href="#解锁账户" class="headerlink" title="解锁账户"></a>解锁账户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> &lt;账户名&gt; <span class="keyword">account</span> <span class="keyword">unlock</span>;</span><br></pre></td></tr></table></figure><h2 id="Oracle-数据类型"><a href="#Oracle-数据类型" class="headerlink" title="Oracle 数据类型"></a>Oracle 数据类型</h2><ul><li>NUMBER：整数</li><li>DATE：日期</li><li>CLOB：大文本数据，可存4G文本数据</li><li>BLOB：二进制数据，可存图片、音频、视频、文字，最大4G。</li><li>VARCHAR：固定长度字符串，标准sql数据类型</li><li>VARCHAR2：可变长度字符串，oracle特有。<ul><li>字符串：<code>&#39;abc&#39;</code></li><li>字符串连接符：<code>||</code></li></ul></li></ul><h2 id="数据伪列"><a href="#数据伪列" class="headerlink" title="数据伪列"></a>数据伪列</h2><ul><li><code>ROWID</code>：数据库中每一行都有一个行地址，rowid伪列返回该行地址。rowId值可以唯一标识数据库中的一行。</li><li><code>ROWNUM</code>：返回一个数值代表行的次序。通过使用rownum，用户可以限制查询返回的行数。</li></ul><h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><p>数据定义语言DDL，主要用于创建/修改/删除数据库的各种对象，如表、视图、索引、同义词、序列等。DDL语句主要包括 <code>CREATE</code> 创建、<code>ALTER</code> 修改、<code>DROP</code> 删除。</p><h2 id="表：TABLE"><a href="#表：TABLE" class="headerlink" title="表：TABLE"></a>表：TABLE</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &lt;表名&gt;(</span><br><span class="line">    &lt;列名&gt; &lt;数据类型&gt; [&lt;DEFAULT 默认值&gt;] [&lt;约束&gt;],</span><br><span class="line">    &lt;列名&gt; &lt;数据类型&gt; [&lt;DEFAULT 默认值&gt;] [&lt;约束&gt;],</span><br><span class="line">    ...</span><br><span class="line">    [CONSTRAINT &lt;约束名&gt; &lt;约束类型&gt;(约束列)]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><p>修改表中列</p><p>1.增加列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt; ADD （</span><br><span class="line">    &lt;列名&gt; &lt;数据类型&gt; [&lt;DEFAULT 默认值&gt;] [&lt;列级约束&gt;],</span><br><span class="line">    &lt;列名&gt; &lt;数据类型&gt; [&lt;DEFAULT 默认值&gt;] [&lt;列级约束&gt;],</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>2.修改列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt; MODIFY （</span><br><span class="line">    &lt;列名&gt; &lt;数据类型&gt; [&lt;DEFAULT 默认值&gt;] [&lt;列级约束&gt;],</span><br><span class="line">    &lt;列名&gt; &lt;数据类型&gt; [&lt;DEFAULT 默认值&gt;] [&lt;列级约束&gt;],</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>3.删除列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt; DROP COLUMN &lt;列名&gt;</span><br></pre></td></tr></table></figure><p>4.重命名列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt; RENAME &lt;旧名&gt; TO &lt;新名&gt;</span><br></pre></td></tr></table></figure><p>修改表中属性：</p><p>1.添加约束：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt; ADD CONSTRAINT &lt;约束名&gt; &lt;约束类型&gt;(约束列);</span><br></pre></td></tr></table></figure><p>2.删除约束：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt; DROP CONSTRAINT &lt;约束名&gt;;</span><br></pre></td></tr></table></figure><h3 id="截断表"><a href="#截断表" class="headerlink" title="截断表"></a>截断表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> &lt;表名&gt;</span><br></pre></td></tr></table></figure><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p>1.删除表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> &lt;表名&gt;</span><br></pre></td></tr></table></figure><p>2.截断表：</p><h3 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h3><p>1.复制表的结构与数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &lt;表名&gt; AS </span><br><span class="line">SELECT &lt;目标列表达式&gt;</span><br><span class="line">FROM &lt;表&gt;</span><br><span class="line">WHERE &lt;查询条件&gt;</span><br></pre></td></tr></table></figure><p>2.仅复制表的结构：<code>WHERE 1 = 2</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &lt;表名&gt; AS </span><br><span class="line">SELECT &lt;目标列表达式&gt;</span><br><span class="line">FROM &lt;表&gt;</span><br><span class="line">WHERE 1 = 2;</span><br></pre></td></tr></table></figure><h3 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME &lt;旧名称&gt; TO &lt;新名称&gt;</span><br></pre></td></tr></table></figure><h2 id="视图：VIEW"><a href="#视图：VIEW" class="headerlink" title="视图：VIEW"></a>视图：VIEW</h2><p>视图 (VIEW)：虚拟表，不占物理空间。</p><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE [OR REPLACE] [FORCE] VIEW &lt;视图名&gt;</span><br><span class="line">[(列名1, 列2,...)]</span><br><span class="line">AS </span><br><span class="line">SELECT...</span><br><span class="line">[WITH CHECK OPTION]</span><br><span class="line">[WITH READ ONLY];</span><br></pre></td></tr></table></figure><blockquote><p>FORCE：强制创建视图<br>WITH CHECK OPTION：检查约束视图<br>WITH READ ONLY：只读视图</p></blockquote><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW &lt;视图名&gt;</span><br></pre></td></tr></table></figure><h2 id="索引：INDEX"><a href="#索引：INDEX" class="headerlink" title="索引：INDEX"></a>索引：INDEX</h2><p>索引：加快查询速度</p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE [UNIQUE] INDEX &lt;索引名&gt;</span><br><span class="line">ON &lt;表名&gt; (&lt;列名&gt; [ASC | DESC], ... )</span><br><span class="line">[INITRANS n]</span><br><span class="line">[MAXTRANS n]</span><br><span class="line">[PCTFREE n]</span><br><span class="line">[TABLESPACE &lt;表空间名&gt;]</span><br><span class="line">[STORAGE storage]</span><br><span class="line">[NOSORT]</span><br></pre></td></tr></table></figure><blockquote><p>UNIQUE：唯一索引<br>INITRANS：初始事务入口数<br>MAXTRANS：最大事务入口数<br>PCTFREE：索引数据块空闲空间的百分比<br>NOSORT：不排序</p></blockquote><p>###修改索引</p><p>重建索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER INDEX &lt;索引名&gt; REBUILD;</span><br></pre></td></tr></table></figure><p>合并索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER INDEX &lt;索引名&gt; COALESCE;</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX &lt;索引名&gt;</span><br></pre></td></tr></table></figure><h2 id="同义词：SYNONYM"><a href="#同义词：SYNONYM" class="headerlink" title="同义词：SYNONYM"></a>同义词：SYNONYM</h2><p>同义词：数据库对象的一个别名，操作权限不变，简化对象访问。</p><h3 id="创建同义词"><a href="#创建同义词" class="headerlink" title="创建同义词"></a>创建同义词</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE [PUBLIC] SYNONYM &lt;表名同义词&gt;</span><br><span class="line">FOR &lt;用户&gt;.&lt;表名&gt;</span><br></pre></td></tr></table></figure><h3 id="删除同义词"><a href="#删除同义词" class="headerlink" title="删除同义词"></a>删除同义词</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP [PUBLIC] SYNONYM &lt;同义词&gt;</span><br></pre></td></tr></table></figure><h2 id="序列：SEQUENCE"><a href="#序列：SEQUENCE" class="headerlink" title="序列：SEQUENCE"></a>序列：SEQUENCE</h2><p>序列 (SEQUENCE)： 序列号生成器，为表中的行自动生成序列号，产生一组等间隔的数值(类型为数字)。不占用磁盘空间，占用内存。 </p><p>其主要用途是生成表的主键值，可以在插入语句中引用，也可以通过查询检查当前值，或使序列增至下一个值。</p><h3 id="创建序列"><a href="#创建序列" class="headerlink" title="创建序列"></a>创建序列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE SEQUENCE &lt;序列名&gt;</span><br><span class="line">[INCREMENT BY n]</span><br><span class="line">[START WITH n]</span><br><span class="line">[MAXVALUE n | NOMAXVALUE]</span><br><span class="line">[MINVALUE n | NOMINVALUE]</span><br><span class="line">[CYCLE | NOCYCLE]</span><br><span class="line">[CACHE n | NOCACHE];</span><br></pre></td></tr></table></figure><blockquote><p>INCREMENT BY：定义步长<br>START WITH：定义序列初始值<br>MAXVALUE / MINVALUE：定义序列最大值/最小值<br>NOMAXVALUE：默认最值<br>CYCLE / NOCYCLE：表示序列达到限定值后是否循环<br>CACHE n：对序列进行内存缓冲，提前生成n个序号存入缓存，默认n=20<br>NOCACHE：不对序列进行内存缓冲</p></blockquote><h3 id="序列的两个伪列"><a href="#序列的两个伪列" class="headerlink" title="序列的两个伪列"></a><strong>序列的两个伪列</strong></h3><ul><li>NEXTVAL：序列中的下一个有效值</li><li>CURRVAL：序列当前值</li></ul><h3 id="修改序列"><a href="#修改序列" class="headerlink" title="修改序列"></a>修改序列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ALTER SEQUENCE [&lt;用户&gt;.]&lt;序列名&gt;</span><br><span class="line">[INCREMENT BY n]</span><br><span class="line">[START WITH n]</span><br><span class="line">[MAXVALUE n | NOMAXVALUE]</span><br><span class="line">[MINVALUE n | NOMINVALUE]</span><br><span class="line">[CYCLE | NOCYCLE]</span><br><span class="line">[CACHE n | NOCACHE];</span><br></pre></td></tr></table></figure><h3 id="删除序列"><a href="#删除序列" class="headerlink" title="删除序列"></a>删除序列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP SEQUENCE &lt;序列名&gt;</span><br></pre></td></tr></table></figure><h1 id="约束-CONSTRAINT"><a href="#约束-CONSTRAINT" class="headerlink" title="约束-CONSTRAINT"></a>约束-CONSTRAINT</h1><p>约束CONSTRAINT，用于限制表的数据的类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONSTRAINT &lt;约束名&gt; &lt;约束类型&gt;(约束列)</span><br></pre></td></tr></table></figure><h2 id="非空约束：NOT-NULL"><a href="#非空约束：NOT-NULL" class="headerlink" title="非空约束：NOT NULL"></a>非空约束：NOT NULL</h2><p>非空约束：NOT NULL</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;列名&gt; &lt;数据类型&gt; NOT NULL</span><br></pre></td></tr></table></figure><h2 id="唯一约束：UNIQUE"><a href="#唯一约束：UNIQUE" class="headerlink" title="唯一约束：UNIQUE"></a>唯一约束：UNIQUE</h2><p>唯一约束：UNIQUE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;列名&gt; &lt;数据类型&gt; UNIQUE</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONSTRAINT uk_cloumn UNIQUE(&lt;列名&gt;);</span><br></pre></td></tr></table></figure><h2 id="主键约束：PRIMARY-KEY"><a href="#主键约束：PRIMARY-KEY" class="headerlink" title="主键约束：PRIMARY KEY"></a>主键约束：PRIMARY KEY</h2><p>主键约束：PRIMARY KEY，非空+唯一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONSTRAINT pk_cloumn PRIMARY KEY(&lt;列名&gt;);</span><br></pre></td></tr></table></figure><p>联合主键：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONSTRAINT pk_cloumn PRIMARY KEY(&lt;列名1&gt;,&lt;列名2&gt;,...);</span><br></pre></td></tr></table></figure><h2 id="检查约束：CHECK"><a href="#检查约束：CHECK" class="headerlink" title="检查约束：CHECK"></a>检查约束：CHECK</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONSTRAINT ck_cloumn CHECK(&lt;列名&gt; IN (值1,值2...))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONSTRAINT ck_cloumn CHECK(&lt;列名&gt; BETWEEN 值1 AND 值2)</span><br></pre></td></tr></table></figure><h2 id="外键约束：FOREIGN-KEY"><a href="#外键约束：FOREIGN-KEY" class="headerlink" title="外键约束：FOREIGN KEY"></a>外键约束：FOREIGN KEY</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONSTRAINT fk_cloumn FOREIGN KEY (&lt;列名1&gt;,&lt;列名2&gt;...) REFERENCES &lt;表名&gt;(&lt;列名1&gt;,&lt;列名2&gt;...) ON DELETE &lt;CASCADE|SET NULL&gt;</span><br></pre></td></tr></table></figure><h1 id="数据库安全-DCL"><a href="#数据库安全-DCL" class="headerlink" title="数据库安全-DCL"></a>数据库安全-DCL</h1><p>数据控制语言DCL，用于授予/回收用户/角色访问数据库的权限，DCL语句即 <code>GRANT</code> 授予、<code>REVOKE</code> 回收。</p><h2 id="授予权限：GRANT"><a href="#授予权限：GRANT" class="headerlink" title="授予权限：GRANT"></a>授予权限：GRANT</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GRANT &lt;权限&gt;</span><br><span class="line">ON &lt;对象类型&gt; &lt;对象名&gt;</span><br><span class="line">TO &lt;用户&gt;</span><br><span class="line">[WITH GRANT OPTION]</span><br></pre></td></tr></table></figure><blockquote><p>WITH GRANT OPTION：可传播权限，即将该权限再授予其他用户。</p></blockquote><h2 id="收回权限：REVOKE"><a href="#收回权限：REVOKE" class="headerlink" title="收回权限：REVOKE"></a>收回权限：REVOKE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REVOKE &lt;权限&gt;</span><br><span class="line">ON &lt;对象类型&gt; &lt;对象名&gt;</span><br><span class="line">FROM &lt;用户&gt; [CASCADE|RESTRICT]</span><br></pre></td></tr></table></figure><blockquote><p>CASCADE：级联<br>RESTRICT：限定</p></blockquote><h2 id="角色：ROLE"><a href="#角色：ROLE" class="headerlink" title="角色：ROLE"></a>角色：ROLE</h2><p>角色(ROLE)：一组数据库操作权限的集合。</p><p><strong>1.创建角色</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE ROLE &lt;角色名&gt;</span><br></pre></td></tr></table></figure><p><strong>2.为角色授权</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT &lt;权限&gt;</span><br><span class="line">ON &lt;对象类型&gt; &lt;对象名&gt;</span><br><span class="line">TO &lt;角色&gt;</span><br></pre></td></tr></table></figure><p><strong>3.将角色授权给其他角色或用户</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT &lt;角色1&gt;</span><br><span class="line">ON &lt;对象类型&gt; &lt;对象名&gt;</span><br><span class="line">TO &lt;角色2&gt;,&lt;用户&gt;</span><br></pre></td></tr></table></figure><h1 id="事务-TCL"><a href="#事务-TCL" class="headerlink" title="事务-TCL"></a>事务-TCL</h1><p><strong>事务</strong>：用于<strong>保证数据完整性</strong>。由一组DML语句组成，这组DML语句要么全部成功，要么全部失败。</p><h2 id="事务特性：ACID"><a href="#事务特性：ACID" class="headerlink" title="事务特性：ACID"></a>事务特性：ACID</h2><ul><li><strong>原子性（atomicity）</strong>：一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。</li><li><strong>一致性（consistency）</strong>：事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。</li><li><strong>隔离性（isolation）</strong>：一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</li><li><strong>持久性（durability）</strong>：指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</li></ul><h2 id="事务锁"><a href="#事务锁" class="headerlink" title="事务锁"></a>事务锁</h2><p><strong>事务并发不一致性</strong>导致的问题：</p><ul><li><strong>幻读</strong>：事务T1读取一条指定where条件的语句，返回结果集。此时事务T2插入一行新记录并commit，恰好满足T1的where条件。然后T1使用相同的条件再次查询，结果集中可以看到T2插入的记录，这条新纪录就是幻想。</li><li><strong>不可重复读取</strong>：事务T1读取一行记录，紧接着事务T2修改了T1刚刚读取的记录并commit，然后T1再次查询，发现与第一次读取的记录不同，这称为不可重复读。 </li><li><strong>脏读</strong>：事务T1更新了一行记录，还未提交所做的修改，这个T2读取了更新后的数据，然后T1执行回滚操作，取消刚才的修改，所以T2所读取的行就无效，也就是脏数据。</li></ul><p>–于是引入事务锁，以保证数据的完整性。</p><p><strong>四种隔离级别</strong>：</p><ul><li>串行化</li><li>可重复读</li><li>读已提交</li><li>读未提交</li></ul><h2 id="事务处理-TCL"><a href="#事务处理-TCL" class="headerlink" title="事务处理-TCL"></a>事务处理-TCL</h2><p>事务控制语言TCL，用于事务的提交/回滚。TCL语句即 <code>COMMIT</code> 提交、<code>ROLLBACK</code> 回滚，<code>SAVEPOINT</code> 保存点。</p><h3 id="提交：COMMIT"><a href="#提交：COMMIT" class="headerlink" title="提交：COMMIT"></a>提交：COMMIT</h3><p>事务提交 <code>COMMIT</code>：将事务中对数据库的修改进行永久保存。</p><ul><li>显式提交：需要主动提交SQL语句对于数据库的修改，未提交之前可以rollback。如DML操作。</li><li>隐式提交：SQL语句执行结束自动提交，无法rollback。如DDL，DCL。</li></ul><h3 id="回滚：ROLLBACK"><a href="#回滚：ROLLBACK" class="headerlink" title="回滚：ROLLBACK"></a>回滚：ROLLBACK</h3><p>回滚 <code>ROLLBACK</code>：取消事务中对数据库进行的修改。</p><h3 id="保存点：SAVEPOINT"><a href="#保存点：SAVEPOINT" class="headerlink" title="保存点：SAVEPOINT"></a>保存点：SAVEPOINT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">savepoint</span> &lt;savepoint_name&gt;</span><br></pre></td></tr></table></figure><h3 id="回滚至保存点"><a href="#回滚至保存点" class="headerlink" title="回滚至保存点"></a>回滚至保存点</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> <span class="keyword">savepoint</span> &lt;savepoint_name&gt;</span><br></pre></td></tr></table></figure><h1 id="数据库设计范式"><a href="#数据库设计范式" class="headerlink" title="数据库设计范式"></a>数据库设计范式</h1><p>实际设计原则：根据业务尽可能的<strong>减少多表查询</strong>，不必完全遵循设计范式。</p><p><strong>第一范式</strong>：确保表中每个字段都不可拆分。</p><p><strong>第二范式</strong>：消除了部分函数依赖；确保表中每列都与主键相关（主要针对联合主键）。</p><p><strong>第三范式</strong>：消除了传递函数依赖；确保每列与主键直接相关，而不是间接相关。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--# Oracle | DDL&amp;约束&amp;DCL&amp;TCL--&gt;
&lt;ul&gt;
&lt;li&gt;DDL（Data Definition Language，数据定义语言），用于创建/修改/删除数据库的各种对象，如表、视图、索引、同义词、序列等。DDL语句主要包括 &lt;code&gt;CREATE&lt;/code&gt; 创建、&lt;code&gt;ALTER&lt;/code&gt; 修改、&lt;code&gt;TRUNCATE&lt;/code&gt; 截断 、&lt;code&gt;DROP&lt;/code&gt; 删除。&lt;/li&gt;
&lt;li&gt;约束CONSTRAINT，用于限制表的数据的类型，主要包括非空约束 &lt;code&gt;NOT NULL&lt;/code&gt;、唯一约束 &lt;code&gt;UNIQUE&lt;/code&gt;、主键约束 &lt;code&gt;PRIMARY KEY&lt;/code&gt;、检查约束 &lt;code&gt;CHECK&lt;/code&gt;、外键约束 &lt;code&gt;FOREIGN KEY&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;DCL（Data Control Language，数据控制语言），用于授予/回收访问数据库的权限。DCL 语句即&lt;code&gt;GRANT&lt;/code&gt; 授予、&lt;code&gt;REVOKE&lt;/code&gt; 回收。&lt;/li&gt;
&lt;li&gt;TCL（Transaction Control Language，事务控制语言），用于事务的提交/回滚。TCL语句包括 &lt;code&gt;COMMIT&lt;/code&gt; 提交、&lt;code&gt;ROLLBACK&lt;/code&gt; 回滚，&lt;code&gt;SAVEPOINT&lt;/code&gt; 保存点。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="DataBase" scheme="https://liziczh.com/categories/DataBase/"/>
    
    
      <category term="Oracle" scheme="https://liziczh.com/tags/Oracle/"/>
    
      <category term="Database" scheme="https://liziczh.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Database | DQL&amp;DML</title>
    <link href="https://liziczh.com/db-dml.html"/>
    <id>https://liziczh.com/db-dml.html</id>
    <published>2018-05-12T11:32:29.000Z</published>
    <updated>2018-06-27T10:40:29.045Z</updated>
    
    <content type="html"><![CDATA[<!--# Database | DQL&DML--><p>SQL（Structured Query Language，结构化查询语言），面向集合的描述性非过程化语言，用于访问和处理关系数据库的标准语言。<br>SQL 是一种 ANSI 标准，所以存在多种不同版本的 SQL 语言。但就 SQL 查询和更新而言，Oracle、MySql 等数据库系统的实现大同小异，基本可以互通移植。</p><ul><li>DQL（Data Query Language，数据查询语言），即 SQL 查询，DQL 语句即 <code>SELECT</code> 查询块。</li><li>DML（Data Manipulation Language，数据操作语言），即 SQL 更新，DML 语句即 <code>INSERT</code> 插入、<code>UPDATE</code> 更新、<code>DELETE</code> 删除。</li></ul><a id="more"></a><h2 id="1-SQL查询★"><a href="#1-SQL查询★" class="headerlink" title="1. SQL查询★"></a>1. SQL查询★</h2><p>SELECT 语句的一般格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] &lt;目标列表达式&gt; [<span class="keyword">AS</span>] &lt;别名&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;表/视图&gt; [<span class="keyword">AS</span>] &lt;别名&gt;</span><br><span class="line">[<span class="keyword">WHERE</span> &lt;查询条件&gt;]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt;分组列&gt; [<span class="keyword">HAVING</span> &lt;分组条件&gt;]]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;排序列&gt; [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>]];</span><br></pre></td></tr></table></figure><h3 id="1-1-单表查询"><a href="#1-1-单表查询" class="headerlink" title="1.1 单表查询"></a>1.1 单表查询</h3><h4 id="1-1-1-简单查询：SELECT"><a href="#1-1-1-简单查询：SELECT" class="headerlink" title="1.1.1 简单查询：SELECT"></a>1.1.1 简单查询：SELECT</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] &lt;目标列表达式&gt; [<span class="keyword">AS</span>] &lt;别名&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;表/视图&gt; [<span class="keyword">AS</span>] &lt;别名&gt;</span><br></pre></td></tr></table></figure><p>1.查询全部列：使用通配符<code>*</code>实现查询全部。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> &lt;表/视图&gt;</span><br></pre></td></tr></table></figure><p>2.去除重复行：<code>DISTINCT</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> &lt;目标列&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;表/视图&gt;</span><br></pre></td></tr></table></figure><p>3.指定别名（Alias）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;列名/表名&gt; &lt;别名&gt;</span><br><span class="line">&lt;列名/表名&gt; AS &lt;别名&gt;</span><br></pre></td></tr></table></figure><h4 id="1-1-2-查询条件：WHERE"><a href="#1-1-2-查询条件：WHERE" class="headerlink" title="1.1.2 查询条件：WHERE"></a>1.1.2 查询条件：WHERE</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;目标列表达式&gt; [<span class="keyword">AS</span>] &lt;别名&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;表/视图&gt; [<span class="keyword">AS</span>] &lt;别名&gt;</span><br><span class="line"><span class="keyword">WHERE</span> &lt;查询条件&gt;</span><br></pre></td></tr></table></figure><p><strong>查询条件</strong>：</p><p>1.比较运算：<code>&gt;</code>，<code>&lt;</code>，<code>=</code>，<code>&gt;=</code>，<code>&lt;=</code>，<code>!=</code>/<code>&lt;&gt;</code></p><p>2.确定范围：<code>BETWEEN...AND...</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;列名&gt; [NOT] BETWEEN &lt;下限&gt; AND &lt;上限&gt;</span><br></pre></td></tr></table></figure><p>3.确定集合：<code>IN</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;列名&gt; [NOT] IN （值1, 值2...）</span><br></pre></td></tr></table></figure><p>4.模式匹配：<code>LIKE</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;列名&gt; [NOT] LIKE '&lt;匹配模式&gt;'</span><br></pre></td></tr></table></figure><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td><code>%</code></td><td>替代一个或多个字符</td></tr><tr><td><code>_</code></td><td>替代一个字符</td></tr><tr><td><code>[charlist]</code></td><td>字符序列中的任何单一字符</td></tr><tr><td><code>[!charlist]</code><br><code>[^charlist]</code></td><td>不在字符序列中的任何单一字符</td></tr></tbody></table><p>5.空值：<code>IS NULL</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;列名&gt; IS [NOT] NULL</span><br></pre></td></tr></table></figure><p>6.多重条件（逻辑运算）：<code>AND</code>，<code>OR</code>，<code>NOT</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;条件表达式&gt; AND &lt;条件表达式&gt;</span><br><span class="line">&lt;条件表达式&gt; OR &lt;条件表达式&gt;</span><br><span class="line">NOT &lt;条件表达式&gt;</span><br></pre></td></tr></table></figure><blockquote><p>AND优先级&gt;OR优先级</p></blockquote><h4 id="1-1-3-查询排序：ORDER-BY"><a href="#1-1-3-查询排序：ORDER-BY" class="headerlink" title="1.1.3 查询排序：ORDER BY"></a>1.1.3 查询排序：ORDER BY</h4><p>ORDER BY 子句将查询结果按指定列进行<strong>升序 (ASC)</strong> 或<strong>降序 (DESC)</strong> 排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ORDER BY &lt;排序列&gt; [ASC|DESC]</span><br></pre></td></tr></table></figure><blockquote><p>ORDER BY 子句只能对最终查询结果排序。不能对内层查询使用。</p></blockquote><h4 id="1-1-4-聚集函数"><a href="#1-1-4-聚集函数" class="headerlink" title="1.1.4 聚集函数"></a>1.1.4 聚集函数</h4><table><thead><tr><th>聚集函数</th><th>描述</th></tr></thead><tbody><tr><td><code>COUNT(*)</code></td><td>统计记录行数</td></tr><tr><td><code>COUNT([DISTINCT]&lt;列名&gt;)</code></td><td>统计列中值个数</td></tr><tr><td><code>SUM([DISTINCT]&lt;列名&gt;)</code></td><td>计算列值总和</td></tr><tr><td><code>AVG([DISTINCT]&lt;列名&gt;)</code></td><td>计算列值平均值</td></tr><tr><td><code>MAX([DISTINCT]&lt;列名&gt;)</code></td><td>求列值最大值</td></tr><tr><td><code>MIN([DISTINCT]&lt;列名&gt;)</code></td><td>求列值最小值</td></tr></tbody></table><blockquote><p>注意：<br>①只有COUNT(*)计算空值，其余聚集函数都跳过空值。<br>②WHERE 子句中不能用聚集函数，聚集函数只能用于 SELECT 子句和 GROUP BY 中的 HAVING 子句。</p></blockquote><h4 id="1-1-5-分组查询：GROUP-BY"><a href="#1-1-5-分组查询：GROUP-BY" class="headerlink" title="1.1.5 分组查询：GROUP BY"></a>1.1.5 分组查询：GROUP BY</h4><p>GROUP BY 子句将查询结果按某一列或多列的值分组，值相等的为一组。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GROUP BY &lt;分组列&gt; HAVING &lt;分组条件&gt;</span><br></pre></td></tr></table></figure><blockquote><p>分组的目的是为了细化聚集函数的作用对象，分组后聚集函数将作用于每一个组，即每一组都有一个聚集函数值。</p></blockquote><p><strong>WHERE 子句与 HAVING 子句区别</strong>：<br>①WHERE 子句作用于基本表/视图，不能使用聚集函数。<br>②HAVING 子句作用于组。</p><h3 id="1-2-连接查询"><a href="#1-2-连接查询" class="headerlink" title="1.2 连接查询"></a>1.2 连接查询</h3><p>连接查询：使用连接运算符实现多表查询 </p><h4 id="1-2-1-交叉连接"><a href="#1-2-1-交叉连接" class="headerlink" title="1.2.1 交叉连接"></a>1.2.1 交叉连接</h4><p>交叉连接：笛卡儿积。</p><p>①隐式连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;目标列&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;表<span class="number">1</span>&gt;, &lt;表<span class="number">2</span>&gt;</span><br></pre></td></tr></table></figure><p>②使用 <code>JOIN</code> 连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;目标列&gt;</span><br><span class="line">FROM &lt;表1&gt; CROSS JOIN &lt;表2&gt;</span><br></pre></td></tr></table></figure><blockquote><p>消除笛卡尔积：使用关联字段。 </p></blockquote><h4 id="1-2-2-内连接"><a href="#1-2-2-内连接" class="headerlink" title="1.2.2 内连接"></a>1.2.2 内连接</h4><p>内连接：查询与连接条件匹配的所有行，但不去除重复属性列。</p><p>①隐式连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;目标列&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;表<span class="number">1</span>&gt;, &lt;表<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">WHERE</span> &lt;表<span class="number">1</span>&gt;.&lt;关联属性&gt; &lt;比较运算符&gt; &lt;表<span class="number">2</span>&gt;.&lt;关联属性&gt;</span><br></pre></td></tr></table></figure><p>②使用 <code>JOIN</code> 连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;目标列&gt;</span><br><span class="line">FROM &lt;表1&gt; [INNER] JOIN &lt;表2&gt; </span><br><span class="line">ON &lt;表1&gt;.&lt;关联属性&gt; &lt;比较运算符&gt; &lt;表2&gt;.&lt;关联属性&gt;</span><br></pre></td></tr></table></figure><p><strong>1.等值连接</strong></p><p>等值连接：当比较运算符为<code>=</code>时的内连接，不去除重复属性列。</p><p>①隐式连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;目标列&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;表<span class="number">1</span>&gt;, &lt;表<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">WHERE</span> &lt;表<span class="number">1</span>&gt;.&lt;关联属性&gt; = &lt;表<span class="number">2</span>&gt;.&lt;关联属性&gt;</span><br></pre></td></tr></table></figure><p>②使用 <code>JOIN</code> 连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;目标列&gt;</span><br><span class="line">FROM &lt;表1&gt; [INNER] JOIN &lt;表2&gt; </span><br><span class="line">ON &lt;表1&gt;.&lt;关联属性&gt; = &lt;表2&gt;.&lt;关联属性&gt;</span><br></pre></td></tr></table></figure><p><strong>2.非等值连接</strong></p><p>非等值连接：当比较运算符<strong>不为</strong><code>=</code>时的内连接，不去除重复属性列。</p><p>①隐式连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;目标列&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;表<span class="number">1</span>&gt;, &lt;表<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">WHERE</span> &lt;表<span class="number">1</span>&gt;.&lt;关联属性&gt; &lt;比较运算符&gt; &lt;表<span class="number">2</span>&gt;.&lt;关联属性&gt;</span><br></pre></td></tr></table></figure><p>②使用 <code>JOIN</code> 连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;目标列&gt;</span><br><span class="line">FROM &lt;表1&gt; [INNER] JOIN &lt;表2&gt; </span><br><span class="line">ON &lt;表1&gt;.&lt;关联属性&gt; &lt;比较运算符&gt; &lt;表2&gt;.&lt;关联属性&gt;</span><br></pre></td></tr></table></figure><p>3.自身连接</p><p>自身连接：一个表与其自身进行等值连接。</p><p>①隐式连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;目标列&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;表&gt; FIR, &lt;表<span class="number">2</span>&gt; SEC</span><br><span class="line"><span class="keyword">WHERE</span> FIR.&lt;关联属性&gt; = SEC.&lt;关联属性&gt;</span><br></pre></td></tr></table></figure><p>②使用 <code>JOIN</code> 连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;目标列&gt;</span><br><span class="line">FROM &lt;表&gt; FIR [INNER] JOIN &lt;表2&gt; SEC</span><br><span class="line">ON FIR.&lt;关联属性&gt; = SEC.&lt;关联属性&gt;</span><br></pre></td></tr></table></figure><p>4.自然连接</p><p>自然连接：去除重复属性列的等值连接，消除了笛卡儿积。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM &lt;表1&gt; NATURAL JOIN &lt;表2&gt;</span><br></pre></td></tr></table></figure><h4 id="1-2-3-外连接"><a href="#1-2-3-外连接" class="headerlink" title="1.2.3 外连接"></a>1.2.3 外连接</h4><p>外连接：主表内容全部显示。未匹配到，用NULL填充。</p><p><strong>1.左外连接</strong></p><p>左外连接：以左表为主表，右表为从表。即使右表中没有匹配，也返回左表所有行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;目标列&gt;</span><br><span class="line">FROM &lt;表1&gt; LEFT [OUTER] JOIN &lt;表2&gt;</span><br><span class="line">ON &lt;表1&gt;.&lt;关联属性&gt; = &lt;表2&gt;.&lt;关联属性&gt;</span><br></pre></td></tr></table></figure><p><strong>Oracle特有写法</strong>：从表以 <code>(+)</code> 表示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;目标列&gt;</span><br><span class="line">FROM &lt;表1&gt;, &lt;表2&gt;</span><br><span class="line">WHERE &lt;表1&gt;.&lt;关联属性&gt; = &lt;表2&gt;.&lt;关联属性&gt;(+)</span><br></pre></td></tr></table></figure><p><strong>2.右外连接</strong></p><p>右外连接：以右表为主表，左表为从表。即使左表中没有匹配，也返回右表所有行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;目标列&gt;</span><br><span class="line">FROM &lt;表1&gt; RIGHT [OUTER] JOIN &lt;表2&gt;</span><br><span class="line">ON &lt;表1&gt;.&lt;关联属性&gt; = &lt;表2&gt;.&lt;关联属性&gt;</span><br></pre></td></tr></table></figure><p><strong>Oracle特有写法</strong>：从表以 <code>(+)</code> 表示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;目标列&gt;</span><br><span class="line">FROM &lt;表1&gt;, &lt;表2&gt;</span><br><span class="line">WHERE &lt;表1&gt;.&lt;关联属性&gt;(+) = &lt;表2&gt;.&lt;关联属性&gt;</span><br></pre></td></tr></table></figure><p><strong>3.全外连接</strong></p><p>全外连接：返回左表和右表中的所有数据。未匹配字段显示为NULL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;目标列&gt;</span><br><span class="line">FROM &lt;表1&gt; FULL [OUTER] JOIN &lt;表2&gt;</span><br><span class="line">ON &lt;表1&gt;.&lt;关联属性&gt; = &lt;表2&gt;.&lt;关联属性&gt;</span><br></pre></td></tr></table></figure><h4 id="1-2-4-指定关联字段"><a href="#1-2-4-指定关联字段" class="headerlink" title="1.2.4 指定关联字段"></a>1.2.4 指定关联字段</h4><p>①隐式连接-使用WHERE子句指定关联字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;目标列&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;表<span class="number">1</span>&gt;, &lt;表<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">WHERE</span> &lt;表<span class="number">1</span>&gt;.&lt;关联属性&gt; &lt;比较运算符&gt; &lt;表<span class="number">2</span>&gt;.&lt;关联属性&gt;</span><br></pre></td></tr></table></figure><p>②JOIN连接-使用<code>ON</code>指定关联字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;目标列&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;表<span class="number">1</span>&gt; <span class="keyword">JOIN</span> &lt;表<span class="number">2</span>&gt; </span><br><span class="line"><span class="keyword">ON</span> &lt;表<span class="number">1</span>&gt;.&lt;关联属性&gt; &lt;比较运算符&gt; &lt;表<span class="number">2</span>&gt;.&lt;关联属性&gt;</span><br></pre></td></tr></table></figure><p>③JOIN连接-使用<code>USING</code>指定关联字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;目标列&gt;</span><br><span class="line">FROM &lt;表1&gt; JOIN &lt;表2&gt; </span><br><span class="line">USING (&lt;关联属性&gt;)</span><br></pre></td></tr></table></figure><blockquote><p>USING等价于ON指定<strong>等值同名</strong>的关联字段。</p></blockquote><h3 id="1-3-子查询"><a href="#1-3-子查询" class="headerlink" title="1.3 子查询"></a>1.3 子查询</h3><p>查询块：临时表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;目标列&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;表&gt;</span><br><span class="line"><span class="keyword">WHERE</span> &lt;查询条件&gt;</span><br></pre></td></tr></table></figure><h4 id="1-3-1-嵌套查询"><a href="#1-3-1-嵌套查询" class="headerlink" title="1.3.1 嵌套查询"></a>1.3.1 嵌套查询</h4><p>嵌套查询：将一个查询块嵌套在另一个查询块的WHERE/HAVING条件子句中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;目标列&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;表&gt;</span><br><span class="line"><span class="keyword">WHERE</span> &lt;列名&gt; &lt;运算符/谓词&gt; </span><br><span class="line">(<span class="keyword">SELECT</span> &lt;目标列&gt;</span><br><span class="line"> <span class="keyword">FROM</span> &lt;表&gt;</span><br><span class="line"> <span class="keyword">WHERE</span> &lt;查询条件&gt;)</span><br></pre></td></tr></table></figure><p><strong>1.带有比较运算符的子查询</strong></p><p>当子查询返回单值时，可以使用<strong>比较运算符</strong>连接。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;目标列&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;表&gt;</span><br><span class="line"><span class="keyword">WHERE</span> &lt;列名&gt; &lt;比较运算符&gt;</span><br><span class="line">(<span class="keyword">SELECT</span> &lt;目标列&gt;</span><br><span class="line"> <span class="keyword">FROM</span> &lt;表&gt;</span><br><span class="line"> <span class="keyword">WHERE</span> &lt;查询条件&gt;)</span><br></pre></td></tr></table></figure><blockquote><p>比较运算符：<code>&gt;</code>，<code>&lt;</code>，<code>&gt;=</code>，<code>&lt;=</code>，<code>!=</code>，<code>&lt;&gt;</code>，<code>=</code></p></blockquote><p><strong>2.带有IN的子查询</strong></p><p>当子查询返回一个集合时，一般使用<strong>IN</strong>进行连接。IN在嵌套查询中最为常用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;目标列&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;表&gt;</span><br><span class="line"><span class="keyword">WHERE</span> &lt;列名&gt; <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> &lt;目标列&gt;</span><br><span class="line"> <span class="keyword">FROM</span> &lt;表&gt;</span><br><span class="line"> <span class="keyword">WHERE</span> &lt;查询条件&gt;)</span><br></pre></td></tr></table></figure><p><strong>3.带有ANY或ALL的子查询</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;目标列&gt;</span><br><span class="line">FROM &lt;表&gt;</span><br><span class="line">WHERE &lt;列名&gt; &lt;比较运算符&gt;ANY</span><br><span class="line">(SELECT &lt;目标列表达式&gt;</span><br><span class="line"> FROM &lt;表&gt;</span><br><span class="line"> WHERE &lt;查询条件&gt;)</span><br></pre></td></tr></table></figure><blockquote><p>&lt;比较运算符&gt;ALL：与子查询结果的<strong>所有值</strong>进行比较运算。<br>&lt;比较运算符&gt;ANY：与子查询结果的<strong>任意某个值</strong>进行比较运算。</p></blockquote><h4 id="1-3-2-派生查询"><a href="#1-3-2-派生查询" class="headerlink" title="1.3.2 派生查询"></a>1.3.2 派生查询</h4><p>派生查询：将一个查询块嵌套在另一个查询块的FROM子句中，子查询生成的派生表成为了主查询的查询对象。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;目标列&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;表&gt;, (<span class="keyword">SELECT</span> &lt;目标列&gt; <span class="keyword">FROM</span> &lt;表&gt; <span class="keyword">WHERE</span> &lt;查询条件&gt;) [<span class="keyword">AS</span>] &lt;别名&gt;</span><br><span class="line"><span class="keyword">WHERE</span> &lt;查询条件&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：必须为子查询生成的派生表指定别名。</p></blockquote><h3 id="1-4-集合查询"><a href="#1-4-集合查询" class="headerlink" title="1.4 集合查询"></a>1.4 集合查询</h3><p>集合查询：多个查询结果进行集合运算。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;目标列&gt; <span class="keyword">FROM</span> &lt;表&gt; <span class="keyword">WHERE</span> &lt;查询条件&gt;</span><br><span class="line">&lt;集合运算谓词&gt;</span><br><span class="line"><span class="keyword">SELECT</span> &lt;目标列&gt; <span class="keyword">FROM</span> &lt;表&gt; <span class="keyword">WHERE</span> &lt;查询条件&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：参加集合操作的<strong>各查询结果的列数</strong>必须相同，<strong>对应项的数据类型</strong>也必须相同。</p></blockquote><table><thead><tr><th>集合运算</th><th>谓词</th></tr></thead><tbody><tr><td>并集（去重复）</td><td><code>UNION</code></td></tr><tr><td>并集（不去重复）</td><td><code>UNION ALL</code></td></tr><tr><td>交集</td><td><code>INTERSECT</code></td></tr><tr><td>差集</td><td><code>MINUS</code></td></tr></tbody></table><h2 id="2-SQL更新"><a href="#2-SQL更新" class="headerlink" title="2. SQL更新"></a>2. SQL更新</h2><h3 id="2-1-SQL插入：INSERT"><a href="#2-1-SQL插入：INSERT" class="headerlink" title="2.1 SQL插入：INSERT"></a>2.1 SQL插入：INSERT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;表&gt; (列名, 列名...) <span class="keyword">VALUES</span>(值, 值...)</span><br></pre></td></tr></table></figure><p>INSERT简写-按表的列顺序插入一行数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;表&gt; <span class="keyword">VALUES</span>(值, 值...)</span><br></pre></td></tr></table></figure><h3 id="2-2-SQL修改：UPDATE"><a href="#2-2-SQL修改：UPDATE" class="headerlink" title="2.2 SQL修改：UPDATE"></a>2.2 SQL修改：UPDATE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> &lt;表&gt; <span class="keyword">SET</span> 列名 = 值, 列名 = 值... </span><br><span class="line">[<span class="keyword">WHERE</span> &lt;修改条件&gt;]</span><br></pre></td></tr></table></figure><h3 id="2-3-SQL删除：DELETE"><a href="#2-3-SQL删除：DELETE" class="headerlink" title="2.3 SQL删除：DELETE"></a>2.3 SQL删除：DELETE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> &lt;表&gt; </span><br><span class="line">[<span class="keyword">WHERE</span> &lt;删除条件&gt;]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!--# Database | DQL&amp;DML--&gt;
&lt;p&gt;SQL（Structured Query Language，结构化查询语言），面向集合的描述性非过程化语言，用于访问和处理关系数据库的标准语言。&lt;br&gt;SQL 是一种 ANSI 标准，所以存在多种不同版本的 SQL 语言。但就 SQL 查询和更新而言，Oracle、MySql 等数据库系统的实现大同小异，基本可以互通移植。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DQL（Data Query Language，数据查询语言），即 SQL 查询，DQL 语句即 &lt;code&gt;SELECT&lt;/code&gt; 查询块。&lt;/li&gt;
&lt;li&gt;DML（Data Manipulation Language，数据操作语言），即 SQL 更新，DML 语句即 &lt;code&gt;INSERT&lt;/code&gt; 插入、&lt;code&gt;UPDATE&lt;/code&gt; 更新、&lt;code&gt;DELETE&lt;/code&gt; 删除。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="DataBase" scheme="https://liziczh.com/categories/DataBase/"/>
    
    
      <category term="Oracle" scheme="https://liziczh.com/tags/Oracle/"/>
    
      <category term="Database" scheme="https://liziczh.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="https://liziczh.com/markdown-grammer.html"/>
    <id>https://liziczh.com/markdown-grammer.html</id>
    <published>2018-05-07T07:46:55.000Z</published>
    <updated>2018-06-23T02:58:31.879Z</updated>
    
    <content type="html"><![CDATA[<!--# Markdown 语法--><p>Markdown是一种简单的、用于文本排版的轻量级标记语言，它使用简洁的语法代替排版，让作者更专注于作品的内容。并且允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的HTML文档，非常适用于网络书写。</p><a id="more"></a><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题 h1</span></span><br><span class="line"><span class="section">## 二级标题 h2</span></span><br><span class="line"><span class="section">### 三级标题 h3</span></span><br><span class="line"><span class="section">#### 四级标题 h4</span></span><br><span class="line"><span class="section">##### 五级标题 h5</span></span><br><span class="line"><span class="section">###### 六级标题 h6</span></span><br></pre></td></tr></table></figure><p><strong>效果</strong>：</p><h1 id="一级标题-h1"><a href="#一级标题-h1" class="headerlink" title="一级标题 h1"></a>一级标题 h1</h1><h2 id="二级标题-h2"><a href="#二级标题-h2" class="headerlink" title="二级标题 h2"></a>二级标题 h2</h2><h3 id="三级标题-h3"><a href="#三级标题-h3" class="headerlink" title="三级标题 h3"></a>三级标题 h3</h3><h4 id="四级标题-h4"><a href="#四级标题-h4" class="headerlink" title="四级标题 h4"></a>四级标题 h4</h4><h5 id="五级标题-h5"><a href="#五级标题-h5" class="headerlink" title="五级标题 h5"></a>五级标题 h5</h5><h6 id="六级标题-h6"><a href="#六级标题-h6" class="headerlink" title="六级标题 h6"></a>六级标题 h6</h6><h2 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**Bold**</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">__Bold__</span></span><br></pre></td></tr></table></figure><p><strong>效果</strong>：</p><p><strong>Blod</strong></p><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*italic*</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">_italic_</span></span><br></pre></td></tr></table></figure><p><strong>效果</strong>：</p><p><em>italic</em></p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~delete~~</span><br></pre></td></tr></table></figure><p><strong>效果</strong>：</p><p><del>delete</del></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">***</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><p><strong>效果</strong>：</p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 引用</span></span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 谁家玉笛暗飞声，</span></span><br><span class="line"><span class="quote">&gt; 散入春风满洛城。</span></span><br><span class="line"><span class="quote">&gt; 此夜曲中闻折柳，</span></span><br><span class="line"><span class="quote">&gt; 何人不起故园情。</span></span><br></pre></td></tr></table></figure><p><strong>效果</strong>：</p><blockquote><p>谁家玉笛暗飞声，<br>散入春风满洛城。<br>此夜曲中闻折柳，<br>何人不起故园情。 </p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`code`</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`&lt;br/&gt;`</span></span><br></pre></td></tr></table></figure><p><strong>效果</strong>：</p><p><code>&lt;br/&gt;</code></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><hr><p>```type<br>codeblock<br>```</p><hr><p><strong>示例</strong>：</p><hr><p>```java<br>public class HelloWorld {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String[] args) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(“HelloWorld”);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>```</p><hr><p><strong>效果</strong>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWorld &#123;</span><br><span class="line"><span class="code">public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="code">System.out.println("HelloWorld");</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Alt</span>](<span class="link">http://</span>)</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">示例图片</span>](<span class="link">http://p6uturdzt.bkt.clouddn.com/markdown-logo.jpg</span>)</span><br></pre></td></tr></table></figure><p><strong>效果</strong>：</p><p><img src="http://p6uturdzt.bkt.clouddn.com/markdown-logo.jpg" alt="示例图片"></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Link</span>](<span class="link">http://</span>)</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">百度</span>](<span class="link">http://www.baidu.com</span>)</span><br></pre></td></tr></table></figure><p><strong>效果</strong>：</p><p><a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a></p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>Red</span><br><span class="line"><span class="bullet">- </span>Green</span><br><span class="line"><span class="bullet">- </span>Blue</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+ </span>Red</span><br><span class="line"><span class="bullet">+ </span>Green</span><br><span class="line"><span class="bullet">+ </span>Blue</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Red</span><br><span class="line"><span class="bullet">* </span>Green</span><br><span class="line"><span class="bullet">* </span>Blue</span><br></pre></td></tr></table></figure><p><strong>效果</strong>：</p><ul><li>Red</li><li>Green</li><li>Blue</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>Red</span><br><span class="line"><span class="bullet">2. </span>Green</span><br><span class="line"><span class="bullet">3. </span>Blue</span><br></pre></td></tr></table></figure><p><strong>效果</strong>：</p><ol><li>Red</li><li>Green</li><li>Blue</li></ol><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 列名 | 列名 |</span><br><span class="line">| ---- | ---- |</span><br><span class="line">| 表项 | 表项 |</span><br><span class="line">| 表项 | 表项 |</span><br></pre></td></tr></table></figure><p><strong>效果</strong>：</p><table><thead><tr><th>列名</th><th>列名</th></tr></thead><tbody><tr><td>表项</td><td>表项</td></tr><tr><td>表项</td><td>表项</td></tr></tbody></table><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;nbsp; //半角空格（英文）</span><br><span class="line">&amp;emsp; //全角空格（中文）</span><br></pre></td></tr></table></figure><h2 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>居中文本<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="锚-页内跳转"><a href="#锚-页内跳转" class="headerlink" title="锚-页内跳转"></a>锚-页内跳转</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[跳转到锚点](#jump)</span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">"jump"</span>&gt;</span>锚点<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">目录</span><br><span class="line">[<span class="string">1.Java入门</span>](<span class="link">#1</span>)</span><br><span class="line">[<span class="string">2.Java基础</span>](<span class="link">#2</span>)</span><br><span class="line">正文</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">1</span>&gt;</span></span>1.Java入门<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">some_text......</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">2</span>&gt;</span></span>2.Java基础<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">some_text......</span><br></pre></td></tr></table></figure><p><strong>效果</strong>：</p><p>目录</p><p><a href="#1">1.Java入门</a></p><p><a href="#2">2.Java基础</a></p><p>正文</p><p><span id="1">1.Java入门</span></p><p>some_text……</p><p><span id="2">2.Java基础</span></p><p>some_text……</p>]]></content>
    
    <summary type="html">
    
      &lt;!--# Markdown 语法--&gt;
&lt;p&gt;Markdown是一种简单的、用于文本排版的轻量级标记语言，它使用简洁的语法代替排版，让作者更专注于作品的内容。并且允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的HTML文档，非常适用于网络书写。&lt;/p&gt;
    
    </summary>
    
      <category term="Markdown" scheme="https://liziczh.com/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="https://liziczh.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Git | QuickStart</title>
    <link href="https://liziczh.com/git-quickstart.html"/>
    <id>https://liziczh.com/git-quickstart.html</id>
    <published>2018-04-30T15:56:55.000Z</published>
    <updated>2018-07-26T06:22:42.659Z</updated>
    
    <content type="html"><![CDATA[<!--# Git QuickStart--><p>Git 是目前世界上最流行的分布式版本控制系统。它速度快，简单，采用完全分布式，可高效管理代码，对非线性开发模式提供强力支持。</p><a id="more"></a><p>Git 诞生于一个极富纷争的年代。起因是 Linus 创建了开源的 Linux，在 2002 年以前，Linux 的内核维护工作主要是由世界各地的志愿者将源码文件通过 diff 方式发给 Linus，然后由Linus本人手工合并代码。到了 2002 年，Linux 代码库之大已经很难通过手工方式管理，于是 Linus 选择了分布式版本控制系统 BitKeeper 管理和维护代码。2005 年，BitKeeper 与 Linux开源社区的合作关系结束，迫使 Linux 开源社区不得不开发一套属于自己的版本控制系统。于是，Linus 花了两周时间用 C 写了一个分布式版本控制系统Git，一个月之内 Linux 源码已经由 Git 进行管理了。</p><h2 id="0-Git-基本操作"><a href="#0-Git-基本操作" class="headerlink" title="0. Git 基本操作"></a>0. Git 基本操作</h2><h3 id="0-1-创建一个新的仓库"><a href="#0-1-创建一个新的仓库" class="headerlink" title="0.1 创建一个新的仓库"></a>0.1 创建一个新的仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git init</span><br><span class="line"><span class="meta">$</span> git add .</span><br><span class="line"><span class="meta">$</span> git commit -m "initial commit"</span><br><span class="line"><span class="meta">$</span> git remote add origin &lt;url&gt;</span><br><span class="line"><span class="meta">$</span> git push origin master</span><br></pre></td></tr></table></figure><h3 id="0-2-记录每次更新到远程仓库"><a href="#0-2-记录每次更新到远程仓库" class="headerlink" title="0.2 记录每次更新到远程仓库"></a>0.2 记录每次更新到远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git add .</span><br><span class="line"><span class="meta">$</span> git commit -m "initial commit"</span><br><span class="line"><span class="meta">$</span> git push origin master</span><br></pre></td></tr></table></figure><h2 id="1-Git-配置"><a href="#1-Git-配置" class="headerlink" title="1. Git 配置"></a>1. Git 配置</h2><h3 id="1-1-配置用户信息"><a href="#1-1-配置用户信息" class="headerlink" title="1.1 配置用户信息"></a>1.1 配置用户信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git配置用户名</span><br><span class="line"><span class="meta">$</span> git config --global user.name "username"</span><br><span class="line"><span class="meta">#</span> git配置用户邮箱</span><br><span class="line"><span class="meta">$</span> git config --global user.email useremail@example.com</span><br></pre></td></tr></table></figure><h3 id="1-1-查看配置信息"><a href="#1-1-查看配置信息" class="headerlink" title="1.1 查看配置信息"></a>1.1 查看配置信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config --list</span><br></pre></td></tr></table></figure><h2 id="2-Git-本地仓库"><a href="#2-Git-本地仓库" class="headerlink" title="2. Git 本地仓库"></a>2. Git 本地仓库</h2><h3 id="2-1-创建本地仓库"><a href="#2-1-创建本地仓库" class="headerlink" title="2.1 创建本地仓库"></a>2.1 创建本地仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git初始化本地仓库</span><br><span class="line"><span class="meta">$</span> git init</span><br></pre></td></tr></table></figure><p>将当前所在目录初始化为一个本地仓库。初始化完成后，在当前目录下会出现一个名为 <code>.git</code> 的目录，所有 Git 需要的数据和资源都存放在这个目录中，切记不要手动修改该目录下的任何文件。</p><h3 id="2-2-克隆远程仓库到本地"><a href="#2-2-克隆远程仓库到本地" class="headerlink" title="2.2 克隆远程仓库到本地"></a>2.2 克隆远程仓库到本地</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 克隆远程仓库的默认分支</span><br><span class="line"><span class="meta">$</span> git clone &lt;url&gt;</span><br><span class="line"><span class="meta">#</span> 克隆远程仓库的指定分支</span><br><span class="line"><span class="meta">$</span> git clone -b &lt;branch-name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><blockquote><p>git支持多种数据传输协议：</p><ul><li>ssh协议：<code>user@server:/path.git</code></li><li>https协议： <code>http(s)://</code> </li><li>git协议： <code>git://</code> </li></ul></blockquote><h2 id="3-Git-版本控制"><a href="#3-Git-版本控制" class="headerlink" title="3. Git 版本控制"></a>3. Git 版本控制</h2><p><strong>git 工作流程</strong>：</p><p><img src="http://p6uturdzt.bkt.clouddn.com/git-filestream.png" alt="git版本控制"></p><h3 id="3-1-查看文件状态"><a href="#3-1-查看文件状态" class="headerlink" title="3.1 查看文件状态"></a>3.1 查看文件状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看仓库文件状态</span><br><span class="line"><span class="meta">$</span> git status</span><br></pre></td></tr></table></figure><p><strong>git 文件状态变化</strong>：</p><p><img src="http://p6uturdzt.bkt.clouddn.com/git-filestatus.png" alt="git文件状态"></p><h3 id="3-2-暂存修改"><a href="#3-2-暂存修改" class="headerlink" title="3.2 暂存修改"></a>3.2 暂存修改</h3><p><code>git add</code> ：①跟踪未跟踪文件，②将已跟踪文件放入暂存区。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 跟踪所有文件，暂存所有修改</span><br><span class="line"><span class="meta">$</span> git add .</span><br><span class="line"><span class="meta">#</span> 跟踪某个文件，暂存某个文件修改</span><br><span class="line"><span class="meta">$</span> git add &lt;file-name&gt;</span><br></pre></td></tr></table></figure><h3 id="3-3-撤销文件修改"><a href="#3-3-撤销文件修改" class="headerlink" title="3.3 撤销文件修改"></a>3.3 撤销文件修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 撤销文件修改</span><br><span class="line"><span class="meta">$</span> git checkout --&lt;file&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-提交更新"><a href="#3-4-提交更新" class="headerlink" title="3.4 提交更新"></a>3.4 提交更新</h3><p><code>git commit</code> ：将本次更新全部提交到本地仓库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 提交已暂存更新</span><br><span class="line"><span class="meta">$</span> git commit -m "提交说明"</span><br><span class="line"><span class="meta">#</span> 暂存并提交更新</span><br><span class="line"><span class="meta">$</span> git commit -am "提交说明"</span><br></pre></td></tr></table></figure><h3 id="3-5-查看提交日志"><a href="#3-5-查看提交日志" class="headerlink" title="3.5 查看提交日志"></a>3.5 查看提交日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看提交日志</span><br><span class="line"><span class="meta">$</span> git log</span><br></pre></td></tr></table></figure><h3 id="3-6-版本回退"><a href="#3-6-版本回退" class="headerlink" title="3.6 版本回退"></a>3.6 版本回退</h3><p><strong>1. 软回退</strong>：只回退commit信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git reset --soft HEAD^</span><br></pre></td></tr></table></figure><p><strong>2. 默认回退</strong>：回退commit和index信息，只保留本地源码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git reset --mixed HEAD^</span><br></pre></td></tr></table></figure><p><strong>3. 硬回退</strong>：commit、index信息、本地源码全部回退。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git reset --hard HEAD^</span><br></pre></td></tr></table></figure><blockquote><p>版本的表示方式：</p><ul><li><code>HEAD^</code> 上一版本，<code>HEAD^^</code> 上上个版本 …… </li><li><code>HEAD~n</code>：上n个版本</li><li><code>&lt;commit_id&gt;</code>：某个指定版本</li></ul></blockquote><h2 id="4-Git-远程仓库"><a href="#4-Git-远程仓库" class="headerlink" title="4. Git 远程仓库"></a>4. Git 远程仓库</h2><h3 id="4-1-添加远程仓库"><a href="#4-1-添加远程仓库" class="headerlink" title="4.1 添加远程仓库"></a>4.1 添加远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 添加一个远程仓库</span><br><span class="line"><span class="meta">$</span> git remote add &lt;remote-name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2-移除远程仓库"><a href="#4-2-移除远程仓库" class="headerlink" title="4.2 移除远程仓库"></a>4.2 移除远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 移除某个远程仓库</span><br><span class="line"><span class="meta">$</span> git remote rm &lt;remote-name&gt;</span><br></pre></td></tr></table></figure><h3 id="4-3-重命名远程仓库"><a href="#4-3-重命名远程仓库" class="headerlink" title="4.3 重命名远程仓库"></a>4.3 重命名远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 重命名远程仓库</span><br><span class="line"><span class="meta">$</span> git remote rename &lt;old-name&gt; &lt;new-name&gt;</span><br></pre></td></tr></table></figure><h3 id="4-4-查看远程仓库"><a href="#4-4-查看远程仓库" class="headerlink" title="4.4 查看远程仓库"></a>4.4 查看远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看所有远程仓库</span><br><span class="line"><span class="meta">$</span> git remote -v</span><br></pre></td></tr></table></figure><h3 id="4-5-从远程仓库抓取数据"><a href="#4-5-从远程仓库抓取数据" class="headerlink" title="4.5 从远程仓库抓取数据"></a>4.5 从远程仓库抓取数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 从远程仓库抓取数据</span><br><span class="line"><span class="meta">$</span> git fetch &lt;remote-name&gt;</span><br></pre></td></tr></table></figure><h3 id="4-6-推送数据到远程仓库"><a href="#4-6-推送数据到远程仓库" class="headerlink" title="4.6 推送数据到远程仓库"></a>4.6 推送数据到远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 推送数据到远程仓库</span><br><span class="line"><span class="meta">$</span> git push &lt;remote-name&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="5-Git-分支"><a href="#5-Git-分支" class="headerlink" title="5. Git 分支"></a>5. Git 分支</h2><p>Git 分支原理：每一个分支存在一个分支指针，分支指针指向不同版本；<br>Git 分支切换：HEAD 指针指向某个分支指针；</p><h3 id="5-1-创建分支"><a href="#5-1-创建分支" class="headerlink" title="5.1 创建分支"></a>5.1 创建分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 创建一个分支</span><br><span class="line"><span class="meta">$</span> git branch &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h3 id="5-2-切换分支"><a href="#5-2-切换分支" class="headerlink" title="5.2 切换分支"></a>5.2 切换分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 切换分支</span><br><span class="line"><span class="meta">$</span> git checked &lt;branch-name&gt;</span><br><span class="line"><span class="meta">#</span>  创建并切换到该分支</span><br><span class="line"><span class="meta">$</span> git checked -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h3 id="5-3-合并分支"><a href="#5-3-合并分支" class="headerlink" title="5.3 合并分支"></a>5.3 合并分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 合并分支</span><br><span class="line"><span class="meta">$</span> git merge &lt;other-branch&gt;</span><br></pre></td></tr></table></figure><h3 id="5-4-删除分支"><a href="#5-4-删除分支" class="headerlink" title="5.4 删除分支"></a>5.4 删除分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 删除分支</span><br><span class="line"><span class="meta">$</span> git branch -d &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h3 id="5-5-查看分支"><a href="#5-5-查看分支" class="headerlink" title="5.5 查看分支"></a>5.5 查看分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看所有分支</span><br><span class="line"><span class="meta">$</span> git branch -v</span><br></pre></td></tr></table></figure><h2 id="6-GitHub-Fork"><a href="#6-GitHub-Fork" class="headerlink" title="6. GitHub Fork"></a>6. GitHub Fork</h2><p>Fork即派生项目。在GitHub社区中可以Fork任意开源仓库。Fork之后，GitHub 将在你的空间中创建一个项目副本，你对项目副本拥有读写权限。并且可以推送pull request给官方仓库贡献代码。</p><p><strong>Fork 流程</strong>：</p><ol><li>从 master 分支中创建一个新分支</li><li>提交一些修改到新分支来改进项目</li><li>将这个分支推送到 GitHub 上</li><li>创建一个合并请求(Pull Request)</li><li>项目的拥有者合并或关闭你的合并请求</li></ol><h2 id="7-gitignore"><a href="#7-gitignore" class="headerlink" title="7. gitignore"></a>7. gitignore</h2><p>.gitignore文件规范：</p><ul><li><code>#</code>：注释</li><li><code>!</code>：取反</li><li><code>*</code>：任意长度字符</li><li><code>?</code>：匹配单个字符</li><li><code>[abc]</code>：匹配方括号中的任意单个字符</li><li><code>[0-9]</code>：匹配两个字符之间的任意字符</li><li><code>**</code>：匹配任意中间目录</li><li>以<code>/</code>开头防止递归</li><li>以<code>/</code>结尾指定目录</li></ul><blockquote><p>参考资料：<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener">GitBook</a>；</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!--# Git QuickStart--&gt;
&lt;p&gt;Git 是目前世界上最流行的分布式版本控制系统。它速度快，简单，采用完全分布式，可高效管理代码，对非线性开发模式提供强力支持。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://liziczh.com/categories/Git/"/>
    
    
      <category term="Git" scheme="https://liziczh.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo | （四）多机同步更新博客</title>
    <link href="https://liziczh.com/hexo-multimachine.html"/>
    <id>https://liziczh.com/hexo-multimachine.html</id>
    <published>2018-04-21T14:00:07.000Z</published>
    <updated>2018-07-03T01:04:14.463Z</updated>
    
    <content type="html"><![CDATA[<!--# Hexo | 多机同步更新博客--><p>Hexo博客存在一个问题：我们仅仅将博客的静态页面文件部署到了github远程仓库中，而我们的站点源文件仍在本地存储。如果存储站点源文件的电脑系统崩溃了，或者我们换了其他电脑，我们便无法实时更新博客了。<br>如果选择重新搭建站点，不仅过程繁琐，而且还需要大量时间安装依赖、主题配置、博客优化，极其麻烦。所以我们需要将站点必要文件也部署到github远程仓库中。<br>我们采取的远程仓库部署策略是：一个仓库两个分支。仓库即[yourname.github.io]，一个分支[master]用于托管演示页面，一个分支[backup]用于备份Hexo博客站点的必要文件。</p><a id="more"></a><h2 id="多机同步更新的前提：backup分支"><a href="#多机同步更新的前提：backup分支" class="headerlink" title="多机同步更新的前提：backup分支"></a>多机同步更新的前提：backup分支</h2><p>Hexo博客站点的必要文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">├──</span> <span class="string">scaffolds</span>    <span class="comment"># 文章模板</span></span><br><span class="line"><span class="string">├──</span> <span class="string">source</span>       <span class="comment"># 用户源文件：页面，文章markdown文件</span></span><br><span class="line"><span class="string">├──</span> <span class="string">themes</span>       <span class="comment"># 主题</span></span><br><span class="line"><span class="string">├──</span> <span class="string">.gitignore</span>   <span class="comment"># git忽略文件信息</span></span><br><span class="line"><span class="string">├──</span> <span class="string">_config.yml</span>  <span class="comment"># 站点配置文件</span></span><br><span class="line"><span class="string">├──</span> <span class="string">package.json</span> <span class="comment"># 已安装插件映射表，下次只需npm install即直接安装表中的插件</span></span><br><span class="line"><span class="string">├──</span> <span class="string">package-lock.json</span></span><br></pre></td></tr></table></figure><p>编辑<strong>站点根目录</strong>下的<code>.gitignore</code>文件，使Git上传时忽略不必要的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><p>1.删除<code>themes\你的主题</code>中的<code>.git</code>，<code>.github</code>，<code>.gitignore</code>等git仓库文件，只保留站点根目录下的<code>.gitignore</code>。</p><p>2.在Hexo博客站点根目录（即blog文件夹）中GitBash：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 将blog作为一个git仓库进行初始化</span><br><span class="line"><span class="meta">$</span> git init  </span><br><span class="line"><span class="meta">#</span> 创建/切换hexo分支</span><br><span class="line"><span class="meta">$</span> git checkout -b backup  </span><br><span class="line"><span class="meta">#</span> 将文件添加到暂存区</span><br><span class="line"><span class="meta">$</span> git add .  </span><br><span class="line"><span class="meta">#</span> 将暂存区文件提交到本地仓库</span><br><span class="line"><span class="meta">$</span> git commit -m "提交说明"  </span><br><span class="line"><span class="meta">#</span> 添加远程仓库</span><br><span class="line"><span class="meta">$</span> git remote add origin https://github.com/yourname/yourname.github.io.git</span><br><span class="line"><span class="meta">#</span> 将本地仓库推送至远程仓库</span><br><span class="line"><span class="meta">$</span> git push origin backup</span><br></pre></td></tr></table></figure><h2 id="多机同步更新博客"><a href="#多机同步更新博客" class="headerlink" title="多机同步更新博客"></a>多机同步更新博客</h2><h3 id="1-安装前提"><a href="#1-安装前提" class="headerlink" title="1.安装前提"></a>1.安装前提</h3><p>(1) 安装Git<br>(2) 安装nodejs</p><h3 id="2-博客还原"><a href="#2-博客还原" class="headerlink" title="2.博客还原"></a>2.博客还原</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 克隆hexo分支到本地</span><br><span class="line"><span class="meta">$</span> git clone -b backup https://github.com/yourname/yourname.github.io.git</span><br><span class="line"><span class="meta">#</span> 进入yourname.github.io文件夹</span><br><span class="line"><span class="meta">$</span> cd yourname.github.io</span><br><span class="line"><span class="meta">#</span> 安装hexo</span><br><span class="line"><span class="meta">$</span> npm install hexo --save</span><br><span class="line"><span class="meta">#</span> 安装hexo命令行模式</span><br><span class="line"><span class="meta">$</span> npm install hexo-cli -g</span><br><span class="line"><span class="meta">#</span> 安装所有依赖，根据package.json自动安装之前安装过的插件</span><br><span class="line"><span class="meta">$</span> npm install</span><br></pre></td></tr></table></figure><h3 id="3-配置网络协议"><a href="#3-配置网络协议" class="headerlink" title="3.配置网络协议"></a>3.配置网络协议</h3><p>(1) SSH协议，长期部署推荐SSH，一劳永逸。</p><p>①SSH秘钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 生成rsa秘钥</span><br><span class="line"><span class="meta">$</span> ssh-keygen -t rsa -C "youremail@example.com"</span><br><span class="line"><span class="meta">#</span> 进入虚拟目录ssh文件中</span><br><span class="line"><span class="meta">$</span> cd ~/.ssh</span><br><span class="line"><span class="meta">#</span> 显示id_rsa.pub文件内容</span><br><span class="line"><span class="meta">$</span> cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>②复制秘钥至github/coding-&gt;用户setting-&gt;SSH keys，New SSH Key；</p><p>③验证是否添加成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh -T git@github.com  # 验证github是否添加成功</span><br><span class="line"><span class="meta">$</span> ssh -T git@coding.net  # 验证coding是否添加成功</span><br></pre></td></tr></table></figure><p>④编辑<strong>站点配置文件</strong><code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> </span><br><span class="line"><span class="attr">github:</span> <span class="string">git@github.com:yourname/yourname.github.io.git</span> </span><br><span class="line"><span class="attr">coding:</span> <span class="string">git@git.coding.net:yourname/yourname.coding.me.git</span> </span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>⑤添加远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git remote add origin git@github.com:yourname/yourname.github.io.git</span><br></pre></td></tr></table></figure><p>(2) HTTPS协议，临时部署推荐HTTPS。</p><p>①直接编辑<strong>站点配置文件</strong><code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> </span><br><span class="line"><span class="attr">github:</span> <span class="attr">https://github.com/yourname/yourname.github.io.git</span></span><br><span class="line">    <span class="attr">coding:</span> <span class="attr">https://git.coding.net/yourname/yourname.coding.me.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>②验证github/coding用户名和密码。</p><p>③添加远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git remote add origin https://github.com/yourname/yourname.github.io.git</span><br></pre></td></tr></table></figure><h3 id="4-正常使用"><a href="#4-正常使用" class="headerlink" title="4.正常使用"></a>4.正常使用</h3><p>重新部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo clean</span><br><span class="line"><span class="meta">$</span> hexo g -d</span><br></pre></td></tr></table></figure><p>上传至hexo分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git add .</span><br><span class="line"><span class="meta">$</span> git commit -m "commit-message"</span><br><span class="line"><span class="meta">$</span> git push origin backup</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!--# Hexo | 多机同步更新博客--&gt;
&lt;p&gt;Hexo博客存在一个问题：我们仅仅将博客的静态页面文件部署到了github远程仓库中，而我们的站点源文件仍在本地存储。如果存储站点源文件的电脑系统崩溃了，或者我们换了其他电脑，我们便无法实时更新博客了。&lt;br&gt;如果选择重新搭建站点，不仅过程繁琐，而且还需要大量时间安装依赖、主题配置、博客优化，极其麻烦。所以我们需要将站点必要文件也部署到github远程仓库中。&lt;br&gt;我们采取的远程仓库部署策略是：一个仓库两个分支。仓库即[yourname.github.io]，一个分支[master]用于托管演示页面，一个分支[backup]用于备份Hexo博客站点的必要文件。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo博客" scheme="https://liziczh.com/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo博客" scheme="https://liziczh.com/tags/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo | （三）URL优化&amp;站点提交</title>
    <link href="https://liziczh.com/hexo-submit.html"/>
    <id>https://liziczh.com/hexo-submit.html</id>
    <published>2018-04-21T11:01:32.000Z</published>
    <updated>2018-06-19T10:05:11.858Z</updated>
    
    <content type="html"><![CDATA[<!--# Hexo | （三）URL优化&站点提交--><p>在站点搭建完成之后，搜索引擎是无法搜索到我们自己的网站的。如果想要在搜索引擎中搜索到自己的博客，我们就需要将自己的站点提交给搜索引擎。<br>在站点提交之前，为了方便搜索引擎的爬虫爬取网页，我们需要先优化一下自己网站的URL。</p><a id="more"></a><h2 id="URL优化"><a href="#URL优化" class="headerlink" title="URL优化"></a>URL优化</h2><p>一个好的URL设计，不仅有利于网络爬虫的爬取，更有利于用户的体验。</p><p>正确的URL设计应该满足：长度尽量短，目录层次尽量少，全小写，连字符使用中划线<code>-</code>，具有描述性，包含关键词等。</p><h3 id="文章URL优化"><a href="#文章URL优化" class="headerlink" title="文章URL优化"></a>文章URL优化</h3><p><strong>文章URL优化策略（一）</strong>：自定义id属性</p><p>1.为每篇文章Front-matter添加id属性，作为文章URL，确保id属性的值满足以上条件。</p><p>2.编辑<strong>站点配置文件</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># permalink: :year/:month/:day/:title.html  # 默认永久链接冗长，title中存在中文字符。</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:id.html</span> <span class="comment"># 尽量短，层次少，全小写，中划线连字，具有描述性，包含关键词</span></span><br></pre></td></tr></table></figure><p><strong>文章URL优化策略（二）</strong>：abbrlink链接唯一化</p><p>1.安装abbrlink插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>2.编辑<strong>站点配置文件</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:abbrlink.html</span>   <span class="comment"># 生成唯一链接</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line"><span class="attr">  alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line"><span class="attr">  rep:</span> <span class="string">dec</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure><h3 id="标签-amp-分类URL优化"><a href="#标签-amp-分类URL优化" class="headerlink" title="标签&amp;分类URL优化"></a>标签&amp;分类URL优化</h3><p>我们在对文章分类或添加标签时，难免会用到中文或其他字符，而我们又在尽量避免中文字符出现在URL中，所以我们需要对中文分类&amp;标签进行映射操作。</p><p>编辑<strong>站点配置文件</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分类名映射</span></span><br><span class="line"><span class="attr">category_map:</span>  </span><br><span class="line">  <span class="string">生活:</span> <span class="string">life</span></span><br><span class="line">  <span class="string">其他:</span> <span class="string">other</span></span><br><span class="line"><span class="comment"># 标签名映射</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line">  <span class="string">生活:</span> <span class="string">life</span></span><br><span class="line">  <span class="string">其他:</span> <span class="string">other</span></span><br></pre></td></tr></table></figure><h2 id="站点提交"><a href="#站点提交" class="headerlink" title="站点提交"></a>站点提交</h2><h3 id="谷歌站点提交"><a href="#谷歌站点提交" class="headerlink" title="谷歌站点提交"></a>谷歌站点提交</h3><p>谷歌搜索<a href="https://www.google.com/webmasters/tools/submit-url?hl=zh-CN" target="_blank" rel="noopener">将您的网址添加到 Google 索引中</a>，键入网址，提交请求即可。</p><p>验证是否被谷歌收录：<code>site:example.com</code>；</p><h3 id="百度站点提交"><a href="#百度站点提交" class="headerlink" title="百度站点提交"></a>百度站点提交</h3><h4 id="1-验证是否被百度收录"><a href="#1-验证是否被百度收录" class="headerlink" title="1.验证是否被百度收录"></a><strong>1.验证是否被百度收录</strong></h4><p>打开百度，输入<code>site:&lt;域名&gt;</code>，验证是否被百度收录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:example.com</span><br></pre></td></tr></table></figure><h4 id="2-链接提交"><a href="#2-链接提交" class="headerlink" title="2.链接提交"></a><strong>2.链接提交</strong></h4><p>若未被收录，点击“提交网址”。登录<a href="https://ziyuan.baidu.com/linksubmit/url" target="_blank" rel="noopener">百度站长平台</a>，链接提交，输入<code>&lt;域名&gt;</code>。<br>注意：不要输入github.io的域名，github不允许百度爬虫爬取。</p><h4 id="3-验证网站所有权"><a href="#3-验证网站所有权" class="headerlink" title="3.验证网站所有权"></a><strong>3.验证网站所有权</strong></h4><p>验证方式有三种：文件验证、HTML标签验证和CNAME验证，任选一种验证成功即可。</p><p><strong>(1)文件验证</strong>：下载验证文件 (一个存放着token信息的html文件) ，将验证文件置于网站根目录下（blog/source/或者theme/next/）。</p><p><strong>(2)HTML标签验证</strong>：将以下代码添加到你的网站首页HTML代码的<code>&lt;head&gt;&lt;/head&gt;</code>中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mate</span> <span class="attr">name</span>=<span class="string">"baidu-site-verification"</span> <span class="attr">content</span>=<span class="string">"你的token"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>(3)CNAME验证</strong>：如果你绑定了自己的域名，只需添加一条CNAME域名解析记录：</p><table><thead><tr><th>记录类型</th><th>主机记录</th><th>记录值</th></tr></thead><tbody><tr><td>CNAME</td><td>你的token</td><td>ziyuan.baidu.com</td></tr></tbody></table><p>推荐使用<strong>CNAME验证</strong>或<strong>文件验证</strong>。</p><p>为使您的网站一直保持验证通过的状态，请保留验证的文件、html标签或CNAME记录，百度可能会去定期检查验证记录。</p><h4 id="4-生成网站地图"><a href="#4-生成网站地图" class="headerlink" title="4.生成网站地图"></a><strong>4.生成网站地图</strong></h4><p>编辑<strong>站点配置文件</strong>，确保url是你的域名地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="attr">https://&lt;你的域名&gt;</span></span><br></pre></td></tr></table></figure><p>安装sitemap插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-generator-sitemap --save   # 安装谷歌站点地图插件</span><br><span class="line"><span class="meta">$</span> npm install hexo-generator-baidu-sitemap --save  # 安装百度站点地图插件</span><br><span class="line"><span class="meta">$</span> hexo g  # 生成sitemap.xml和baidusitemap.xml</span><br></pre></td></tr></table></figure><h4 id="5-链接提交"><a href="#5-链接提交" class="headerlink" title="5.链接提交"></a>5.链接提交</h4><blockquote><p>如何选择链接提交方式？<br>①主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。<br>②自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。<br>③sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。<br>④手动提交：一次性提交链接给百度，可以使用此种方式。</p><p>效率：主动推送&gt;自动推送&gt;sitemap</p></blockquote><p><strong>使用submit插件实现主动推送</strong>：</p><p>1.安装百度提交插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><p>2.编辑<strong>站点配置文件</strong>，配置以下信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line"><span class="attr">  count:</span> <span class="number">3</span>  <span class="comment"># 提交最新链接数</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">&lt;域名&gt;</span>  <span class="comment"># 你所提交的域名</span></span><br><span class="line"><span class="attr">  token:</span> <span class="string">yourtoken</span> <span class="comment"># 秘钥，请不要发布在公众仓库中</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">baidu_urls.txt</span> <span class="comment"># 文本文档路径，新链接会保存在此文本文档中</span></span><br></pre></td></tr></table></figure><p>3.编辑<strong>站点配置文件</strong>，为deploy新增一个type：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">baidu_url_submitter</span>  <span class="comment"># 为deploy新增一个type</span></span><br></pre></td></tr></table></figure><p><strong>自动推送</strong>：</p><p>若主题已经集成了自动推送的JS代码，直接在<strong>主题配置文件</strong>中设置百度推送属性即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如next主题：直接将baidu_push置true即可</span></span><br><span class="line"><span class="attr">baidu_push:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果主题没有集成自动推送的JS代码，插入主题中layout下的<strong>head</strong>文件中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 主题不同，可能路径不同，但大都类似于以下路径</span><br><span class="line">blog\themes\你的主题\layout\_partial\head.ejs</span><br></pre></td></tr></table></figure><p>emmmmmm…..<br>推送之后，大概一个礼拜左右 (百度贼慢) ，你就可以在百度搜索到你的博客了。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--# Hexo | （三）URL优化&amp;站点提交--&gt;
&lt;p&gt;在站点搭建完成之后，搜索引擎是无法搜索到我们自己的网站的。如果想要在搜索引擎中搜索到自己的博客，我们就需要将自己的站点提交给搜索引擎。&lt;br&gt;在站点提交之前，为了方便搜索引擎的爬虫爬取网页，我们需要先优化一下自己网站的URL。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo博客" scheme="https://liziczh.com/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo博客" scheme="https://liziczh.com/tags/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo | （二）Next主题个性化设置</title>
    <link href="https://liziczh.com/hexo-next-settings.html"/>
    <id>https://liziczh.com/hexo-next-settings.html</id>
    <published>2018-04-12T00:34:58.000Z</published>
    <updated>2018-06-19T09:49:26.085Z</updated>
    
    <content type="html"><![CDATA[<!--# Hexo系列 | （二）Next主题个性化设置--><p>NexT is a high quality elegant <a href="http://hexo.io/" target="_blank" rel="noopener">Hexo</a> theme. It is crafted from scratch, with love.</p><h2 id="Live-Preview"><a href="#Live-Preview" class="headerlink" title="Live Preview"></a>Live Preview</h2><ul><li>Muse scheme: <a href="https://leaferx.online/" target="_blank" rel="noopener">LEAFERx</a> | <a href="https://notes.wanghao.work/" target="_blank" rel="noopener">XiaMo</a> | <a href="https://oawan.me/" target="_blank" rel="noopener">OAwan</a></li><li>Mist scheme: <a href="https://blog.zzbd.org/" target="_blank" rel="noopener">Jeff</a> | <a href="http://uchuhimo.me/" target="_blank" rel="noopener">uchuhimo</a> | <a href="http://www.ixirong.com/" target="_blank" rel="noopener">xirong</a></li><li>Pisces scheme: <a href="http://notes.iissnan.com/" target="_blank" rel="noopener">Vi</a> | <a href="https://acris.me/" target="_blank" rel="noopener">Acris</a> | <a href="https://rainylog.com/" target="_blank" rel="noopener">Rainy</a></li><li>Gemini scheme: <a href="https://almostover.ru/" target="_blank" rel="noopener">Ivan.Nginx</a> | <a href="https://raincal.com/" target="_blank" rel="noopener">Raincal</a> | <a href="https://dandyxu.me/" target="_blank" rel="noopener">Dandy</a></li></ul><a id="more"></a><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>区分配置文件：</p><table><thead><tr><th>配置文件</th><th>路径</th></tr></thead><tbody><tr><td><strong>站点配置文件</strong></td><td><code>D:/blog/_config.yml</code></td></tr><tr><td><strong>主题配置文件</strong></td><td><code>D:/blog/themes/next/_config.yml</code></td></tr></tbody></table><h2 id="设置RSS"><a href="#设置RSS" class="headerlink" title="设置RSS"></a>设置RSS</h2><p>1.安装RSS插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>2.编辑<strong>站点配置文件</strong>，添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#RSS订阅</span></span><br><span class="line"><span class="attr">plugin:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>3.编辑<strong>主题配置文件</strong>，将rss字段置空。</p><h2 id="主题风格"><a href="#主题风格" class="headerlink" title="主题风格"></a>主题风格</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Scheme 主题风格</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure><p>四个主题风格，自行选择，消去注释即生效。</p><h2 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span>                  <span class="comment"># 主页</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span>             <span class="comment"># 标签</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span>   <span class="comment"># 分类</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span>  <span class="comment"># 归档</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span>           <span class="comment"># 关于我</span></span><br><span class="line"><span class="comment"># schedule: /schedule/ || calendar # 安排</span></span><br><span class="line"><span class="comment"># sitemap: /sitemap.xml || sitemap # 站点地图</span></span><br><span class="line"><span class="comment"># commonweal: /404/ || heartbeat   # 404公益</span></span><br></pre></td></tr></table></figure><h2 id="添加-标签-、-分类-、-关于-页面"><a href="#添加-标签-、-分类-、-关于-页面" class="headerlink" title="添加[标签]、[分类]、[关于]页面"></a>添加[标签]、[分类]、[关于]页面</h2><p>只有<strong>文章</strong>（post）支持[标签]和[分类]。</p><p>1.添加[tags]、[categoies]、[about]页面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new page "tags"</span><br><span class="line"><span class="meta">$</span> hexo new page "categories"</span><br><span class="line"><span class="meta">$</span> hexo new page "about"</span><br></pre></td></tr></table></figure><p>2.在source文件夹中找到新建页面：<br>①编辑tags.md：添加<code>layout:&quot;tags&quot;</code><br>②编辑categories.md：添加<code>layout:&quot;categories&quot;</code><br>③编辑about.md，自行发挥。</p><p>3.匹配<strong>站点配置文件</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br></pre></td></tr></table></figure><p>4.匹配<strong>主题配置文件</strong>中<code>menu</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about</span></span><br></pre></td></tr></table></figure><p>5.Front-matter中的[tags]写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">tag_1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">tag_2</span></span><br><span class="line"><span class="comment"># 标签之间相互独立</span></span><br></pre></td></tr></table></figure><p>6.Front-matter中的[categories]写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">运动</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[运动,</span> <span class="string">球类运动]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[运动,</span> <span class="string">球类运动,</span> <span class="string">网球]</span></span><br><span class="line"><span class="comment"># 类别存在层级关系</span></span><br></pre></td></tr></table></figure><h2 id="添加自定义页面"><a href="#添加自定义页面" class="headerlink" title="添加自定义页面"></a>添加自定义页面</h2><p>1.添加自定义页面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new page "customPage"</span><br></pre></td></tr></table></figure><p>2.匹配<strong>主题配置文件</strong>中的<code>menu</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about</span>               </span><br><span class="line"><span class="attr">  customPage:</span> <span class="string">/customPage</span>    <span class="comment"># 键值对匹配</span></span><br></pre></td></tr></table></figure><p>3.在source中找到customPage.md文件，根据需求自行编辑。</p><p>##添加更新时间</p><p>编辑<strong>主题配置文件</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  created_at:</span> <span class="literal">true</span>   <span class="comment"># 创建时间</span></span><br><span class="line"><span class="attr">  updated_at:</span> <span class="literal">true</span>   <span class="comment"># 更新时间</span></span><br><span class="line">  <span class="comment"># Only show 'updated' if different from 'created'.</span></span><br><span class="line"><span class="attr">  updated_diff:</span> <span class="literal">false</span> <span class="comment"># 只使用更新时间</span></span><br><span class="line">  <span class="comment"># If true, post's time format will be hexo config's date_format + ' ' + time_format.</span></span><br><span class="line"><span class="attr">  date_time_merge:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="阅读全文"><a href="#阅读全文" class="headerlink" title="阅读全文"></a>阅读全文</h2><p>在文章合适的位置添加<code>&lt;!-- more --&gt;</code>，Hexo推荐使用。</p><h2 id="设置favicon图标"><a href="#设置favicon图标" class="headerlink" title="设置favicon图标"></a>设置favicon图标</h2><p>1.将favicon.png放到<code>themes\next\image</code>文件夹下</p><p>2.<strong>主题配置文件</strong>更改图片路径：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line"><span class="attr">  small:</span> <span class="string">/images/favicon-16x16.png</span>         <span class="comment"># 小图标：16x16</span></span><br><span class="line"><span class="attr">  medium:</span> <span class="string">/images/favicon-32x32.png</span>        <span class="comment"># 大图标：32x32</span></span><br><span class="line"><span class="attr">  apple_touch_icon:</span> <span class="string">/images/favicon.png</span>    <span class="comment"># apple图标大图</span></span><br><span class="line"><span class="attr">  safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br></pre></td></tr></table></figure><h2 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h2><p>1.将头像图片avatar.png放到<code>themes\next\image</code>文件夹下</p><p>2.<strong>主题配置文件</strong>更改图片路径：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span> <span class="string">/images/avatar.png</span>  <span class="comment"># avater图片路径</span></span><br></pre></td></tr></table></figure><h2 id="社交账号"><a href="#社交账号" class="headerlink" title="社交账号"></a>社交账号</h2><p>编辑<strong>主题配置文件</strong>，自行添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/yourname</span> <span class="string">||</span> <span class="string">github-icon</span></span><br><span class="line"><span class="attr">  E-Mail:</span> <span class="attr">mailto:youremail</span> <span class="string">||</span> <span class="string">envelope-icon</span></span><br><span class="line">  <span class="string">Weibo：</span> <span class="attr">https://weibo.com/yourname</span></span><br></pre></td></tr></table></figure><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p>编辑<strong>主题配置文件</strong>，自行添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">links_icon:</span> <span class="string">link</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">Links</span></span><br><span class="line"><span class="comment">#links_layout: block    #块状布局，选一个注一个</span></span><br><span class="line"><span class="attr">links_layout:</span> <span class="string">inline</span>    <span class="comment">#行内布局，选一个注一个</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line"><span class="attr">  Github:</span> <span class="attr">https://www.github.com</span></span><br><span class="line">  <span class="string">知乎:</span> <span class="attr">https://www.zhihu.com</span></span><br></pre></td></tr></table></figure><h2 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h2><p>编辑<strong>主题配置文件</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reward</span></span><br><span class="line"><span class="attr">reward_comment:</span> <span class="string">求打赏文本</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.png</span>  <span class="comment"># 微信收款二维码 图片路径</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/images/alipay.png</span>        <span class="comment"># 支付宝收款二维码 图片路径</span></span><br><span class="line"><span class="comment">#bitcoin: /images/bitcoin.png     # 比特币</span></span><br></pre></td></tr></table></figure><h2 id="文章版权信息"><a href="#文章版权信息" class="headerlink" title="文章版权信息"></a>文章版权信息</h2><p>编辑<strong>主题配置文件</strong>，启用copyright服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="访客-amp-访问量"><a href="#访客-amp-访问量" class="headerlink" title="访客&amp;访问量"></a>访客&amp;访问量</h2><p>NexT主题中已经集成了<strong>不蒜子统计</strong>，直接编辑主题配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span>              <span class="comment"># 开启busuanzi数据统计</span></span><br><span class="line"><span class="attr">  total_visitors:</span> <span class="literal">true</span>      <span class="comment"># 访客</span></span><br><span class="line"><span class="attr">  total_visitors_icon:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  total_views:</span> <span class="literal">true</span>         <span class="comment"># 访问量</span></span><br><span class="line"><span class="attr">  total_views_icon:</span> <span class="string">eye</span></span><br><span class="line"><span class="attr">  post_views:</span> <span class="literal">true</span>          <span class="comment"># 文章阅读次数</span></span><br><span class="line"><span class="attr">  post_views_icon:</span> <span class="string">eye</span></span><br></pre></td></tr></table></figure><h2 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h2><p>1.登录百度统计，添加域名。若更换域名，需重新绑定。</p><p>2.复制 <code>hm.js?</code> 后面那串统计脚本 id：<br><img src="http://p6uturdzt.bkt.clouddn.com/next-baidu_analytics.PNG" alt="百度统计"></p><p>3.编辑<strong>主题配置文件</strong>，添加<strong>脚本id</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Baidu Analytics ID</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">脚本id</span></span><br></pre></td></tr></table></figure><h2 id="文章字数统计"><a href="#文章字数统计" class="headerlink" title="文章字数统计"></a>文章字数统计</h2><p>1.安装字数统计插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><p>2.编辑<strong>主题配置文件</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span>     </span><br><span class="line"><span class="attr">  item_text_post:</span> <span class="literal">true</span>     <span class="comment"># 文章字数</span></span><br><span class="line"><span class="attr">  item_text_total:</span> <span class="literal">true</span>    <span class="comment"># 本站所有文章字数</span></span><br><span class="line"><span class="attr">  awl:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">  wpm:</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><h3 id="来必力"><a href="#来必力" class="headerlink" title="来必力"></a>来必力</h3><p>1.登陆 <a href="https://livere.com/" target="_blank" rel="noopener">来必力</a> 获取你的 LiveRe UID。</p><p>2.编辑<strong>主题配置文件</strong>，添加LiveRe UID：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">livere_uid:</span> <span class="comment">#你的LiveRe UID</span></span><br></pre></td></tr></table></figure><p>3.记住将可评论文档的顶部属性中<code>comments: true</code></p><h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><h3 id="jiathis分享"><a href="#jiathis分享" class="headerlink" title="jiathis分享"></a>jiathis分享</h3><p>编辑<strong>主题配置文件</strong>，添加jiathis_uid：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jiathis:</span></span><br><span class="line"><span class="attr">  uid:</span> <span class="number">2160658</span></span><br></pre></td></tr></table></figure><h3 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h3><p>编辑<strong>主题配置文件</strong>，设置baidushare：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidushare:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">button</span>       <span class="comment"># type: button | slide</span></span><br></pre></td></tr></table></figure><h2 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h2><h3 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h3><p>1.安装local search插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>2.编辑站点配置文件，新增以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>3.编辑主题配置文件，启用local search功能：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="修改文章底部标签"><a href="#修改文章底部标签" class="headerlink" title="修改文章底部标签[#]"></a>修改文章底部标签[#]</h2><p>1.打开编辑<code>themes\next\layout\_macro\post.swig</code></p><p>2.<code>Ctrl+F</code>找到<code>rel=&quot;tag&quot;&gt;#</code></p><p>3.将<code>#</code>替换为<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h2 id="文章底部添加”本文结束”"><a href="#文章底部添加”本文结束”" class="headerlink" title="文章底部添加”本文结束”"></a>文章底部添加”本文结束”</h2><p>打开编辑<code>themes\next\layout\_macro\post.swig</code>，在文章结束的地方添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if not is_index %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span></span><br><span class="line">---------Thanks for your attention---------</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><img src="http://p6uturdzt.bkt.clouddn.com/next-page_end.PNG" alt="本文结束"></p><h2 id="添加访客-amp-访问量描述"><a href="#添加访客-amp-访问量描述" class="headerlink" title="添加访客&amp;访问量描述"></a>添加访客&amp;访问量描述</h2><p>打开编辑<code>themes\next\layout\_third-party\analytics\busuanzi-counter.swig</code>：</p><p><img src="http://p6uturdzt.bkt.clouddn.com/next-visitor.PNG" alt="添加访客&amp;访问量描述"></p><h2 id="添加Host-by描述"><a href="#添加Host-by描述" class="headerlink" title="添加Host-by描述"></a>添加Host-by描述</h2><p>最近，银牌会员的Coding Pages在访问时会加载广告，需要在网站首页任意位置放置「Hosted by Coding Pages」，通过审核将取消广告。</p><p>打开编辑<code>themes/next/layout/_partials/footer.swig</code>，在<strong>文件末尾</strong>添加如下代码，将「Hosted by Coding Pages」置于页面底部。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.footer.powered.enable and theme.footer.theme.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"copyright"</span>&gt;</span></span><br><span class="line">    Hosted by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://pages.coding.me"</span>&gt;</span>Coding Pages<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &amp;&amp;nbsp;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://pages.github.com"</span>&gt;</span>GitHub Pages<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="DaoVoice实现在线联系"><a href="#DaoVoice实现在线联系" class="headerlink" title="DaoVoice实现在线联系"></a>DaoVoice实现在线联系</h2><p>1.首先在<a href="http://dashboard.daovoice.io/get-started?invite_code=bcc0de9a" target="_blank" rel="noopener">DaoVoice</a>注册一个账号，注册完成后在[应用设置]-[安装到网站]中找到app_id。</p><p>2.打开编辑<code>themes/next/layout/_partials/head/head.swig</code>，添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.daovoice %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  (function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0f81ff2f.js","daovoice")</span></span><br><span class="line"><span class="undefined">  daovoice('init', &#123;</span></span><br><span class="line"><span class="undefined">      app_id: "&#123;&#123;theme.daovoice_app_id&#125;&#125;"</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  daovoice('update');</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>3.编辑<strong>主题配置文件</strong>，添加如下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DaoVoice</span></span><br><span class="line"><span class="attr">daovoice:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">daovoice_app_id:</span> <span class="string">yourapp_id</span></span><br></pre></td></tr></table></figure><p>4.设置DaoVoice页面样式</p><p><img src="http://p6uturdzt.bkt.clouddn.com/next-daovoice.png" alt="daovoice"></p><p>5.在[应用设置]-[添加微信]中绑定微信，关注小程序，即可实时收发消息。</p><h2 id="修改Pisces主题宽度"><a href="#修改Pisces主题宽度" class="headerlink" title="修改Pisces主题宽度"></a>修改Pisces主题宽度</h2><p>打开编辑<code>themes\next\source\css\_schemes\Pisces\_layout.styl</code>，在底部添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 以下为新增代码！！</span><br><span class="line">header&#123; width: 90% !important; &#125;</span><br><span class="line">header.post-header &#123;</span><br><span class="line">  width: auto !important;</span><br><span class="line">&#125;</span><br><span class="line">.container .main-inner &#123; width: 90%; &#125;</span><br><span class="line">.content-wrap &#123; width: calc(100% - 260px); &#125;</span><br><span class="line"></span><br><span class="line">.header &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    width: auto !important;</span><br><span class="line">  &#125;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    width: auto !important;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.container .main-inner &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    width: auto !important;</span><br><span class="line">  &#125;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    width: auto !important;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content-wrap &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    width: 100% !important;</span><br><span class="line">  &#125;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    width: 100% !important;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考资料：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">next主题|使用文档</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!--# Hexo系列 | （二）Next主题个性化设置--&gt;
&lt;p&gt;NexT is a high quality elegant &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; theme. It is crafted from scratch, with love.&lt;/p&gt;
&lt;h2 id=&quot;Live-Preview&quot;&gt;&lt;a href=&quot;#Live-Preview&quot; class=&quot;headerlink&quot; title=&quot;Live Preview&quot;&gt;&lt;/a&gt;Live Preview&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Muse scheme: &lt;a href=&quot;https://leaferx.online/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LEAFERx&lt;/a&gt; | &lt;a href=&quot;https://notes.wanghao.work/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XiaMo&lt;/a&gt; | &lt;a href=&quot;https://oawan.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OAwan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mist scheme: &lt;a href=&quot;https://blog.zzbd.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jeff&lt;/a&gt; | &lt;a href=&quot;http://uchuhimo.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;uchuhimo&lt;/a&gt; | &lt;a href=&quot;http://www.ixirong.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;xirong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pisces scheme: &lt;a href=&quot;http://notes.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vi&lt;/a&gt; | &lt;a href=&quot;https://acris.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Acris&lt;/a&gt; | &lt;a href=&quot;https://rainylog.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rainy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gemini scheme: &lt;a href=&quot;https://almostover.ru/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ivan.Nginx&lt;/a&gt; | &lt;a href=&quot;https://raincal.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Raincal&lt;/a&gt; | &lt;a href=&quot;https://dandyxu.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dandy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Hexo博客" scheme="https://liziczh.com/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo博客" scheme="https://liziczh.com/tags/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo | （一）使用Hexo+Pages搭建个人博客</title>
    <link href="https://liziczh.com/hexo-blog-build.html"/>
    <id>https://liziczh.com/hexo-blog-build.html</id>
    <published>2018-04-11T02:57:46.000Z</published>
    <updated>2018-06-27T11:03:47.366Z</updated>
    
    <content type="html"><![CDATA[<!--# Hexo | （一）使用Hexo+Pages搭建个人博客--><p>本篇主要介绍使用Hexo+Pages搭建个人博客的流程。使用 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 博客框架搭建，解析markdown文章，生成静态页面，将页面托管到 <a href="https://github.com" target="_blank" rel="noopener">github</a>  / <a href="https://coding.net" target="_blank" rel="noopener">coding</a> 服务器上。<a href="https://github.com" target="_blank" rel="noopener">github</a>  / <a href="https://coding.net" target="_blank" rel="noopener">coding</a> 都有pages 服务，提供免费的静态网页托管和演示服务。</p><a id="more"></a><p>搭建步骤：</p><ol><li>安装git，nodejs</li><li>安装hexo</li><li>本地搭建站点（线下访问）</li><li>部署到github/coding（线上访问）</li><li>站点配置</li></ol><h2 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1. 安装hexo"></a>1. 安装hexo</h2><p>1.安装Git 。安装完毕后，在任意文件夹下<strong>鼠标右击</strong>即可打开 Git Bash，输入命令，进行Git操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git version  # 查看Git版本，验证是否安装成功</span><br></pre></td></tr></table></figure><p>2.安装Node.js。Hexo是基于nodejs的博客框架，而且nodejs还集成了npm包管理工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> node -v    # 查看nodejs版本，验证是否安装成功</span><br></pre></td></tr></table></figure><p>3.安装hexo：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo --save   # 安装hexo</span><br><span class="line"><span class="meta">$</span> npm install hexo-cli -g   # 安装hexo命令行模式</span><br><span class="line"><span class="meta">$</span> hexo -v  # 查看hexo版本，验证是否安装成功</span><br></pre></td></tr></table></figure><h2 id="2-hexo建站"><a href="#2-hexo建站" class="headerlink" title="2. hexo建站"></a>2. hexo建站</h2><p>1.新建一个blog文件夹，打开blog文件夹，Git Bash。</p><p>2.hexo初始化：<code>hexo init</code></p><p>3.安装依赖包：<code>npm install</code></p><p>4.初始化完成，在blog下就会生成以下文件目录：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">├──</span> <span class="string">node_modules</span> <span class="comment"># 依赖模块</span></span><br><span class="line"><span class="string">├──</span> <span class="string">scaffolds</span>    <span class="comment"># 文章模板</span></span><br><span class="line"><span class="string">├──</span> <span class="string">source</span>       <span class="comment"># 用户源文件：页面，文章markdown文件</span></span><br><span class="line"><span class="string">|   └── _posts   # 创建的文章</span></span><br><span class="line"><span class="string">└── themes       # 主题</span></span><br><span class="line"><span class="string">├── .gitignore   # git忽略文件信息</span></span><br><span class="line"><span class="string">├── _config.yml  # 站点配置文件</span></span><br><span class="line"><span class="string">├── package.json # 已安装插件映射表，下次只需npm install即直接安装表插件</span></span><br></pre></td></tr></table></figure><p>5.hexo本地生成静态页面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo clean     # 清理本地静态文件；</span><br><span class="line"><span class="meta">$</span> hexo generate  # 生成静态页面，即public文件夹；</span><br><span class="line"><span class="meta">$</span> hexo server    # 启用hexo本地服务器；</span><br><span class="line"><span class="meta">#</span> 注：Hexo 3.0 把服务器独立成了个别模块，您必须先安装 hexo-server 才能使用。</span><br><span class="line"><span class="meta">#</span> hexo-server安装命令：npm install hexo-server --save</span><br></pre></td></tr></table></figure><p>这时，打开浏览器在地址栏输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>即可本地访问静态博客页面。</p><h2 id="3-配置github-coding-pages"><a href="#3-配置github-coding-pages" class="headerlink" title="3. 配置github/coding pages"></a>3. 配置github/coding pages</h2><p>github和coding可以双线配置，也可以选择其中一个配置。推荐双线配置，coding用于国内访问速度较快，github用于境外访问。</p><p>1.登录github，New repository：<code>yourname.github.io</code>。其中<code>yourname</code>是你的github用户名，github强制后缀为<code>github.io</code>才能启用github pages服务。</p><p>2.登录coding，新建仓库：<code>yourname.coding.me</code>，打开静态pages服务。其中yourname是你的coding用户名，coding不强制后缀为coding.me。<br>&nbsp;其中<code>yourname</code>是你的coding用户名，coding不强制后缀为<code>coding.me</code>。</p><p>3.Git Bash配置git用户信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config --global user.name "YourName"</span><br><span class="line"><span class="meta">$</span> git config --global user.email "YourEmail"</span><br></pre></td></tr></table></figure><p>4.配置网络传输协议</p><p>在管理Git项目时，一般使用ssh或https作为安全传输协议，任选其一即可。</p><p>(1) SSH协议</p><p>①SSH秘钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh-keygen -t rsa -C "youremail@example.com"  # 生成rsa秘钥</span><br><span class="line"><span class="meta">$</span> cd ~/.ssh         # 进入虚拟目录ssh文件中</span><br><span class="line"><span class="meta">$</span> cat id_rsa.pub    # 显示id_rsa.pub文件内容</span><br></pre></td></tr></table></figure><p>②复制秘钥至github/coding-&gt;用户setting-&gt;SSH keys，New SSH Key；</p><p>③验证是否添加成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh -T git@github.com  # 验证github是否添加成功</span><br><span class="line"><span class="meta">$</span> ssh -T git@coding.net  # 验证coding是否添加成功</span><br></pre></td></tr></table></figure><p>④编辑<strong>站点配置文件</strong><code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> </span><br><span class="line"><span class="attr">github:</span> <span class="string">git@github.com:yourname/yourname.github.io.git</span> </span><br><span class="line"><span class="attr">coding:</span> <span class="string">git@git.coding.net:yourname/yourname.coding.me.git</span> </span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>(2) HTTPS协议</p><p>①直接编辑<strong>站点配置文件</strong><code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> </span><br><span class="line"><span class="attr">github:</span> <span class="attr">https://github.com/liziczh/liziczh.github.io.git</span></span><br><span class="line">    <span class="attr">coding:</span> <span class="attr">https://git.coding.net/liziczh/liziczh.coding.me.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>②验证github/coding用户名和密码。</p><h2 id="4-部署到github-coding"><a href="#4-部署到github-coding" class="headerlink" title="4. 部署到github/coding"></a>4. 部署到github/coding</h2><p>1.安装Git部署插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>2.部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo clean     # 清理本地静态文件；</span><br><span class="line"><span class="meta">$</span> hexo generate  # 生成静态页面，即public文件夹；</span><br><span class="line"><span class="meta">$</span> hexo deploy    # 部署到github/coding；</span><br></pre></td></tr></table></figure><p>3.部署完毕，站点文件目录如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy_git  # （新增）hexo deploy 生成的git部署文件</span><br><span class="line">├── public       # （新增）hexo generate 生成的静态文件</span><br><span class="line">├── db.json      # （新增）hexo generate 生成的数据</span><br><span class="line">├── node_modules # 依赖模块</span><br><span class="line">├── scaffolds    # 文章模板</span><br><span class="line">├── source       # 用户源文件：页面&amp;文章的markdown文件</span><br><span class="line">|   └── _posts   # 文章</span><br><span class="line">└── themes       # 主题</span><br><span class="line">├── .gitignore   # git时需忽略文件</span><br><span class="line">├── _config.yml  # 站点配置文件</span><br><span class="line">├── package.json # 已安装插件映射表，下次只需npm install即直接安装表插件</span><br></pre></td></tr></table></figure><p>站点搭建完毕，打开浏览器在地址栏输入以下链接可随时访问自己的博客了。</p><ul><li>github pages：<a href="http://yourname.github.io" target="_blank" rel="noopener">http://yourname.github.io</a></li><li>coding pages：<a href="http://yourname.coding.me" target="_blank" rel="noopener">http://yourname.coding.me</a></li></ul><h2 id="5-站点配置"><a href="#5-站点配置" class="headerlink" title="5. 站点配置"></a>5. 站点配置</h2><p>区分配置文件：</p><table><thead><tr><th>配置文件</th><th>路径</th></tr></thead><tbody><tr><td>站点配置文件</td><td><code>D:/blog/_config.yml</code></td></tr><tr><td>主题配置文件</td><td><code>D:/blog/themes/你的主题/_config.yml</code></td></tr></tbody></table><p>打开<strong>站点配置文件</strong><code>blog/_config.yml</code>，自行发挥，配置完毕，重新部署 <code>hexo g -d</code>；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意：yaml语言使用缩进表示层级关系。</span></span><br><span class="line"><span class="comment"># 注意：键值对中的冒号（:）后面有一个半角空格。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站</span></span><br><span class="line"><span class="attr">title:</span> <span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="comment">#网站描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment">#关键字</span></span><br><span class="line"><span class="attr">author:</span> <span class="comment">#你的名字,文档作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="comment">#网站的语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="comment">#时区，中国：Asia/Shanghai</span></span><br><span class="line"><span class="comment"># 网址</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">https://yoursite.com</span>  <span class="comment">#你的网址url</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title.html</span> <span class="comment">#文章永久链接</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="comment"># 主题</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span>  <span class="comment"># 主题文件的名称</span></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> </span><br><span class="line"><span class="attr">    github:</span> <span class="string">git@github.com:yourname/yourname.github.io.git</span>  </span><br><span class="line"><span class="attr">    coding:</span> <span class="string">git@git.coding.net:yourname/yourname.coding.me.git</span> </span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><blockquote><p>详细配置请参考<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">hexo配置</a>，此处不再赘述。</p></blockquote><h2 id="6-主题变更"><a href="#6-主题变更" class="headerlink" title="6. 主题变更"></a>6. 主题变更</h2><p>1.hexo默认主题为landscape，可以到<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes|Hexo</a>选择自己喜欢的主题，复制主题在github仓库的url。<br>   <img src="http://p6uturdzt.bkt.clouddn.com/hexo-clone_theme.PNG" alt="clone theme"><br>2.在themes文件夹下，打开GitBash，克隆主题至themes文件夹中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone https://github.com/theme-next/hexo-theme-next.git</span><br></pre></td></tr></table></figure><p>克隆之后，记住删除<code>themes\你的主题名</code>中的<code>.git</code>，<code>.github</code>，<code>.gitignore</code>等Git仓库文件。</p><p>3.更改<strong>站点配置文件</strong><code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">主题文件名</span></span><br></pre></td></tr></table></figure><p>4.编辑结束，重新部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo clean  # 清理缓存文件；（不清理也可以部署，推荐先清理）</span><br><span class="line"><span class="meta">$</span> hexo g -d   # 生成静态页面后直接部署；</span><br></pre></td></tr></table></figure><p>部署完毕之后，进入以下链接刷新就可以看到你的新主题了。</p><ul><li>github pages：<a href="http://yourname.github.io" target="_blank" rel="noopener">http://yourname.github.io</a></li><li>coding pages：<a href="http://yourname.coding.me" target="_blank" rel="noopener">http://yourname.coding.me</a></li></ul><h2 id="7-写作"><a href="#7-写作" class="headerlink" title="7. 写作"></a>7. 写作</h2><p>1.新建：在blog文件夹下，打开Git Bash，新建文章：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new post "title"</span><br></pre></td></tr></table></figure><p>2.编辑：在<code>source/_post</code>下可以编辑你新建的文章。</p><p>3.编辑完毕，重新部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo clean  # 清理缓存文件；（不清理也可以部署，推荐先清理）</span><br><span class="line"><span class="meta">$</span> hexo g -d   # 生成静态页面后直接部署；</span><br></pre></td></tr></table></figure><h2 id="8-文档的Front-matter"><a href="#8-文档的Front-matter" class="headerlink" title="8. 文档的Front-matter"></a>8. 文档的Front-matter</h2><p>Front-matter 是文档最上方以 <code>---</code> 分隔的区域，用于指定文档一些的参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">yyyy-MM-dd</span> <span class="attr">hh:mm:ss</span></span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 注意：键值对中的冒号（:）后面有一个半角空格。</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>layout</td><td>post<br>page<br>draft<br>false</td><td>文章【默认值】<br>页面<br>草稿<br>不处理</td></tr><tr><td>title</td><td>文本</td><td>标题</td></tr><tr><td>date</td><td>yyyy-MM-dd hh:mm:ss</td><td>文件建立日期</td></tr><tr><td>update</td><td>yyyy-MM-dd hh:mm:ss</td><td>文件更新日期</td></tr><tr><td>comments</td><td>true<br>false</td><td>开启文章评论功能，默认true</td></tr><tr><td>tags</td><td></td><td>标签（只适用于post）</td></tr><tr><td>categories</td><td></td><td>分类（只适用于post）</td></tr><tr><td>permalink</td><td>url</td><td>永久链接</td></tr></tbody></table><blockquote><p>不要处理我的文章：将文章Front-Matter中的<code>layout: false</code>；</p></blockquote><h2 id="9-文章的-标签-与-分类"><a href="#9-文章的-标签-与-分类" class="headerlink" title="9. 文章的[标签]与[分类]"></a>9. 文章的[标签]与[分类]</h2><p>只有<strong>文章</strong>（post）支持[标签]和[分类]。</p><p>1.添加[tags]、[categoies]、[about]页面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new page "tags"</span><br><span class="line"><span class="meta">$</span> hexo new page "categories"</span><br><span class="line"><span class="meta">$</span> hexo new page "about"</span><br></pre></td></tr></table></figure><p>2.在source文件夹中找到新建页面：<br>①编辑tags.md：添加<code>layout:&quot;tags&quot;</code>；<br>②编辑categories.md：添加<code>layout:&quot;categories&quot;</code>；<br>③编辑about.md，自行发挥。</p><p>3.匹配<strong>站点配置文件</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br></pre></td></tr></table></figure><p>4.匹配<strong>主题配置文件</strong>中<code>menu</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about</span></span><br></pre></td></tr></table></figure><p>5.Front-matter中的[tags]写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">tag_1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">tag_2</span></span><br><span class="line"><span class="comment"># 标签之间相互独立</span></span><br></pre></td></tr></table></figure><p>6.Front-matter中的[categories]写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">运动</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[运动,</span> <span class="string">球类运动]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[运动,</span> <span class="string">球类运动,</span> <span class="string">网球]</span></span><br><span class="line"><span class="comment"># 类别存在层级关系</span></span><br></pre></td></tr></table></figure><p>重新部署之后，个人博客的基本功能，写作，标签，分类，归档就全部实现了。</p><h2 id="10-绑定自己的域名"><a href="#10-绑定自己的域名" class="headerlink" title="10. 绑定自己的域名"></a>10. 绑定自己的域名</h2><p>若不喜欢域名后缀为github.io或coding.me，可以自己注册一个域名进行绑定。</p><p>1.域名注册：在<a href="https://wanwang.aliyun.com/?utm_content=se_1101810" target="_blank" rel="noopener">阿里云</a>/<a href="https://dnspod.cloud.tencent.com/?fromSource=gwzcw.185882.185882.185882" target="_blank" rel="noopener">腾讯云</a>等注册一个域名。</p><p>2.添加CNAME文件：在<code>blog\source</code>下，添加一个CNAME文件 (无文件后缀)，内容为你的域名<code>example.com</code>。</p><p>3.Github Pages域名解析：<br>①添加四个<code>A记录</code>：主机记录为<code>@</code>，记录值为<code>185.199.108.153</code>、<code>185.199.109.153</code>、<code>185.199.110.153</code>、<code>185.199.111.153</code>。<br>②添加一个<code>CNAME记录</code>：主机记录为<code>www</code>，记录值为<code>yourname.github.io</code>。</p><p>4.Coding Pages域名解析：<br>①打开控制台<code>ping pages.coding.me</code>，获取IP。<br>②添加一个<code>A记录</code>：主机记录为<code>@</code>，记录值为ping得的IP。<br>③添加一个<code>CNAME记录</code>：主机记录为<code>www</code>，记录值为<code>pages.coding.me</code>。</p><p><img src="http://p6uturdzt.bkt.clouddn.com/hexo-dns.png" alt="dns"></p><p>由于国内访问Github Pages速度较慢，所以我将Coding Pages解析线路设为默认，供国内访问；将Github Pages解析线路设为境外，供国外访问。</p><h2 id="Chrome无法访问链接问题"><a href="#Chrome无法访问链接问题" class="headerlink" title="Chrome无法访问链接问题"></a>Chrome无法访问链接问题</h2><p><strong>问题描述</strong>：部署页面之后，Chrome无法访问链接，提示你的连接不是私密连接……<br><strong>解决方案</strong>：前往<a href="chrome://net-internals/#hsts" target="_blank" rel="noopener">chrome://net-internals/#hsts</a>，在Delete domain中输入无法访问的网页地址。</p><h2 id="附：hexo常用命令"><a href="#附：hexo常用命令" class="headerlink" title="附：hexo常用命令"></a>附：hexo常用命令</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>hexo version</code></td><td>显示 Hexo 版本</td></tr><tr><td><code>hexo init [folder]</code></td><td>新建一个网站<br>若未设置folder，默认为当前文件夹；</td></tr><tr><td><code>hexo new [layout] &quot;title&quot;</code></td><td>新建一篇文档，文档布局由layout决定</td></tr><tr><td><code>hexo clean</code></td><td>清理缓存文件</td></tr><tr><td><code>hexo generate</code><br><code>hexo g</code></td><td>生成静态页面</td></tr><tr><td><code>hexo server</code><br><code>hexo s</code></td><td>启用服务器，<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></td></tr><tr><td><code>hexo deploy</code><br><code>hexo d</code></td><td>部署文件</td></tr><tr><td><code>hexo g -d</code><br><code>hexo d -g</code></td><td>生成静态文件后直接部署<br>部署之前先生成静态文件</td></tr></tbody></table><blockquote><p>若想了解更多关于hexo命令的介绍，请参考<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">指令 | hexo</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!--# Hexo | （一）使用Hexo+Pages搭建个人博客--&gt;
&lt;p&gt;本篇主要介绍使用Hexo+Pages搭建个人博客的流程。使用 &lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 博客框架搭建，解析markdown文章，生成静态页面，将页面托管到 &lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;  / &lt;a href=&quot;https://coding.net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;coding&lt;/a&gt; 服务器上。&lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;  / &lt;a href=&quot;https://coding.net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;coding&lt;/a&gt; 都有pages 服务，提供免费的静态网页托管和演示服务。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo博客" scheme="https://liziczh.com/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo博客" scheme="https://liziczh.com/tags/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Windows | 系统重装&amp;系统启动模式</title>
    <link href="https://liziczh.com/windows-reos.html"/>
    <id>https://liziczh.com/windows-reos.html</id>
    <published>2018-04-10T04:09:34.000Z</published>
    <updated>2018-06-27T09:37:37.145Z</updated>
    
    <content type="html"><![CDATA[<!--# Windows | 系统重装--><p>使用微软官方工具制作系统启动U盘，安装微软原版 Windows 系统，了解Windows系统的启动模式。</p><a id="more"></a><h2 id="Windows-系统重装"><a href="#Windows-系统重装" class="headerlink" title="Windows 系统重装"></a>Windows 系统重装</h2><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><h4 id="Win7-下载"><a href="#Win7-下载" class="headerlink" title="Win7 下载"></a>Win7 下载</h4><p>1.下载系统镜像：搜索<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">mdsn，我告诉你</a>，复制系统的【ed2k链接】，粘贴至迅雷下载系统ISO文件。</p><p>2.制作启动U盘：下载微软官方工具 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=56485" target="_blank" rel="noopener">Windows USB/DVD Download Tool</a>，格式化U盘，制作启动盘。</p><p>3.下载网卡驱动：登录【本机机型官网】，寻求【服务支持】，下载【网卡驱动程序】。</p><h4 id="Win10-下载"><a href="#Win10-下载" class="headerlink" title="Win10 下载"></a>Win10 下载</h4><p>1.下载微软官方工具 <a href="https://www.microsoft.com/zh-cn/software-download/windows10?OCID=WIP_r_Win10_Body_AddPC" target="_blank" rel="noopener">MediaCreationTool.exe</a> ，选择【为另一台电脑创建安装介质】，制作启动U盘。</p><h3 id="二、重装系统"><a href="#二、重装系统" class="headerlink" title="二、重装系统"></a>二、重装系统</h3><p>1.BIOS设置：开机进入【BIOS设置程序】，设置【USB】为【第一启动项】，保存退出。</p><blockquote><p>？：机型不同，进入BIOS方式不同，BIOS设置也不同，根据机型自行百度；</p></blockquote><p>2.磁盘分区：进入系统安装界面，安装方式选择【自定义安装】，根据需求自行分区。</p><blockquote><p>？：如果是win10/8换win7，需要将GPT分区转换为MBR分区；<br>？：如果是win7升win10/8，需要将MBR分区转换为GPT分区；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> # 在windows系统安装界面 Shift+F10 调出控制台。</span><br><span class="line"><span class="meta">&gt;</span> diskpart      # 进入DiskPart工具</span><br><span class="line"><span class="meta">&gt;</span> list disk     # 列出磁盘信息</span><br><span class="line"><span class="meta">&gt;</span> select disk n # 选择需要操作的磁盘，n为磁盘编号。</span><br><span class="line"><span class="meta">&gt;</span> clean         # 清理磁盘所有数据</span><br><span class="line"><span class="meta">&gt;</span> convert mbr   # 转换为MBR分区形式</span><br><span class="line"><span class="meta">&gt;</span> convert gpt   # 转换为GPT分区形式</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>3.根据需求设置系统时间日期地区等等信息，等待系统安装……</p><p>4.安装驱动：安装网卡驱动，连接网络，安装其他驱动。</p><blockquote><ul><li>Win7系统：安装已下载的网卡驱动。连接网络，可以前往【本机机型官网】下载驱动选择，也可以下载驱动软件【驱动大师】【驱动精灵】等一键安装。</li><li>Win10系统：自动安装驱动。</li></ul></blockquote><p>5.BIOS设置：开机进入【BIOS设置程序】，设置【HardDisk】为【第一启动项】，保存退出。</p><p>6.系统激活：在<a href="https://s.taobao.com" target="_blank" rel="noopener">淘宝</a>10块钱买个激活码，激活系统。</p><h2 id="了解Windows系统启动模式"><a href="#了解Windows系统启动模式" class="headerlink" title="了解Windows系统启动模式"></a>了解Windows系统启动模式</h2><h3 id="一、Windows-系统启动方式"><a href="#一、Windows-系统启动方式" class="headerlink" title="一、Windows 系统启动方式"></a>一、Windows 系统启动方式</h3><ul><li><strong>Legacy BIOS 启动</strong>：在开机时需进行自检，启动过程较复杂。并且BIOS无法识别GPT分区，所以在Legacy BIOS模式下，采用GPT方式分区的磁盘无法安装操作系统，只能用于数据存储。</li><li><strong>UEFI 启动</strong>：直接从预启动的操作环境加载操作系统，简化开机过程有效提高启动速度。并且可以同时识别MBR和GPT，在UEFI模式中MBR和GPT都支持安装操作系统，但微软规定，在UEFI模式只能使用GPT硬盘安装Windows系统。 </li></ul><h3 id="二、磁盘分区方式"><a href="#二、磁盘分区方式" class="headerlink" title="二、磁盘分区方式"></a>二、磁盘分区方式</h3><ul><li><strong>MBR分区</strong>：主引导记录磁盘分区格式。采用MBR分区，主分区数目不能超过4个，而且由于MBR分区方式用4个字节存储分区的总扇区数，按每扇区512字节计算，无法支持超过2TB容量的磁盘。</li><li><strong>GPT分区</strong>：GUID全局唯一标识磁盘分区表。GPT的先进之处在于GPT分区表头可自定义分区数量的最大值，即GPT分区表的大小不是固定的。GPT采用64位二进制数表示逻辑块地址，所以分区个数和分区大小几乎没有限制，但Windows系统最多只允许划分128个分区。</li></ul><blockquote><p>Legacy BIOS+MBR支持安装所有的Windows系统。<br>UEFI+GPT支持Win7-64位及Win7之后的操作系统。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!--# Windows | 系统重装--&gt;
&lt;p&gt;使用微软官方工具制作系统启动U盘，安装微软原版 Windows 系统，了解Windows系统的启动模式。&lt;/p&gt;
    
    </summary>
    
      <category term="电脑维修" scheme="https://liziczh.com/categories/%E7%94%B5%E8%84%91%E7%BB%B4%E4%BF%AE/"/>
    
    
      <category term="Windows" scheme="https://liziczh.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Web | jQuery</title>
    <link href="https://liziczh.com/web-jquery.html"/>
    <id>https://liziczh.com/web-jquery.html</id>
    <published>2018-04-09T08:34:00.000Z</published>
    <updated>2018-07-11T06:20:24.963Z</updated>
    
    <content type="html"><![CDATA[<!--# jQuery--><p>jQuery 是一个 JavaScript 函数库，将 JS 的一些功能实现封装成了函数，极大地简化了 JavaScript 编程。<br>jQuery是 John Resig 于2006年创建的一个开源项目，jQuery集成了 JavaScript、CSS、 DOM 和 Ajax 于一体的强大功能。它可以用最少的代码， 完成更多复杂而困难的功能。</p><a id="more"></a><h1 id="1-引入jQuery"><a href="#1-引入jQuery" class="headerlink" title="1. 引入jQuery"></a>1. 引入jQuery</h1><h2 id="1-1-jQuery版本"><a href="#1-1-jQuery版本" class="headerlink" title="1.1 jQuery版本"></a>1.1 jQuery版本</h2><p>jQuery版本：</p><ul><li>jQuery-1.x.x：兼容IE6/7/8低级浏览器。</li><li>jQuery-2.x.x：不兼容IE6/7/8。</li><li>jQuery-3.x.x：全面支持HTML5和CSS3。</li></ul><p>jQuery版本分类：</p><ul><li>Development version：[jquery.js] 开发版，未压缩，用于测试和开发。</li><li>Production version：[jquery.min.js] 精简版，已被压缩。</li></ul><h2 id="1-2-引入jQuery"><a href="#1-2-引入jQuery" class="headerlink" title="1.2 引入jQuery"></a>1.2 引入jQuery</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js//jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-jQuery入门"><a href="#2-jQuery入门" class="headerlink" title="2. jQuery入门"></a>2. jQuery入门</h1><h2 id="2-1-jQuery对象与DOM对象"><a href="#2-1-jQuery对象与DOM对象" class="headerlink" title="2.1 jQuery对象与DOM对象"></a>2.1 jQuery对象与DOM对象</h2><p>jQuery简化了JS编程，多数JS功能实现都被封装成了函数，而调用这些jQuery函数必须使用jQuery对象。</p><p>jQuery对象本质是一个DOM对象数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DOM对象转jQuery对象</span></span><br><span class="line"><span class="keyword">var</span> $jQueryObj = $(DOMObj);</span><br><span class="line"><span class="comment">// jQuery对象转DOM对象</span></span><br><span class="line"><span class="keyword">var</span> DOMObj = $jQueryObj[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> DOMObj = $jQueryObj.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><blockquote><p>jQuery对象命名一般以$为前缀</p></blockquote><h2 id="2-2-jQuery入口函数"><a href="#2-2-jQuery入口函数" class="headerlink" title="2.2 jQuery入口函数"></a>2.2 jQuery入口函数</h2><p>第一种写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    jQuery代码</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>第二种写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    jQuery代码</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>jQuery入口函数与JS入口函数的区别</strong>：<br>①jQuery的入口函数只等待DOM树加载完即执行；<br>②JS入口函数需要等待所有资源加载完成再执行；</p><h2 id="2-3-jQuery基础语法"><a href="#2-3-jQuery基础语法" class="headerlink" title="2.3 jQuery基础语法"></a>2.3 jQuery基础语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"选择器"</span>).操作函数()</span><br></pre></td></tr></table></figure><p><code>$()</code>：即<code>jQuery()</code>，本质是一个函数。</p><h1 id="3-jQuery选择器"><a href="#3-jQuery选择器" class="headerlink" title="3. jQuery选择器"></a>3. jQuery选择器</h1><p>jQuery选择器：获取元素</p><h2 id="3-1-元素选择器"><a href="#3-1-元素选择器" class="headerlink" title="3.1 元素选择器"></a>3.1 元素选择器</h2><table><thead><tr><th>元素选择器</th><th>描述</th></tr></thead><tbody><tr><td><code>*</code></td><td>通配符选择器</td></tr><tr><td><code>#id</code></td><td>id选择器</td></tr><tr><td><code>.class</code></td><td>类选择器</td></tr><tr><td><code>element</code></td><td>元素选择器</td></tr><tr><td><code>s1s2</code></td><td>交集选择器</td></tr><tr><td><code>s1,s2</code></td><td>并集选择器</td></tr><tr><td><code>s1 s2</code></td><td>后代选择器</td></tr><tr><td><code>s1 &gt; s2</code></td><td>子元素选择器</td></tr></tbody></table><h2 id="3-2-属性选择器"><a href="#3-2-属性选择器" class="headerlink" title="3.2 属性选择器"></a>3.2 属性选择器</h2><table><thead><tr><th>属性选择器</th><th>描述</th></tr></thead><tbody><tr><td><code>[attr]</code></td><td>属性选择器</td></tr><tr><td><code>[attr=value]</code></td><td>属性=值的元素</td></tr><tr><td><code>[attr!=value]</code></td><td>属性!=值的元素</td></tr><tr><td><code>[attr$=value]</code></td><td>属性值以value结尾的元素</td></tr></tbody></table><h2 id="3-3-过滤选择器"><a href="#3-3-过滤选择器" class="headerlink" title="3.3 过滤选择器"></a>3.3 过滤选择器</h2><table><thead><tr><th>位置</th><th>描述</th></tr></thead><tbody><tr><td><code>:first</code></td><td>第一个元素</td></tr><tr><td><code>:last</code></td><td>第二个元素</td></tr><tr><td><code>:odd</code></td><td>所有奇数元素</td></tr><tr><td><code>:even</code></td><td>所有偶数元素</td></tr></tbody></table><table><thead><tr><th>索引位置</th><th>描述</th></tr></thead><tbody><tr><td><code>:eq(index)</code></td><td>指定索引的元素<br>（index从0开始）</td></tr><tr><td><code>:gt(num)</code></td><td>所有索引&gt;num的元素</td></tr><tr><td><code>:lt(num)</code></td><td>所有索引&lt;num的元素</td></tr></tbody></table><table><thead><tr><th>标签类型</th><th>描述</th></tr></thead><tbody><tr><td><code>:header</code></td><td>所有标题元素</td></tr><tr><td><code>:animated</code></td><td>所有动画元素</td></tr></tbody></table><table><thead><tr><th>元素状态</th><th>描述</th></tr></thead><tbody><tr><td><code>:contains(text)</code></td><td>包含指定文本的元素</td></tr><tr><td><code>:empty</code></td><td>无子节点的元素</td></tr><tr><td><code>:hidden</code></td><td>所有隐藏的元素</td></tr><tr><td><code>:visible</code></td><td>所有可见的元素</td></tr></tbody></table><h2 id="3-4-表单选择器"><a href="#3-4-表单选择器" class="headerlink" title="3.4 表单选择器"></a>3.4 表单选择器</h2><table><thead><tr><th>表单元素</th><th>描述</th></tr></thead><tbody><tr><td><code>:input</code></td><td>所有<code>&lt;input&gt;</code>元素</td></tr><tr><td><code>:text</code></td><td>所有<code>type=&quot;text&quot;</code>的 <code>&lt;input&gt;</code> 元素</td></tr><tr><td><code>:password</code></td><td>所有<code>type=&quot;password&quot;</code>的<code>&lt;input&gt;</code>元素</td></tr><tr><td><code>:radio</code></td><td>所有<code>type=&quot;radio&quot;</code>的<code>&lt;input&gt;</code>元素</td></tr><tr><td><code>:checkbox</code></td><td>所有<code>type=&quot;checkbox&quot;</code>的<code>&lt;input&gt;</code>元素</td></tr><tr><td><code>:submit</code></td><td>所有<code>type=&quot;submit&quot;</code>的<code>&lt;input&gt;</code>元素</td></tr><tr><td><code>:reset</code></td><td>所有<code>type=&quot;reset&quot;</code>的<code>&lt;input&gt;</code>元素</td></tr><tr><td><code>:button</code></td><td>所有<code>type=&quot;button&quot;</code>的<code>&lt;input&gt;</code>元素</td></tr><tr><td><code>:image</code></td><td>所有<code>type=&quot;image&quot;</code>的<code>&lt;input&gt;</code>元素</td></tr><tr><td><code>:file</code></td><td>所有<code>type=&quot;file&quot;</code>的<code>&lt;input&gt;</code>元素</td></tr><tr><td><code>:enable</code></td><td>所有激活的<code>&lt;input&gt;</code>元素</td></tr><tr><td><code>:disabled</code></td><td>所有禁用的<code>&lt;input&gt;</code>元素</td></tr><tr><td><code>:selected</code></td><td>所有被选取的<code>&lt;input&gt;</code>元素</td></tr><tr><td><code>:checked</code></td><td>所有被选中的<code>&lt;input&gt;</code>元素</td></tr></tbody></table><h1 id="4-jQueryDOM★"><a href="#4-jQueryDOM★" class="headerlink" title="4. jQueryDOM★"></a>4. jQueryDOM★</h1><h2 id="4-1-DOM-操作★"><a href="#4-1-DOM-操作★" class="headerlink" title="4.1 DOM 操作★"></a>4.1 DOM 操作★</h2><h3 id="4-1-1-DOM-HTML内容"><a href="#4-1-1-DOM-HTML内容" class="headerlink" title="4.1.1 DOM HTML内容"></a>4.1.1 DOM HTML内容</h3><p><strong>1.text()</strong>：设置/获取<strong>所选元素的文本内容</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).text();  <span class="comment">// 获取文本内容</span></span><br><span class="line">$(<span class="string">"selector"</span>).text(<span class="string">"文本内容"</span>);  <span class="comment">// 设置文本内容</span></span><br></pre></td></tr></table></figure><p><strong>2.html()</strong>：设置/获取<strong>所选元素的内容</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).html();  <span class="comment">// 获取HTML内容</span></span><br><span class="line">$(<span class="string">"selector"</span>).html(<span class="string">"HTML代码"</span>);  <span class="comment">//设置 HTML内容</span></span><br></pre></td></tr></table></figure><p><strong>3.val()</strong>：设置/获取<strong>表单字段的值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).val();  <span class="comment">// 获取表单字段的值</span></span><br><span class="line">$(<span class="string">"selector"</span>).val(<span class="string">"表单字段值"</span>);  <span class="comment">// 设置表单字段的值</span></span><br></pre></td></tr></table></figure><h3 id="4-1-2-DOM-HTML属性"><a href="#4-1-2-DOM-HTML属性" class="headerlink" title="4.1.2 DOM HTML属性"></a>4.1.2 DOM HTML属性</h3><p><strong>1.attr()</strong>：<strong>HTML属性</strong>，只能返回string的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).attr(<span class="string">"属性名"</span>);  <span class="comment">// 获取HTML属性</span></span><br><span class="line">$(<span class="string">"selector"</span>).attr(<span class="string">"属性名"</span>, <span class="string">"值"</span>);  <span class="comment">// 设置HTML属性</span></span><br><span class="line">$(<span class="string">"selector"</span>).attr(&#123;<span class="string">"属性名"</span>:<span class="string">"值"</span>, <span class="string">"属性名"</span>:<span class="string">"值"</span>&#125;);  <span class="comment">// 设置多个HTML属性</span></span><br></pre></td></tr></table></figure><p><strong>2.prop()</strong>：<strong>DOM属性</strong>，如selected，disabled，checked等属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).prop(<span class="string">"属性名"</span>);  <span class="comment">// 获取属性</span></span><br><span class="line">$(<span class="string">"selector"</span>).prop(<span class="string">"属性名"</span>, <span class="string">"值"</span>);  <span class="comment">// 设置属性</span></span><br><span class="line">$(<span class="string">"selector"</span>).prop(&#123;<span class="string">"属性名"</span>:<span class="string">"值"</span>, <span class="string">"属性名"</span>:<span class="string">"值"</span>&#125;);  <span class="comment">// 设置多个属性</span></span><br></pre></td></tr></table></figure><h3 id="4-1-3-DOM-插入元素"><a href="#4-1-3-DOM-插入元素" class="headerlink" title="4.1.3 DOM 插入元素"></a>4.1.3 DOM 插入元素</h3><p><strong>1.append()</strong>：在被选元素的结尾追加内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).append(<span class="string">"插入内容"</span>);</span><br></pre></td></tr></table></figure><p><strong>2.prepend()</strong>：在被选元素的开头插入内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).prepend(<span class="string">"插入内容"</span>);</span><br></pre></td></tr></table></figure><p><strong>3.before()</strong>：在被选元素之前插入内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).before(<span class="string">"插入内容"</span>);</span><br></pre></td></tr></table></figure><p><strong>4.after()</strong>：在被选元素之后插入内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).after(<span class="string">"插入内容"</span>);</span><br></pre></td></tr></table></figure><h3 id="4-1-4-DOM-删除元素"><a href="#4-1-4-DOM-删除元素" class="headerlink" title="4.1.4 DOM 删除元素"></a>4.1.4 DOM 删除元素</h3><p><strong>1.remove()</strong>：删除被选元素及其子元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).remove();</span><br></pre></td></tr></table></figure><p><strong>2.empty()</strong>：删除被选元素的所有子元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).empty();</span><br></pre></td></tr></table></figure><h3 id="4-1-5-DOM-CSS类"><a href="#4-1-5-DOM-CSS类" class="headerlink" title="4.1.5 DOM CSS类"></a>4.1.5 DOM CSS类</h3><p><strong>1.addClass()</strong>：向被选元素添加一个或多个样式类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).addClass(<span class="string">"类名"</span>);</span><br></pre></td></tr></table></figure><p><strong>2.removeClass()</strong>：从被选元素移除一个或多个类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).removeClass(<span class="string">"类名"</span>);</span><br></pre></td></tr></table></figure><p><strong>3.toggleClass()</strong>：对被选元素进行类切换（本质是类的添加/删除）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).toggleClass(<span class="string">"类名"</span>);</span><br></pre></td></tr></table></figure><p><strong>4.hasClass()</strong>：判断被选元素是否存在类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).hasClass(<span class="string">"类名"</span>);</span><br></pre></td></tr></table></figure><h3 id="4-1-6-DOM-CSS属性"><a href="#4-1-6-DOM-CSS属性" class="headerlink" title="4.1.6 DOM CSS属性"></a>4.1.6 DOM CSS属性</h3><p><strong>1.css()</strong>：设置或返回样式属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).css(<span class="string">"样式属性"</span>);       <span class="comment">// 获取样式属性值</span></span><br><span class="line">$(<span class="string">"selector"</span>).css(<span class="string">"样式属性"</span>,<span class="string">"值"</span>);  <span class="comment">// 设置样式属性</span></span><br><span class="line">$(<span class="string">"selector"</span>).css(&#123;<span class="string">"样式属性"</span>:<span class="string">"值"</span>,<span class="string">"样式属性"</span>:<span class="string">"值"</span>,...&#125;);  <span class="comment">// 设置多个样式属性</span></span><br></pre></td></tr></table></figure><h3 id="4-1-7-DOM-元素尺寸"><a href="#4-1-7-DOM-元素尺寸" class="headerlink" title="4.1.7 DOM 元素尺寸"></a>4.1.7 DOM 元素尺寸</h3><p><strong>1.width()</strong>：设置或返回元素的宽度（不包括内边距、边框、外边距）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).width();</span><br></pre></td></tr></table></figure><p><strong>2.height()</strong>：设置或返回元素的高度（不包括内边距、边框、外边距）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).height();</span><br></pre></td></tr></table></figure><p><strong>3.innerWidth()</strong>：返回元素的宽度（包括内边距）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).innerWidth();</span><br></pre></td></tr></table></figure><p><strong>4.innerHeight()</strong>：返回元素的高度（包括内边距）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).innerHeight();</span><br></pre></td></tr></table></figure><p><strong>5.outerWidth()</strong>：返回元素的宽度（包括内边距、边框）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).outerWidth();</span><br></pre></td></tr></table></figure><p><strong>6.outerHeight()</strong>：返回元素的高度（包括内边距、边框）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).outerHeight();</span><br></pre></td></tr></table></figure><p><strong>7.outerWidth(true)</strong>：返回元素的宽度（包括内边距、边框和外边距）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).outerWidth(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p><strong>8.outerHeight(true)</strong>：返回元素的高度（包括内边距、边框和外边距）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).outerHeight(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h3 id="4-1-8-DOM-位置"><a href="#4-1-8-DOM-位置" class="headerlink" title="4.1.8 DOM 位置"></a>4.1.8 DOM 位置</h3><p><strong>1.scrollTop()</strong>：滚动条顶部偏移量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).scrollTop();</span><br></pre></td></tr></table></figure><p><strong>2.scrollLeft()</strong>：滚动条左边偏移量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).scrollLeft();</span><br></pre></td></tr></table></figure><h2 id="4-2-DOM-遍历★"><a href="#4-2-DOM-遍历★" class="headerlink" title="4.2 DOM 遍历★"></a>4.2 DOM 遍历★</h2><h3 id="4-2-1-向上遍历-祖先"><a href="#4-2-1-向上遍历-祖先" class="headerlink" title="4.2.1 向上遍历-祖先"></a>4.2.1 向上遍历-祖先</h3><p><strong>1.parent()</strong>：返回被选元素的直接父元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).parent(<span class="string">"筛选选择器"</span>);  <span class="comment">// 直接父元素，可筛选</span></span><br></pre></td></tr></table></figure><p><strong>2.parents()</strong>：返回被选元素的所有祖先元素，向上遍历直到根<code>&lt;html&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).parents(<span class="string">"筛选选择器"</span>);  <span class="comment">// 所有祖先元素，可筛选</span></span><br></pre></td></tr></table></figure><p><strong>3.parentsUntil()</strong>：返回介于两个给定元素之间的所有祖先元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector1"</span>).parentsUntil(<span class="string">"selector2"</span>);</span><br></pre></td></tr></table></figure><h3 id="4-2-2-向下遍历-后代"><a href="#4-2-2-向下遍历-后代" class="headerlink" title="4.2.2 向下遍历-后代"></a>4.2.2 向下遍历-后代</h3><p><strong>1.children()</strong>：返回被选元素的所有直接子元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).children(<span class="string">"筛选选择器"</span>);  <span class="comment">// 返回直接子元素，可筛选</span></span><br></pre></td></tr></table></figure><p><strong>2.find()</strong>：返回被选元素的所有后代元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).find(<span class="string">"筛选选择器"</span>); <span class="comment">// 返回后代元素，可筛选</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-水平遍历-兄弟"><a href="#4-2-3-水平遍历-兄弟" class="headerlink" title="4.2.3 水平遍历-兄弟"></a>4.2.3 水平遍历-兄弟</h3><p><strong>1.siblings()</strong>：返回被选元素的所有兄弟元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).siblings(<span class="string">"筛选选择器"</span>);  <span class="comment">// 返回所有兄弟元素，可筛选</span></span><br></pre></td></tr></table></figure><p><strong>2.next()</strong>：返回被选元素的下一个兄弟元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).next(<span class="string">"筛选选择器"</span>);  <span class="comment">// 返回下一个兄弟元素，可筛选</span></span><br></pre></td></tr></table></figure><p><strong>3.nextAll()</strong>：返回被选元素之后的兄弟元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).nextAll(<span class="string">"筛选选择器"</span>);  <span class="comment">// 返回元素之后的兄弟元素，可筛选</span></span><br></pre></td></tr></table></figure><p><strong>4.nextUntil()</strong>：返回介于两个给定元素之间的所有兄弟元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector1"</span>).nextUntil(<span class="string">"selector2"</span>);  <span class="comment">// 从selector1水平向后遍历直到selector2</span></span><br></pre></td></tr></table></figure><p><strong>5.prev()</strong>：返回被选元素的上一个兄弟元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).prev(<span class="string">"筛选选择器"</span>);  <span class="comment">// 返回上一个兄弟元素，可筛选</span></span><br></pre></td></tr></table></figure><p><strong>6.prevAll()</strong>：返回被选元素之前的同胞元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).prevAll(<span class="string">"筛选选择器"</span>);  <span class="comment">// 返回元素之前的兄弟元素，可筛选</span></span><br></pre></td></tr></table></figure><p><strong>7.prevUntil()</strong>：返回介于两个给定元素之间的所有同胞元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector1"</span>).prevUntil(<span class="string">"selector2"</span>);  <span class="comment">// 从selector1水平向前遍历直到selector2</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-元素筛选"><a href="#4-2-3-元素筛选" class="headerlink" title="4.2.3 元素筛选"></a>4.2.3 元素筛选</h3><p><strong>1.eq()</strong>：返回被选元素中带有指定索引的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).eq(index);  <span class="comment">// 返回指定索引的元素</span></span><br></pre></td></tr></table></figure><p><strong>2.filter()</strong>：返回匹配筛选标准的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).filter(<span class="string">"筛选选择器"</span>);  <span class="comment">// 返回匹配筛选选择器的元素</span></span><br></pre></td></tr></table></figure><p><strong>3.not()</strong>：返回不匹配筛选标准的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).not(<span class="string">"筛选选择器"</span>);  <span class="comment">// 返回不匹配筛选选择器的元素</span></span><br></pre></td></tr></table></figure><p><strong>4.first()</strong>：获取第一个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).first();</span><br></pre></td></tr></table></figure><p><strong>5.last()</strong>：获取最后一个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).last();</span><br></pre></td></tr></table></figure><h1 id="5-jQuery效果"><a href="#5-jQuery效果" class="headerlink" title="5. jQuery效果"></a>5. jQuery效果</h1><h2 id="5-1-隐藏-显示"><a href="#5-1-隐藏-显示" class="headerlink" title="5.1 隐藏/显示"></a>5.1 隐藏/显示</h2><p><strong>1.show()</strong>：显示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).show(speed,callback);</span><br></pre></td></tr></table></figure><p><strong>2.hide()</strong>：隐藏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).hide(speed,callback);</span><br></pre></td></tr></table></figure><p><strong>3.toggle()</strong>：切换hide()/show()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).toggle(speed,callback)</span><br></pre></td></tr></table></figure><blockquote><p>speed：速度(ms)，[可选参数]<br>callback：当前动画 100% 完成之后执行的函数，[可选参数]</p></blockquote><h2 id="5-2-淡入-淡出-fade"><a href="#5-2-淡入-淡出-fade" class="headerlink" title="5.2 淡入/淡出-fade"></a>5.2 淡入/淡出-fade</h2><p><strong>1.fadeIn()</strong>：淡入已隐藏的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).fadeIn(speed,callback);</span><br></pre></td></tr></table></figure><p><strong>2.fadeOut()</strong>：淡出已显示的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).fadeIn(speed,callback);</span><br></pre></td></tr></table></figure><p><strong>3.fadeToggle()</strong>：切换fadeIn()和fadeOut()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).fadeToggle(speed,callback);</span><br></pre></td></tr></table></figure><p><strong>4.fadeTo()</strong>：允许渐变为给定的不透明度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).fadeTo(speed,opacity,callback);</span><br></pre></td></tr></table></figure><blockquote><p>speed：速度(ms)，[可选参数]<br>opacity：不透明度(0~1)，[可选参数]<br>callback：当前动画 100% 完成之后执行的函数，[可选参数]</p></blockquote><h2 id="5-3-滑动-slide"><a href="#5-3-滑动-slide" class="headerlink" title="5.3 滑动-slide"></a>5.3 滑动-slide</h2><p><strong>1.slideDown()</strong>：向下滑动元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).slideDown(speed,callback);</span><br></pre></td></tr></table></figure><p><strong>2.slideUp()</strong>：向上滑动元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).slideUp(speed,callback);</span><br></pre></td></tr></table></figure><p><strong>3.slideToggle()</strong>：切换slideDown()和slideUp()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).slideToggle(speed,callback);</span><br></pre></td></tr></table></figure><h2 id="5-4-自定义动画-animate"><a href="#5-4-自定义动画-animate" class="headerlink" title="5.4 自定义动画-animate"></a>5.4 自定义动画-animate</h2><p><strong>animate()</strong>：自定义动画</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).animate(&#123;params&#125;,speed,callback);</span><br></pre></td></tr></table></figure><blockquote><p>params：定义形成动画的CSS属性，[必要参数]<br>speed：速度(ms)，[可选参数]<br>callback：当前动画 100% 完成之后执行的函数，[可选参数]</p></blockquote><h2 id="5-5-停止效果-stop"><a href="#5-5-停止效果-stop" class="headerlink" title="5.5 停止效果-stop"></a>5.5 停止效果-stop</h2><p><strong>stop()</strong>：在动画或效果完成前对它们进行停止</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).stop(stopAll,goToEnd);</span><br></pre></td></tr></table></figure><blockquote><p>stopAll：是否清除动画队列；默认false-仅停止活动的动画，允许队列中后面的动画执行。<br>goToEnd：是否立即完成当前动画 ；默认false。</p></blockquote><h1 id="6-jQuery事件机制"><a href="#6-jQuery事件机制" class="headerlink" title="6. jQuery事件机制"></a>6. jQuery事件机制</h1><h2 id="6-1-事件类型"><a href="#6-1-事件类型" class="headerlink" title="6.1 事件类型"></a>6.1 事件类型</h2><table><thead><tr><th>事件句柄</th><th>描述</th></tr></thead><tbody><tr><td>ready</td><td>DOM载入</td></tr><tr><td>click</td><td>鼠标单击</td></tr><tr><td>focus</td><td>元素获得焦点</td></tr><tr><td>blur</td><td>元素失去焦点</td></tr><tr><td>mouseover</td><td>鼠标覆盖</td></tr><tr><td>mouseout</td><td>鼠标移开</td></tr><tr><td>mouseup</td><td>鼠标点击</td></tr><tr><td>mousedown</td><td>鼠标松开</td></tr><tr><td>scroll</td><td>窗口滚动</td></tr><tr><td>change</td><td>发生改变</td></tr><tr><td>unload</td><td>退出页面</td></tr><tr><td>submit</td><td>点击提交</td></tr><tr><td>keydown</td><td>某个键盘的键被按下</td></tr><tr><td>keypress</td><td>某个键盘的键被按下或按住</td></tr><tr><td>keyup</td><td>某个键盘的键被松开</td></tr></tbody></table><h2 id="6-2-事件绑定方式"><a href="#6-2-事件绑定方式" class="headerlink" title="6.2 事件绑定方式"></a>6.2 事件绑定方式</h2><p><strong>1.简单事件绑定</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).事件(handler);</span><br></pre></td></tr></table></figure><blockquote><p>一次只能绑定一个事件</p></blockquote><p><strong>2.bind()</strong>：事件绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).bind(<span class="string">"events"</span>[,data],handler);</span><br></pre></td></tr></table></figure><blockquote><p>bind()不支持动态绑定。</p></blockquote><p><strong>3.delegate()</strong>：事件委托</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).delegate(<span class="string">"childSelector"</span>,<span class="string">"events"</span>[,data],handler);</span><br></pre></td></tr></table></figure><blockquote><p>通过委托父元素可以动态为当前或未来子元素绑定事件；</p></blockquote><p><strong>4.on()</strong>：统一事件绑定方式，推荐使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).on(<span class="string">"events"</span>[,<span class="string">"childSelector"</span>][,data],handler)</span><br></pre></td></tr></table></figure><blockquote><p>events：事件，多个事件以空格分隔<br>childSelector：后代元素，[可选]<br>data：传递给handler的数据，事件触发后通过event.data调用，[可选]<br>handler：事件处理函数</p></blockquote><h2 id="6-3-事件移除方式"><a href="#6-3-事件移除方式" class="headerlink" title="6.3 事件移除方式"></a>6.3 事件移除方式</h2><p><strong>1.unbind()</strong>：移除被选元素的事件 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).unbind(<span class="string">"events"</span>,handler);</span><br></pre></td></tr></table></figure><p><strong>2.undelegate()</strong>：移除由delegate()添加的事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).undelegate(<span class="string">"selector"</span>,<span class="string">"events"</span>,handler);</span><br></pre></td></tr></table></figure><blockquote><p>events：规定需要删除处理函数的一个或多个事件类型 ，[可选]<br>selector：规定需要删除事件的选择器 ，[可选]<br>handler：规定要删除的具体事件处理函数 ，[可选]</p></blockquote><p><strong>3.off()</strong>：解除事件绑定，推荐使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).off(<span class="string">"events"</span>[,<span class="string">"selector"</span>][,handler],map);</span><br></pre></td></tr></table></figure><blockquote><p>events：规定需要删除处理函数的一个或多个事件类型 ，[可选]<br>selector：规定需要删除事件的选择器 ，[可选]<br>handler：规定要删除的具体事件处理函数 ，[可选]<br>map：规定事件映射 (<em>{event:function, event:function, …})</em> ，包含要添加到元素的一个或多个事件，以及当事件发生时运行的函数。 </p></blockquote><h1 id="7-jQuery杂项（难点）"><a href="#7-jQuery杂项（难点）" class="headerlink" title="7. jQuery杂项（难点）"></a>7. jQuery杂项（难点）</h1><h2 id="7-1-链式编程"><a href="#7-1-链式编程" class="headerlink" title="7.1 链式编程"></a>7.1 链式编程</h2><p>链式编程：使用一个jQuery对象不断地调用(点调用)函数。栗子如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).addClass(<span class="string">"highlight"</span>).children(<span class="string">"a"</span>).show().end().siblings().removeClass(<span class="string">"highlight"</span>).children(<span class="string">"a"</span>).hide();</span><br></pre></td></tr></table></figure><blockquote><p>非筛选函数：函数返回当前jQuery对象，jQuery对象不发生改变，如addClass()，hide()…<br>筛选函数：函数返回新的jQuery对象，如find()，parent()…</p></blockquote><p><strong>链式编程原理</strong>：jQuery的<strong>非筛选函数</strong>都返回其本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">this</span></span><br></pre></td></tr></table></figure><p><strong>end()</strong>：结束当前链条中的最近的筛选操作，并将匹配元素集还原为之前的状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQueryObj.end()</span><br></pre></td></tr></table></figure><p><strong>链式编程本质★</strong>：<br>jQuery对象(即包装后的DOM对象)<br>①调用<strong>筛选/遍历函数</strong>后返回新的jQuery对象，将新的jQuery对象压入栈内；<br>②调用<strong>非筛选/遍历函数</strong>后返回本身(return this)。<br>③调用<strong>end()</strong>将栈顶元素 (当前jQuery对象) 弹出栈，指向新的栈顶元素 (最近上一次的jQuery对象)。</p><h2 id="7-2-隐式迭代"><a href="#7-2-隐式迭代" class="headerlink" title="7.2 隐式迭代"></a>7.2 隐式迭代</h2><p><strong>隐式迭代</strong>：jQuery对象本质是DOM对象数组，即<code>$(&quot;selector&quot;)</code>返回一个对象数组。jQuery会自动对匹配到的DOM数组进行循环遍历，执行所调用的函数。</p><p><strong>设置操作</strong>：隐式迭代，循环遍历DOM对象数组执行设置函数。</p><p><strong>获取操作</strong>：大部分情况下返回第一个元素的值。</p><h2 id="7-3-each方法"><a href="#7-3-each方法" class="headerlink" title="7.3 each方法"></a>7.3 each方法</h2><p><strong>each()</strong>：为每个匹配元素规定运行的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"selector"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>));</span></span><br></pre></td></tr></table></figure><blockquote><p>function()：为每个匹配元素规定运行的函数，[必要参数]<br>index：选择器的index位置<br>element：当前的元素</p></blockquote><h2 id="7-4-多库共存"><a href="#7-4-多库共存" class="headerlink" title="7.4 多库共存"></a>7.4 多库共存</h2><p>jQuery使用<code>$</code>标识符作为<code>jQuery</code>的简写符号 ，如果页面上同时存在其他JS库正在使用相同的简写符号<code>$</code>怎么办呢？</p><p><strong>noConflict()</strong>：释放<code>$</code>标识符的控制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = $.noConflict();  <span class="comment">// 释放$的控制权，将$的能力赋予a。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!--# jQuery--&gt;
&lt;p&gt;jQuery 是一个 JavaScript 函数库，将 JS 的一些功能实现封装成了函数，极大地简化了 JavaScript 编程。&lt;br&gt;jQuery是 John Resig 于2006年创建的一个开源项目，jQuery集成了 JavaScript、CSS、 DOM 和 Ajax 于一体的强大功能。它可以用最少的代码， 完成更多复杂而困难的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Web前端" scheme="https://liziczh.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Web前端" scheme="https://liziczh.com/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Web | JavaScript</title>
    <link href="https://liziczh.com/web-javascript.html"/>
    <id>https://liziczh.com/web-javascript.html</id>
    <published>2018-04-07T06:27:12.000Z</published>
    <updated>2018-06-27T11:26:45.676Z</updated>
    
    <content type="html"><![CDATA[<!--# JavaScript--><p>JavaScript 是一种通用的网络脚本语言，常用来为网页改进设计、验证表单、添加动态功能等，实现用户交互。<br>JavaScript 是一门轻量级，解释型，基于原型，面向对象，弱类型的网络脚本语言。</p><ul><li>解释型：无需编译，在程序运行中逐行进行解释执行。</li><li>弱类型：对使用的数据类型不严格要求。</li><li>面向对象：JS 基本对象，DOM 对象，BOM 对象。</li><li>跨平台：不依赖于操作系统，仅需要浏览器的支持。</li></ul><a id="more"></a><h1 id="1-JS基础"><a href="#1-JS基础" class="headerlink" title="1. JS基础"></a>1. JS基础</h1><h2 id="1-1-JS使用方式"><a href="#1-1-JS使用方式" class="headerlink" title="1.1 JS使用方式"></a>1.1 JS使用方式</h2><p>1.行内js：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"js"</span> <span class="attr">onclick</span>=<span class="string">"javascript:alert('hello')"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>2.内部js：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">js代码</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.外部js：外部js文件</p><p>4.引入外部js文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-JS注释"><a href="#1-2-JS注释" class="headerlink" title="1.2 JS注释"></a>1.2 JS注释</h2><p>1.单行注释：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br></pre></td></tr></table></figure><p>2.多行注释：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="1-3-JS输出语句"><a href="#1-3-JS输出语句" class="headerlink" title="1.3 JS输出语句"></a>1.3 JS输出语句</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert();           <span class="comment">//弹出框输出</span></span><br><span class="line"><span class="built_in">console</span>.log();     <span class="comment">//在console显示</span></span><br><span class="line"><span class="built_in">document</span>.write();  <span class="comment">//写入HTML文件中</span></span><br></pre></td></tr></table></figure><h2 id="1-4-JS标识符"><a href="#1-4-JS标识符" class="headerlink" title="1.4 JS标识符"></a>1.4 JS标识符</h2><p>JS<strong>标识符命名</strong>规则：<br>①见名知意<br>②驼峰命名法：首个单词全小写，之后的单词首字母大写。<br>③<code>abc123_$</code><br>④不能以数字开头<br>⑤不能使用关键字<br>⑥严格区分大小写</p><h2 id="1-5-JS变量"><a href="#1-5-JS变量" class="headerlink" title="1.5 JS变量"></a>1.5 JS变量</h2><h3 id="1-5-1-变量声明"><a href="#1-5-1-变量声明" class="headerlink" title="1.5.1 变量声明"></a>1.5.1 变量声明</h3><p>JS是弱类型的，无需明确的变量声明，同一个变量可以存放不同类型的值。</p><p><strong>1.</strong>JS使用<strong><code>var</code></strong>声明变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;  <span class="comment">//JS使用var声明变量</span></span><br></pre></td></tr></table></figure><p><strong>2.</strong>JS<strong>直接使用标识符</strong>声明变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">4</span>;  <span class="comment">//JS直接使用标识符声明变量，全局变量；</span></span><br></pre></td></tr></table></figure><h3 id="1-5-2-变量作用域"><a href="#1-5-2-变量作用域" class="headerlink" title="1.5.2 变量作用域"></a>1.5.2 变量作用域</h3><table><thead><tr><th>变量类型</th><th>描述</th></tr></thead><tbody><tr><td>全局变量</td><td>定义在函数外的var变量  &amp;  无var变量</td></tr><tr><td>局部变量</td><td>定义在函数内的var变量</td></tr></tbody></table><h3 id="1-5-3-变量提升★"><a href="#1-5-3-变量提升★" class="headerlink" title="1.5.3 变量提升★"></a>1.5.3 变量提升★</h3><p><strong>变量提升（Hoisting）</strong>：JS函数及变量的声明都将被提升到函数的最顶部。</p><h2 id="1-6-JS数据类型"><a href="#1-6-JS数据类型" class="headerlink" title="1.6 JS数据类型"></a>1.6 JS数据类型</h2><p>JS是一种弱类型语言（动态类型），同一个变量可存放不同类型的值。</p><p><strong>typeof操作符</strong>：检测变量数据类型；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">3.14</span>       <span class="comment">//number 数字</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span>        <span class="comment">//number 数字</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'123'</span>      <span class="comment">//string 字符串</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>       <span class="comment">//boolean 布尔值</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>  <span class="comment">//undefined 未赋值变量</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>       <span class="comment">//object 空对象引用</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;         <span class="comment">//object 对象</span></span><br><span class="line"><span class="keyword">typeof</span> []         <span class="comment">//object 数组对象</span></span><br><span class="line"><span class="keyword">typeof</span> alert()    <span class="comment">//function 函数</span></span><br></pre></td></tr></table></figure><h3 id="1-6-1-原始类型"><a href="#1-6-1-原始类型" class="headerlink" title="1.6.1 原始类型"></a>1.6.1 原始类型</h3><p><strong>1.Number | 数字</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>;      <span class="comment">// 整数</span></span><br><span class="line"><span class="number">3.4</span>;    <span class="comment">// 浮点数</span></span><br><span class="line"><span class="number">123e5</span>;  <span class="comment">// 科学计数法</span></span><br><span class="line"><span class="number">0xFFFF</span>; <span class="comment">// 十六进制数</span></span><br><span class="line"><span class="literal">NaN</span>;    <span class="comment">// 非数字，任何涉及NaN的计算，都返回NaN。</span></span><br></pre></td></tr></table></figure><p><strong>2.String | 字符串</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"abc"</span>;  <span class="comment">// 双引号字符串</span></span><br><span class="line"><span class="string">'abc'</span>;  <span class="comment">// 单引号字符串</span></span><br><span class="line"><span class="string">"\r\n"</span>; <span class="comment">// 转义字符</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td><code>\n</code></td><td>换行</td></tr><tr><td><code>\r</code></td><td>回车</td></tr><tr><td><code>\t</code></td><td>制表</td></tr><tr><td><code>\b</code></td><td>退格</td></tr><tr><td><code>\&#39;</code></td><td><code>&#39;</code></td></tr><tr><td><code>\&quot;</code></td><td><code>&quot;</code></td></tr><tr><td><code>\\</code></td><td><code>\</code></td></tr></tbody></table><p><strong>3.Boolean | 布尔型</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span>;  <span class="comment">// true值</span></span><br><span class="line"><span class="literal">false</span>; <span class="comment">// false值</span></span><br></pre></td></tr></table></figure><p><strong>4.Undefined | 未赋值变量</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span>; <span class="comment">// 意为"缺少值"，未赋值的变量;（用于变量类型）</span></span><br></pre></td></tr></table></figure><p><strong>5.Null | 空指针</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span>; <span class="comment">// 空对象指针，（用于对象类型）</span></span><br><span class="line"><span class="comment">/* typeof null，类型为Object; */</span></span><br></pre></td></tr></table></figure><p><strong>-区分undefined和null★</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">number(<span class="literal">null</span>)==<span class="number">0</span></span><br><span class="line">number(<span class="literal">undefined</span>)==<span class="literal">NaN</span>;</span><br><span class="line"><span class="comment">/* 目前null与undefined基本同义 */</span></span><br></pre></td></tr></table></figure><h3 id="1-6-2-类型转换"><a href="#1-6-2-类型转换" class="headerlink" title="1.6.2 类型转换"></a>1.6.2 类型转换</h3><p>1.转换成字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.toString(); <span class="comment">// null,undefined没有toString()</span></span><br></pre></td></tr></table></figure><p>2.转换成数字：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.parseInt(<span class="string">"123red"</span>,<span class="number">10</span>);   <span class="comment">// 返回123，逐个字符判断</span></span><br><span class="line">.parseFloat(<span class="string">"1.2.3"</span>,<span class="number">10</span>);  <span class="comment">// 返回1.2，逐个字符判断</span></span><br></pre></td></tr></table></figure><p><strong>强制类型转换</strong>：</p><p><strong>1.Number()</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="number">1.2</span>)   <span class="comment">// 1.2</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="number">1.2</span><span class="number">.3</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)  <span class="comment">// 1 </span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="keyword">new</span> object()) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p><strong>2.String()</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>();   <span class="comment">// 转换任意数据类型</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">null</span>); <span class="comment">// "null"</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">undefined</span>); <span class="comment">// "undefined"</span></span><br></pre></td></tr></table></figure><p><strong>3.Boolean()</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* false：空字符串，0，undefined，null */</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">""</span>);        <span class="comment">//false：空字符串</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">0</span>);        <span class="comment">//false：0</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>); <span class="comment">//false：undefined</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>);      <span class="comment">//false：null</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="keyword">new</span> object()); <span class="comment">//true - 对象</span></span><br></pre></td></tr></table></figure><h3 id="1-6-3-引用类型"><a href="#1-6-3-引用类型" class="headerlink" title="1.6.3 引用类型"></a>1.6.3 引用类型</h3><p>引用类型：对象，一组属性和方法的集合。</p><p><strong>1.Object | 对象</strong>：{}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"张三"</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name + <span class="string">"正在吃饭~"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();  <span class="comment">// Object对象</span></span><br></pre></td></tr></table></figure><p><strong>2.Array | 数组</strong>：[]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];  <span class="comment">// 字面量</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);  <span class="comment">//数组对象</span></span><br></pre></td></tr></table></figure><p><strong>3.Function | 函数</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;  <span class="comment">// 一般函数声明</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;  <span class="comment">// 函数表达式</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="built_in">Function</span>(arg1, arg2, ..., argN, function_body) <span class="comment">// 函数对象</span></span><br></pre></td></tr></table></figure><p>更多引用类型：String，Boolean，Number，Math，Date，RegExp，Error，EvalError，RangeError，ReferenceError，SyntaxError，TypeError，URIError。</p><h2 id="1-7-JS运算符"><a href="#1-7-JS运算符" class="headerlink" title="1.7 JS运算符"></a>1.7 JS运算符</h2><p>1.算术运算符：<code>+</code>，<code>-</code>，<code>*</code>，<code>/</code>，<code>%</code>，<code>++</code>，<code>--</code><br>2.关系运算符：<code>&gt;</code>，<code>&lt;</code>，<code>&gt;=</code>，<code>&lt;=</code>，<code>==</code>，<code>!=</code><br>3.逻辑运算符：<code>&amp;</code>，<code>|</code>，<code>~</code>，<code>^</code>，<code>!</code>，<code>&amp;&amp;</code>，<code>||</code><br>4.位运算符：<code>&lt;&lt;</code>，<code>&gt;&gt;</code>，<code>&gt;&gt;&gt;</code>，<code>~</code>，<code>&amp;</code>，<code>|</code>，<code>^</code><br>5.赋值运算符：<code>=</code>，<code>+=</code>，<code>-=</code>，<code>*=</code>，<code>/=</code>，<code>%=</code><br>6.条件运算符：<code>a?b:c</code></p><p><strong>双等与三等★</strong>：<br><code>==</code>&amp;<code>!=</code>：只比较值，不比较类型。<br><code>===</code>&amp;<code>!==</code>：既比较值，也比较类型。</p><h2 id="1-8-JS语句"><a href="#1-8-JS语句" class="headerlink" title="1.8 JS语句"></a>1.8 JS语句</h2><h3 id="1-8-1-选择语句"><a href="#1-8-1-选择语句" class="headerlink" title="1.8.1 选择语句"></a>1.8.1 选择语句</h3><p><strong>if语句</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    条件为<span class="literal">true</span>执行语句;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    条件为<span class="literal">false</span>执行语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>switch语句</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  执行代码块 <span class="number">1</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">  执行代码块 <span class="number">2</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  与以上<span class="keyword">case</span>值不同时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-2-循环语句"><a href="#1-8-2-循环语句" class="headerlink" title="1.8.2 循环语句"></a>1.8.2 循环语句</h3><p><strong>while循环</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>)&#123;</span><br><span class="line">循环体;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>do while循环</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先执行一次后判断</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">循环体;</span><br><span class="line">    i++;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><strong>for循环</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>for-in循环</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> 对象)&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-3-跳转语句"><a href="#1-8-3-跳转语句" class="headerlink" title="1.8.3 跳转语句"></a>1.8.3 跳转语句</h3><table><thead><tr><th>跳转语句</th><th>描述</th></tr></thead><tbody><tr><td>break</td><td>跳出当前循环，跳出一层循环；</td></tr><tr><td>continue</td><td>跳出本次循环，进行下次循环；</td></tr><tr><td>return</td><td>结束整个方法；</td></tr></tbody></table><h1 id="2-JS高级"><a href="#2-JS高级" class="headerlink" title="2. JS高级"></a>2. JS高级</h1><h2 id="2-1-JS字符串"><a href="#2-1-JS字符串" class="headerlink" title="2.1 JS字符串"></a>2.1 JS字符串</h2><p>JS字符串本质是一个不可变的字符数组。</p><h3 id="2-1-1-创建字符串"><a href="#2-1-1-创建字符串" class="headerlink" title="2.1.1 创建字符串"></a>2.1.1 创建字符串</h3><p><strong>1.</strong>使用<strong>字面量</strong>创建字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;  <span class="comment">// 字面量</span></span><br></pre></td></tr></table></figure><p><strong>2.</strong>使用<strong>String对象</strong>创建字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"abc"</span>); <span class="comment">// String对象</span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-字符串拼接"><a href="#2-1-2-字符串拼接" class="headerlink" title="2.1.2 字符串拼接"></a>2.1.2 字符串拼接</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>+<span class="string">"def"</span>;  <span class="comment">// 使用“+”拼接字符串</span></span><br></pre></td></tr></table></figure><h3 id="2-1-3-String对象"><a href="#2-1-3-String对象" class="headerlink" title="2.1.3 String对象"></a>2.1.3 String对象</h3><table><thead><tr><th>string属性&amp;方法</th><th>描述</th></tr></thead><tbody><tr><td>length</td><td>返回字符串长度</td></tr><tr><td>charAt(number)</td><td>返回指定索引位置的字符</td></tr><tr><td>charCodeAt()</td><td>返回指定索引位置字符的 Unicode 值</td></tr><tr><td>concat()</td><td>连接字符串</td></tr><tr><td>substring()</td><td>提取字符串中两个指定的索引号之间的字符</td></tr><tr><td>substr()</td><td>从起始索引号提取字符串中指定数目的字符</td></tr><tr><td>slice()</td><td>提取字符串片断，并在新字符串中返回被提取部分</td></tr><tr><td>indexOf()</td><td>返回字符串中检索指定字符第一次出现的位置<br>如果没有返回-1</td></tr><tr><td>lastIndexOf()</td><td>返回字符串中检索指定字符最后一次出现的位置<br>如果没有返回-1</td></tr><tr><td>trim()</td><td>移除字符串首尾空格</td></tr><tr><td>toUpperCase()<br>toLowerCase()</td><td>大小写转换</td></tr><tr><td>localeCompare()</td><td>比较两个字符串大小</td></tr><tr><td>match()</td><td>找到一个或多个正则表达式的匹配</td></tr><tr><td>search()</td><td>检索与正则表达式相匹配的值，返回位置</td></tr><tr><td>replace()</td><td>替换与正则表达式匹配的子串</td></tr><tr><td>split()</td><td>把字符串分割为子字符串数组</td></tr></tbody></table><h2 id="2-2-JS数组"><a href="#2-2-JS数组" class="headerlink" title="2.2 JS数组"></a>2.2 JS数组</h2><p>JS数组是动态数组，无需指定长度。JS又是弱类型的，数组中可以有不同的变量类型。</p><h3 id="2-2-1-创建数组"><a href="#2-2-1-创建数组" class="headerlink" title="2.2.1 创建数组"></a>2.2.1 创建数组</h3><p><strong>1.</strong>使用<strong>字面量</strong>创建：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>];  <span class="comment">// 字面量</span></span><br></pre></td></tr></table></figure><p><strong>2.</strong>使用<strong>Array</strong>创建：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);  <span class="comment">// Array对象</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-遍历数组"><a href="#2-2-2-遍历数组" class="headerlink" title="2.2.2 遍历数组"></a>2.2.2 遍历数组</h3><p><strong>1.</strong>使用<strong>普通for循环</strong>遍历：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; arr.length ; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.</strong>使用<strong>for-each</strong>遍历：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-Array对象"><a href="#2-2-3-Array对象" class="headerlink" title="2.2.3 Array对象"></a>2.2.3 Array对象</h3><table><thead><tr><th>Array方法</th><th>描述</th></tr></thead><tbody><tr><td>length</td><td>返回数组长度</td></tr><tr><td>isArray()</td><td>判断是否为数组</td></tr><tr><td>valueOf()</td><td>返回数组对象的原始值</td></tr><tr><td>toString()</td><td>将数组以字符串的形式返回</td></tr><tr><td>push()</td><td>向数组末尾追加元素，返回新的长度</td></tr><tr><td>pop()</td><td>删除并返回数组的最后一个元素</td></tr><tr><td>join()</td><td>将数组转换为字符串，默认按逗号隔开</td></tr><tr><td>shift()</td><td>删除并返回数组的第一个元素</td></tr><tr><td>unshift()</td><td>向数组的开头追加元素，返回新的长度</td></tr><tr><td>reverse()</td><td>数组反转</td></tr><tr><td>slice()</td><td>从某个已有的数组返回选定的元素</td></tr><tr><td>splice()</td><td>删除元素，并向数组添加新元素</td></tr><tr><td>sort()</td><td>排序；<br>数字按大小排，字母按字典顺序排，汉字按Unicode排</td></tr><tr><td>indexOf()</td><td>返回元素索引</td></tr><tr><td>lastIndexOf()</td><td>返回元素反序索引</td></tr></tbody></table><h2 id="2-3-JS函数"><a href="#2-3-JS函数" class="headerlink" title="2.3 JS函数"></a>2.3 JS函数</h2><p>JS函数是一种数据类型[function]，JS函数也是对象。</p><h3 id="2-3-1-函数定义"><a href="#2-3-1-函数定义" class="headerlink" title="2.3.1 函数定义"></a>2.3.1 函数定义</h3><p><strong>1.</strong>使用<strong>函数声明</strong>定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">arg0, arg1, ... argN</span>)</span>&#123;&#125;  <span class="comment">// 函数声明</span></span><br></pre></td></tr></table></figure><p><strong>2.</strong>使用<strong>函数表达式</strong>定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名 = <span class="function"><span class="keyword">function</span>(<span class="params">arg0, arg1, ... argN</span>)</span>&#123;&#125;  <span class="comment">// 函数表达式 | 匿名函数</span></span><br></pre></td></tr></table></figure><p><strong>3.</strong>使用<strong>构造函数</strong>定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> function_name = <span class="keyword">new</span> <span class="built_in">Function</span>(arg1, arg2, ..., argN, function_body)</span><br></pre></td></tr></table></figure><p><strong>4.自执行函数</strong>：自己调用自己</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> 函数名(<span class="params">[形参]</span>)</span>&#123;</span><br><span class="line">    函数体;</span><br><span class="line">&#125;)([实参]);</span><br></pre></td></tr></table></figure><h3 id="2-3-2-函数提升★"><a href="#2-3-2-函数提升★" class="headerlink" title="2.3.2 函数提升★"></a>2.3.2 函数提升★</h3><p><strong>一等公民</strong>：JS函数与JS变量处于同等地位，可作为一个值使用。<br>①可将函数赋值给变量<br>②可将函数赋值给对象的属性<br>③可将函数作为参数出入其他函数<br>④可将函数作为返回结果</p><p><strong>函数提升（Hoisting）</strong>：JS函数及变量的声明都将被提升到函数的最顶部。</p><h3 id="2-3-3-Function对象"><a href="#2-3-3-Function对象" class="headerlink" title="2.3.3 Function对象"></a>2.3.3 Function对象</h3><p>1.JS函数实际上是功能完整的对象。</p><table><thead><tr><th>function属性&amp;方法</th><th>描述</th></tr></thead><tbody><tr><td>eval(“JS代码”)</td><td>执行JS代码</td></tr><tr><td>escape()</td><td>对字符串进行编码</td></tr><tr><td>unescape()</td><td>对字符串进行解码</td></tr><tr><td>encodeURI()</td><td>把字符串编码为 URI</td></tr><tr><td>decodeURI()</td><td>解码某个编码的 URI</td></tr><tr><td>isNaN()</td><td>判断是否是非数字</td></tr><tr><td>Number()</td><td>把对象转换为数字</td></tr><tr><td>String()</td><td>把对象转换为字符串</td></tr><tr><td>parseInt()</td><td>解析一个字符串并返回一个整数</td></tr><tr><td>parseFloat()</td><td>解析一个字符串并返回一个浮点数</td></tr></tbody></table><p>2.JS函数不会重载，只会执行最后一个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> doAdd = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"num"</span>, <span class="string">"alert(num + 20)"</span>);</span><br><span class="line"><span class="keyword">var</span> doAdd = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"num"</span>, <span class="string">"alert(num + 10)"</span>);</span><br><span class="line">doAdd(<span class="number">1</span>);  <span class="comment">// 返回11</span></span><br></pre></td></tr></table></figure><h3 id="2-3-4-arguments对象"><a href="#2-3-4-arguments对象" class="headerlink" title="2.3.4 arguments对象"></a>2.3.4 arguments对象</h3><p>JS函数内置对象：arguments对象，表示函数调用的参数数组。</p><p>1.检测参数个数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">arguments</span>.length  <span class="comment">// 参数数组长度，参数个数</span></span><br></pre></td></tr></table></figure><p>2.模拟函数重载：使用<code>arguments.length</code>判断传递给函数的参数个数，即可模拟重载。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">1</span>) &#123;</span><br><span class="line">    alert(<span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">2</span>) &#123;</span><br><span class="line">    alert(<span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">doAdd(<span class="number">10</span>);    <span class="comment">// 返回11</span></span><br><span class="line">doAdd(<span class="number">10</span>,<span class="number">20</span>); <span class="comment">// 返回30</span></span><br></pre></td></tr></table></figure><h3 id="2-3-5-JS闭包★"><a href="#2-3-5-JS闭包★" class="headerlink" title="2.3.5 JS闭包★"></a>2.3.5 JS闭包★</h3><p><strong>闭包（closure）</strong>指的是词法表示包括不被计算的变量的函数，即函数可以使用函数之外定义的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包实例</span></span><br><span class="line"><span class="keyword">var</span> iBaseNum = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addNum</span>(<span class="params">iNum1, iNum2</span>) </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> iNum1 + iNum2 + iBaseNum;</span><br><span class="line"><span class="comment">// 内部函数作为闭包，获取外部函数的参数iNum1、iNum2，以及全局变量iBaseNum。</span></span><br><span class="line">  &#125;<span class="comment">// doAdd()函数根本不接受参数，它使用的值是从执行环境中获取的。</span></span><br><span class="line">  <span class="keyword">return</span> doAdd(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-JS对象"><a href="#2-4-JS对象" class="headerlink" title="2.4 JS对象"></a>2.4 JS对象</h2><h3 id="2-4-1-Object对象"><a href="#2-4-1-Object对象" class="headerlink" title="2.4.1 Object对象"></a>2.4.1 Object对象</h3><table><thead><tr><th>Object属性&amp;方法</th><th>描述</th></tr></thead><tbody><tr><td>constructor</td><td>指向对象构造器</td></tr><tr><td>prototype</td><td>指向对象原型</td></tr><tr><td>Object.assign({}, obj)</td><td>对象复制</td></tr><tr><td>Object.assign(obj1, obj2, obj3)</td><td>对象合并</td></tr><tr><td>Object.create(proto, [prop_Object])</td><td>模拟类（class）</td></tr><tr><td>Object.is(obj1, obj2)</td><td>判断两个值是否严格相同</td></tr><tr><td>Object.keys(obj)</td><td>返回对象所有属性的数组</td></tr><tr><td>Object.delete(obj.prop)</td><td>删除对象某个属性</td></tr></tbody></table><p><strong>in操作符</strong>：判断属性是否属于对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prop <span class="keyword">in</span> obj  <span class="comment">// 判断prop是否属于obj</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-内置对象"><a href="#2-4-2-内置对象" class="headerlink" title="2.4.2 内置对象"></a>2.4.2 内置对象</h3><p>JS内置对象（本地对象/全局对象）：由 ECMAScript 实现提供的、独立于宿主环境的所有对象，在 ECMAScript 程序开始执行时出现。</p><p>JS内置对象：Object，String，Array，Function，Boolean，Number，Math，Date，RegExp，Error等。</p><p>其中<strong>Object</strong>，<strong>String</strong>，<strong>Array</strong>，<strong>Function</strong>请参考上文。</p><p><strong>Number对象</strong>：</p><table><thead><tr><th>Number属性&amp;方法</th><th>描述</th></tr></thead><tbody><tr><td>NaN</td><td>非数字值</td></tr><tr><td>MAX_VALUE</td><td>最大值</td></tr><tr><td>MIN_VALUE</td><td>最小值</td></tr><tr><td>toFixed(n)</td><td>返回指定n位小数的数字的字符串</td></tr><tr><td>toExponential()</td><td>返回指数为n的科学计数法的数字的字符串</td></tr><tr><td>toPrecision()</td><td>把数字四舍五入格式化为指定的长度</td></tr></tbody></table><p><strong>Math对象</strong>：静态调用方法；Math没有构造方法，不能生成实例。</p><table><thead><tr><th>Math属性&amp;方法</th><th>描述</th></tr></thead><tbody><tr><td>Math.random()</td><td>随机数</td></tr><tr><td>Math.round()</td><td>四舍五入</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr></tbody></table><p><strong>Date对象</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();    <span class="comment">// 当前日期和时间</span></span><br><span class="line"><span class="keyword">var</span> time = date.getTime();     <span class="comment">// 返回从 1970 年 1 月 1 日至今的毫秒数</span></span><br><span class="line"><span class="keyword">var</span> year = date.getFullYear(); <span class="comment">// 获取年份</span></span><br><span class="line">date.setFullYear(yyyy, mm, dd); <span class="comment">// 设置具体的日期</span></span><br></pre></td></tr></table></figure><blockquote><p>详细了解<strong>JS内置对象</strong>请参考：<a href="http://www.w3school.com.cn/jsref/index.asp" target="_blank" rel="noopener">JavaScript 对象参考手册</a>；</p></blockquote><h3 id="2-4-3-创建对象"><a href="#2-4-3-创建对象" class="headerlink" title="2.4.3 创建对象"></a>2.4.3 创建对象</h3><p>1.原始方式一：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.name = <span class="string">"张三"</span>;</span><br><span class="line">obj.age = <span class="number">22</span>;</span><br><span class="line">obj.eat=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.name+<span class="string">"吃馒头"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.原始方式二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"张三"</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.name + <span class="string">"正在吃饭~"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3.工厂方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectFactory</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">name:name,</span><br><span class="line">age:age,</span><br><span class="line">eat:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.name+<span class="string">"吃馒头"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.构造函数★</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name,</span><br><span class="line"><span class="keyword">this</span>.age=age,</span><br><span class="line"><span class="keyword">this</span>.eat=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">"吃馒头"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>this关键字</strong>：指向调用该方法的对象。</p><p><strong>instanceof操作符</strong>：判断对象是否为类（构造方法）的一个实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>;  <span class="comment">// true  判断obj是否为Object的一个实例。</span></span><br></pre></td></tr></table></figure><blockquote><p>在 JavaScript 中，很多时候，你需要避免使用 <code>new</code>关键字。</p></blockquote><h2 id="2-5-JS原型"><a href="#2-5-JS原型" class="headerlink" title="2.5 JS原型"></a>2.5 JS原型</h2><p>JavaScript是一门面向对象的编程语言，Brendan Eich为JavaScript设计了<strong>继承</strong>机制，但为了简化继承，并未引入“类”的概念，而是采用<strong>构造函数</strong>直接生成实例，采用<strong>原型 (prototype) </strong>共享通用数据。</p><!-- more --><h3 id="2-5-1-构造函数"><a href="#2-5-1-构造函数" class="headerlink" title="2.5.1 构造函数"></a>2.5.1 构造函数</h3><p>Brendan Eich为JavaScript设计了<strong>继承</strong>机制，采用<strong>构造函数</strong>直接生成实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name,</span><br><span class="line"><span class="keyword">this</span>.age=age,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用[构造函数]生成实例</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"Tom"</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h3 id="2-5-2-原型对象"><a href="#2-5-2-原型对象" class="headerlink" title="2.5.2 原型对象"></a>2.5.2 原型对象</h3><p><strong>引入prototype属性</strong>：<br>使用构造函数直接生成实例，存在一个问题：无法共享通用数据。<br>为了共享的通用属性和方法，Brendan Eich为构造函数设置了一个<strong>prototype属性</strong>，指向<strong>构造函数的原型对象</strong>。<br>原型对象用于存放所有实例共享的通用属性和方法。构造函数每生成一个实例对象，将自动引用prototype对象中共享的属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name,</span><br><span class="line"><span class="keyword">this</span>.age=age,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型对象：添加共享属性&amp;方法</span></span><br><span class="line">Person.prototype = &#123;<span class="attr">species</span>: <span class="string">'人类'</span>&#125;</span><br><span class="line"><span class="comment">// 使用[构造函数]生成一个实例</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"Tom"</span>,<span class="number">20</span>);</span><br><span class="line"><span class="comment">// 可调用共享属性</span></span><br><span class="line">alert(p1.species); <span class="comment">// 人类</span></span><br></pre></td></tr></table></figure><p><strong>原型对象的属性</strong>：<br>①<code>__proto__</code>：指向<strong>创建它</strong>的<strong>函数对象</strong>的<strong>原型对象</strong>；<br>②<code>constructor</code>：指向构造函数；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Obj.prototype.constructor = Obj</span><br></pre></td></tr></table></figure><h3 id="2-5-3-原型链"><a href="#2-5-3-原型链" class="headerlink" title="2.5.3 原型链"></a>2.5.3 原型链</h3><p><strong>原型链</strong>：JS对象（不论是普通对象还是函数对象）都有<code>__proto__</code>属性，指向<strong>创建它</strong>的<strong>函数对象</strong>的<strong>原型对象</strong>。通过<code>__proto__</code>向上遍历直到<code>Object.prototype.__proto__ = null</code>构成原型链。</p><p>注意：使用<code>__proto__</code>可使<strong>实例（子）</strong>获取<strong>构造器（父）</strong>的原型对象，容易造成不必要的麻烦。所以<code>__proto__</code>仅是为了实现原型链继承机制而存在的一个属性，不推荐在编程中使用。</p><h3 id="2-5-4-原型继承"><a href="#2-5-4-原型继承" class="headerlink" title="2.5.4 原型继承"></a>2.5.4 原型继承</h3><p>原型继承：当查找一个对象的属性时，JavaScript会向上遍历原型链，直到找到相应的属性为止。<br>原型继承的本质：由于所有的实例对象共享同一个prototype对象，那么从外界看起来，prototype对象就好像是实例对象的原型，而实例对象则好像”继承”了prototype对象一样。</p><p>原型继承：设置[子类的原型]是[父类的实例]。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">son.prototype = <span class="keyword">new</span> Father()</span><br></pre></td></tr></table></figure><h2 id="2-6-JS事件机制"><a href="#2-6-JS事件机制" class="headerlink" title="2.6 JS事件机制"></a>2.6 JS事件机制</h2><p>事件一般与函数配合使用，这样就可以使事件驱动函数执行。</p><h3 id="2-6-1-事件类型"><a href="#2-6-1-事件类型" class="headerlink" title="2.6.1 事件类型"></a>2.6.1 事件类型</h3><p>事件三要素：事件源，事件名称，事件处理程序；</p><table><thead><tr><th>事件句柄</th><th>描述</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标单击</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onmouseover</td><td>鼠标覆盖</td></tr><tr><td>onmouseout</td><td>鼠标移开</td></tr><tr><td>onmouseup</td><td>鼠标点击</td></tr><tr><td>onmousedown</td><td>鼠标松开</td></tr><tr><td>onscroll</td><td>窗口滚动</td></tr><tr><td>onchange</td><td>发生改变</td></tr><tr><td>onload</td><td>加载完成</td></tr><tr><td>onunload</td><td>退出页面</td></tr><tr><td>onerror</td><td>加载错误</td></tr><tr><td>onsubmit</td><td>点击提交</td></tr><tr><td>onreset</td><td>点击重置</td></tr><tr><td>onkeydown</td><td>某个键盘的键被按下</td></tr><tr><td>onkeypress</td><td>某个键盘的键被按下或按住</td></tr><tr><td>onkeyup</td><td>某个键盘的键被松开</td></tr></tbody></table><h3 id="2-6-2-事件传播"><a href="#2-6-2-事件传播" class="headerlink" title="2.6.2 事件传播"></a>2.6.2 事件传播</h3><p><strong>事件传播方式</strong>：<br>①事件捕获：Window-&gt;Document -&gt; Element -&gt; Attribute -&gt; Text；<br>②事件冒泡：Window&lt;-Document &lt;- Element &lt;- Attribute &lt;- Text；<br>注意：focus blur scroll事件除外其它的大部分事件都会冒泡 </p><p><strong>阻止事件传播</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.stopPropagation()</span><br></pre></td></tr></table></figure><h3 id="2-6-3-事件注册"><a href="#2-6-3-事件注册" class="headerlink" title="2.6.3 事件注册"></a>2.6.3 事件注册</h3><p><strong>注册/移除事件</strong>的三种方式：<br>①<strong>on事件</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">事件源.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>②<strong>addEventListener()</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">事件源.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,[useCapture])</span><br><span class="line"><span class="comment">// 捕获阶段：useCapture=true; 默认值为false；（IE9+）</span></span><br></pre></td></tr></table></figure><p>③<strong>attachEvent()</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">事件源.attachEvent(eventName,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,[useCapture])</span><br><span class="line"><span class="comment">// 捕获阶段：useCapture=true; 默认值为false；（IE8-）</span></span><br></pre></td></tr></table></figure><p><strong>取消事件默认行为</strong>：</p><p>①阻止独享属性（on+event）绑定的事件的默认事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>②阻止通过addEventListener()添加的事件的默认事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.preventDefault();</span><br></pre></td></tr></table></figure><p>③阻止通过attachEvent()添加的事件的默认事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.returnValue = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h1 id="3-JS-DOM"><a href="#3-JS-DOM" class="headerlink" title="3. JS DOM"></a>3. JS DOM</h1><p>DOM文档对象模型</p><p><img src="http://p6uturdzt.bkt.clouddn.com/jsdom-htmltree.png" alt="DOM树"></p><h2 id="3-1-DOM获取页面元素"><a href="#3-1-DOM获取页面元素" class="headerlink" title="3.1 DOM获取页面元素"></a>3.1 DOM获取页面元素</h2><p>1.根据id获取元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"id"</span>); <span class="comment">// 返回单个元素</span></span><br></pre></td></tr></table></figure><p>2.根据标签名获取元素数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementByTagName(<span class="string">"标签名"</span>); <span class="comment">// 返回数组</span></span><br></pre></td></tr></table></figure><p>3.根据name获取元素数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementByName(<span class="string">"name"</span>); <span class="comment">// 返回数组</span></span><br></pre></td></tr></table></figure><p>4.根据类名获取元素数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElememtByClassName(<span class="string">"类名"</span>); <span class="comment">// 返回数组</span></span><br></pre></td></tr></table></figure><p>5.根据选择器获取元素数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">"选择器"</span>); <span class="comment">// 返回数组</span></span><br></pre></td></tr></table></figure><h2 id="3-2-DOM操作"><a href="#3-2-DOM操作" class="headerlink" title="3.2 DOM操作"></a>3.2 DOM操作</h2><p>1.改变HTML输出流：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write();  <span class="comment">// 直接向HTML输出流写内容。</span></span><br></pre></td></tr></table></figure><p>2.改变HTML内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">元素.innerText;  <span class="comment">// 获取/设置文本值（对代码转义为文本）</span></span><br><span class="line">元素.innerHTML;  <span class="comment">// 获取/设置HTML代码</span></span><br></pre></td></tr></table></figure><p>3.改变HTML属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.HTML属性 = 新属性值 <span class="comment">// 改变HTML属性</span></span><br></pre></td></tr></table></figure><p>4.自定义HTML属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">元素.getAttribute(<span class="string">"属性"</span>);      <span class="comment">// 获取属性</span></span><br><span class="line">元素.setAttribute(<span class="string">"属性"</span>,<span class="string">"值"</span>)  <span class="comment">// 设置属性</span></span><br><span class="line">元素.removeAttribute(<span class="string">"属性"</span>);   <span class="comment">// 移除属性</span></span><br></pre></td></tr></table></figure><p>5.改变CSS样式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.style.CSS样式 = 新样式 <span class="comment">// 改变CSS样式</span></span><br></pre></td></tr></table></figure><blockquote><p>CSS属性名多个单词以-分隔s，JS调用CSS属性名多个单词采用驼峰命名；<br>即在JS中使用fontSize来表示CSS中的font-size。</p></blockquote><h2 id="3-3-DOM节点"><a href="#3-3-DOM节点" class="headerlink" title="3.3 DOM节点"></a>3.3 DOM节点</h2><p>DOM节点：文档Document-&gt;元素Element-&gt;属性Attribute-&gt;文本Text；</p><p><strong>1.当前节点属性</strong>：</p><table><thead><tr><th>当前节点属性</th><th>描述</th></tr></thead><tbody><tr><td>nodeName</td><td>文档节点：#document<br>元素节点：标签名<br>属性节点：属性名<br>文本节点：#text</td></tr><tr><td>nodeValue</td><td>元素节点：undefined / null<br>属性节点：属性值<br>文本节点：文本</td></tr><tr><td>nodeType</td><td>元素：1<br>属性：2<br>文本：3<br>注释：8<br>文档：9</td></tr><tr><td>innerHTML</td><td>读取：当前节点及后代节点的HTML代码<br>写入：HTML代码，新的DOM树</td></tr><tr><td>innerText</td><td>读取：当前节点的文本内容<br>写入：文本值（对html转义）</td></tr><tr><td>textContent</td><td>当前节点及后代节点的文本内容</td></tr></tbody></table><p><strong>2.当前节点的相关节点</strong>：</p><table><thead><tr><th>当前节点的相关节点</th><th>描述</th></tr></thead><tbody><tr><td>ownerDocument</td><td>所属文档</td></tr><tr><td>previousSibling</td><td>前一个同级节点</td></tr><tr><td>nextSibling</td><td>下一个同级节点</td></tr><tr><td>parentNode</td><td>父节点</td></tr><tr><td>parentElement</td><td>父元素</td></tr><tr><td>firstChild</td><td>子节点</td></tr><tr><td>children</td><td>子元素</td></tr></tbody></table><p><strong>3.针对父节点的操作</strong>：</p><table><thead><tr><th>针对父节点的DOM方法</th><th>描述</th></tr></thead><tbody><tr><td>appendChild()</td><td>追加一个子节点</td></tr><tr><td>removeChild()</td><td>移除子节点</td></tr><tr><td>replaceChild()</td><td>替换子节点</td></tr><tr><td>insertBefore(new,old)</td><td>在旧节点前插入新节点</td></tr><tr><td>isEqualNode()</td><td>判断节点是否相同</td></tr></tbody></table><p><strong>4.创建节点</strong>：</p><table><thead><tr><th>创建节点</th><th>描述</th></tr></thead><tbody><tr><td>createAttribute()</td><td>创建属性节点</td></tr><tr><td>createElement()</td><td>创建元素节点</td></tr><tr><td>createTextNode()</td><td>创建文本节点</td></tr></tbody></table><p><strong>5.自定义属性</strong>：</p><table><thead><tr><th>自定义属性</th><th>描述</th></tr></thead><tbody><tr><td>getAttribute(“attr”)</td><td>获取属性</td></tr><tr><td>setAttribute(“attr”, “value”)</td><td>设置属性及属性值</td></tr><tr><td>removeAttribute(“attr”)</td><td>移除属性</td></tr></tbody></table><h1 id="4-JS-BOM"><a href="#4-JS-BOM" class="headerlink" title="4. JS BOM"></a>4. JS BOM</h1><p>BOM浏览器对象模型，其中window对象是BOM顶级对象，document，location，history，navigator都是windows的子对象。</p><h2 id="4-1-window-浏览器窗口"><a href="#4-1-window-浏览器窗口" class="headerlink" title="4.1 window-浏览器窗口"></a>4.1 window-浏览器窗口</h2><p>window对象：浏览器窗口；</p><table><thead><tr><th>window属性&amp;方法</th><th>描述</th></tr></thead><tbody><tr><td>window.name</td><td>window对象名称</td></tr><tr><td>window.innerHeight</td><td>浏览器窗口的内部高度</td></tr><tr><td>window.innerWidth</td><td>浏览器窗口的内部宽度</td></tr></tbody></table><h3 id="4-1-1-原生JS入口函数"><a href="#4-1-1-原生JS入口函数" class="headerlink" title="4.1.1 原生JS入口函数"></a>4.1.1 原生JS入口函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生JS入口函数：等待加载完页面元素后再执行JS代码</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; JS代码 &#125;  <span class="comment">// 原生JS入口函数</span></span><br></pre></td></tr></table></figure><h3 id="4-1-2-JS弹出框"><a href="#4-1-2-JS弹出框" class="headerlink" title="4.1.2 JS弹出框"></a>4.1.2 JS弹出框</h3><p>1.警告框：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.alert(<span class="string">"警告"</span>);  <span class="comment">// 警告框；</span></span><br></pre></td></tr></table></figure><p>2.确认框：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = <span class="built_in">window</span>.confirm(<span class="string">"确定要删除？"</span>); <span class="comment">// 确认框；</span></span><br><span class="line"><span class="comment">// 确定：返回true | 取消：返回false</span></span><br></pre></td></tr></table></figure><p>3.提问框：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> input = <span class="built_in">window</span>.prompt(<span class="string">"你的年龄？"</span>);  <span class="comment">//提问框；</span></span><br><span class="line"><span class="comment">// 确定：返回输入值 | 取消：返回null</span></span><br></pre></td></tr></table></figure><blockquote><p>可省略windows对象，直接使用。</p></blockquote><h3 id="4-1-3-JS定时器"><a href="#4-1-3-JS定时器" class="headerlink" title="4.1.3 JS定时器"></a>4.1.3 JS定时器</h3><p>1.单次定时器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置单次定时器</span></span><br><span class="line"><span class="keyword">var</span> timerId = <span class="built_in">window</span>.setTimerout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;定时任务&#125;,timeout);  <span class="comment">// 只执行一次</span></span><br><span class="line"><span class="comment">// 清除单次定时器</span></span><br><span class="line"><span class="built_in">window</span>.clearTimeout(timerId);</span><br></pre></td></tr></table></figure><p>2.循环定时器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置循环定时器</span></span><br><span class="line"><span class="keyword">var</span> timerId = <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;定时任务&#125;,timeout);  <span class="comment">// 循环执行</span></span><br><span class="line"><span class="comment">// 清除循环定时器</span></span><br><span class="line"><span class="built_in">window</span>.clearInterval(timerId);</span><br></pre></td></tr></table></figure><blockquote><p>可省略windows对象，直接使用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环定时器：由单次定时器取消。</span></span><br><span class="line"><span class="keyword">var</span> timer2 = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="keyword">new</span> <span class="built_in">Date</span>());<span class="comment">//输出当前时间</span></span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">clearInterval(timer2);<span class="comment">//清除定时器timer2</span></span><br><span class="line">&#125;,<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><h2 id="4-2-location-浏览器url"><a href="#4-2-location-浏览器url" class="headerlink" title="4.2 location-浏览器url"></a>4.2 location-浏览器url</h2><p>location对象：浏览器地址</p><table><thead><tr><th>location属性&amp;方法</th><th>描述</th></tr></thead><tbody><tr><td>location.href</td><td>获取url</td></tr><tr><td>location.protocol</td><td>返回所使用的 web 协议（http:// 或 https://）</td></tr><tr><td>location.hostname</td><td>返回 web 主机的域名</td></tr><tr><td>location.pathname</td><td>返回当前页面的路径和文件名</td></tr><tr><td>location.port</td><td>返回 web 主机的端口（80 或 443）</td></tr><tr><td>location.assign()</td><td>加载页面</td></tr><tr><td>location.reload()</td><td>重新加载</td></tr></tbody></table><blockquote><p>url统一资源定位符：scheme://host:port/path?query#fragment</p><table><thead><tr><th>url元素</th><th>描述</th></tr></thead><tbody><tr><td>scheme</td><td>通信协议；如http，ftp，maito，https等</td></tr><tr><td>host</td><td>主机；服务器域名系统主机名、IP地址；</td></tr><tr><td>port</td><td>端口；http默认端口80；</td></tr><tr><td>path</td><td>路径；</td></tr><tr><td>query</td><td>查询；可选，用于给动态网页传递参数；<br>参数名1=值1&amp;参数名2=值2；</td></tr><tr><td>fragment</td><td>信息片段；字符串，锚点；</td></tr></tbody></table></blockquote><h2 id="4-3-history-会话历史"><a href="#4-3-history-会话历史" class="headerlink" title="4.3 history-会话历史"></a>4.3 history-会话历史</h2><p>history对象：会话历史</p><table><thead><tr><th>history属性&amp;方法</th><th>描述</th></tr></thead><tbody><tr><td>back()</td><td>后退，go(-1)</td></tr><tr><td>forword()</td><td>前进，go(1)</td></tr><tr><td>go(n)</td><td>跳转n步</td></tr></tbody></table><h2 id="4-4-navigator-浏览器信息"><a href="#4-4-navigator-浏览器信息" class="headerlink" title="4.4 navigator-浏览器信息"></a>4.4 navigator-浏览器信息</h2><p>navigator对象：浏览器信息</p><table><thead><tr><th>navigator属性&amp;方法</th><th>描述</th></tr></thead><tbody><tr><td>navigator.appName</td><td>浏览器名称</td></tr><tr><td>navigator.appVersion</td><td>浏览器版本</td></tr><tr><td>navigator.language</td><td>浏览器语言</td></tr><tr><td>navigator.platform</td><td>操作系统类型</td></tr><tr><td>navigator.userAgent</td><td>浏览器设定的<code>User-Agent</code>字符串</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;!--# JavaScript--&gt;
&lt;p&gt;JavaScript 是一种通用的网络脚本语言，常用来为网页改进设计、验证表单、添加动态功能等，实现用户交互。&lt;br&gt;JavaScript 是一门轻量级，解释型，基于原型，面向对象，弱类型的网络脚本语言。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解释型：无需编译，在程序运行中逐行进行解释执行。&lt;/li&gt;
&lt;li&gt;弱类型：对使用的数据类型不严格要求。&lt;/li&gt;
&lt;li&gt;面向对象：JS 基本对象，DOM 对象，BOM 对象。&lt;/li&gt;
&lt;li&gt;跨平台：不依赖于操作系统，仅需要浏览器的支持。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Web前端" scheme="https://liziczh.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Web前端" scheme="https://liziczh.com/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Web | CSS</title>
    <link href="https://liziczh.com/web-css.html"/>
    <id>https://liziczh.com/web-css.html</id>
    <published>2018-04-05T09:21:22.000Z</published>
    <updated>2018-06-25T04:06:46.234Z</updated>
    
    <content type="html"><![CDATA[<!--# CSS--><p>CSS（Cascading Style Sheets，层叠样式表），主要通过为HTML元素增添样式的方式修饰静态页面，实现了页面内容与样式分离。目前主流网页布局均采用 <strong>div+CSS</strong> 方式实现。</p><a id="more"></a><h1 id="1-CSS基础"><a href="#1-CSS基础" class="headerlink" title="1. CSS基础"></a>1. CSS基础</h1><h2 id="1-1-CSS三大特性"><a href="#1-1-CSS三大特性" class="headerlink" title="1.1 CSS三大特性"></a>1.1 CSS三大特性</h2><ol><li><strong>层叠</strong>性：权重高的样式会覆盖权重低的样式；</li><li>继承性：子元素继承父元素的样式；</li><li>优先级：作用域越小，优先级越大；<ul><li>不同级别：行内样式&gt;id选择器&gt;类选择器&gt;标签选择器&gt;通配符&gt;继承；</li><li>同一级别：后写的会覆盖先写的样式；</li></ul></li></ol><h2 id="1-2-CSS语法规则"><a href="#1-2-CSS语法规则" class="headerlink" title="1.2 CSS语法规则"></a>1.2 CSS语法规则</h2><p>CSS注释：<code>/* CSS注释内容 */</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CSS注释内容 */</span></span><br><span class="line">选择器&#123; </span><br><span class="line">样式属性1:值1;</span><br><span class="line">样式属性2:值2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-引入CSS样式表"><a href="#1-3-引入CSS样式表" class="headerlink" title="1.3 引入CSS样式表"></a>1.3 引入CSS样式表</h2><p>1.行内样式表（内联表）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签</span> <span class="attr">style</span>=<span class="string">"属性1:值1;属性2:值2;"</span>&gt;</span><span class="tag">&lt;/<span class="name">标签</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.内部样式表（内嵌表）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    选择器&#123; </span></span><br><span class="line"><span class="undefined">      样式属性1:值1;</span></span><br><span class="line"><span class="undefined">      样式属性2:值2;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.外部样式表（外联表）：外部<strong>.css</strong>文件</p><p>4.引入外部样式表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"url"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>5.三种样式表总结</p><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>权重高</td><td>样式与结构未分离</td><td>较少</td><td>单个标签</td></tr><tr><td>内部样式表</td><td>样式与结构部分分离</td><td>未彻底分离</td><td>较多</td><td>整个页面</td></tr><tr><td>外部样式表</td><td>样式与结构完全分离</td><td>需引入</td><td>多，<strong>推荐</strong></td><td>整个站点</td></tr></tbody></table><h1 id="2-CSS样式"><a href="#2-CSS样式" class="headerlink" title="2. CSS样式"></a>2. CSS样式</h1><h2 id="2-1-CSS字体-font★"><a href="#2-1-CSS字体-font★" class="headerlink" title="2.1 CSS字体-font★"></a>2.1 CSS字体-font★</h2><p>1.字体系列：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span> : "宋体","微软雅黑";</span><br></pre></td></tr></table></figure><p>font-family是一个字体族的优先表，如果浏览器不支持第一个字体，则会尝试下一个。</p><p>2.字体风格：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">font-style : normal/italic/oblique;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- normal：标准</span></span><br><span class="line"><span class="comment">- italic：斜体</span></span><br><span class="line"><span class="comment">- oblique：倾斜</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>3.字体粗细：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-weight</span> : 400;</span><br><span class="line"><span class="comment">/* 加粗度：100,200,300,400,500,600,700,800,900 */</span></span><br><span class="line"><span class="comment">/* normal=400 | blod=700 */</span></span><br><span class="line"><span class="comment">/* bolder：更粗 | lighter：更细*/</span></span><br></pre></td></tr></table></figure><p>4.字体大小：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-size : px/em/%</span><br></pre></td></tr></table></figure><p>5.font综合设置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font : font-style font-weight font-size/line-height font-family</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line"><span class="selector-tag">-</span> ！英文字体名一般不需要加引号，设置英文字体名必须位于中文字体名之前；</span><br><span class="line"><span class="selector-tag">-</span> ！加粗度没有单位，而且`<span class="selector-tag">x00</span>`只有9个值，不存在`123`这种值；</span><br><span class="line"><span class="selector-tag">-</span> ！网页普遍是`14<span class="selector-tag">px</span>`；尽量设偶数<span class="selector-tag">px</span>，奇数<span class="selector-tag">px</span>在<span class="selector-tag">IE6</span>存在<span class="selector-tag">bug</span>；</span><br></pre></td></tr></table></figure><h2 id="2-2-CSS文本-text★"><a href="#2-2-CSS文本-text★" class="headerlink" title="2.2 CSS文本-text★"></a>2.2 CSS文本-text★</h2><p>1.文本缩进：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-indent : em/px/%;</span><br></pre></td></tr></table></figure><p>2.水平对齐：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-align : left/center/right;</span><br></pre></td></tr></table></figure><p>3.单词间隔（只适用于英文）:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">word-spacing : em/px;</span><br></pre></td></tr></table></figure><p>4.字符间隔：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">letter-spacin : em/px;</span><br></pre></td></tr></table></figure><p>5.文本装饰：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">text-decoration : none/underline/overline/line-through/blink;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">- none：无</span></span><br><span class="line"><span class="comment">- underline：下划线</span></span><br><span class="line"><span class="comment">- overline：上划线</span></span><br><span class="line"><span class="comment">- line-through：穿过一条线</span></span><br><span class="line"><span class="comment">- blink：闪</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>6.行高：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">line-height : px/em/%;  </span><br><span class="line"><span class="comment">/* 一般文本行高比字号大7-8像素即可 */</span></span><br></pre></td></tr></table></figure><p>7.文本阴影：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-shadow</span> : 水平位置 垂直位置 模糊偏移 阴影颜色;</span><br></pre></td></tr></table></figure><p>8.【CSS3】<strong>颜色透明度</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rgba</span>(0~255, 0~255, 0~255, 0~1);</span><br><span class="line"><span class="comment">/* 模糊度：0~1 */</span></span><br></pre></td></tr></table></figure><h2 id="2-3-CSS背景-background★"><a href="#2-3-CSS背景-background★" class="headerlink" title="2.3 CSS背景-background★"></a>2.3 CSS背景-background★</h2><p>1.背景色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>：<span class="selector-tag">rgb</span>();</span><br></pre></td></tr></table></figure><p>2.背景图：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span> : <span class="selector-tag">url</span>();</span><br></pre></td></tr></table></figure><p>3.背景平铺：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">background-repeat : repeat/no-repeat;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- repeat：平铺</span></span><br><span class="line"><span class="comment">- no-repeat：不平铺</span></span><br><span class="line"><span class="comment">- repeat-x：横向平铺</span></span><br><span class="line"><span class="comment">- repeat-y：纵向平铺</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>3.背景定位：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">background-position : X坐标/位置 Y坐标/位置;</span><br><span class="line"><span class="comment">/* 坐标：px/em/% */</span></span><br><span class="line"><span class="comment">/* 位置：top，bottom，center，left，right； </span></span><br><span class="line"><span class="comment">   若只设了一个值，那么第二个值将是center； */</span></span><br></pre></td></tr></table></figure><p>4.背景关联：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">backgrount-attchment : fixed/scroll;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- scroll：默认值。背景图像会随着页面其余部分的滚动而移动；</span></span><br><span class="line"><span class="comment">- fixed：图像固定；当页面的其余部分滚动时，背景图像不会移动；</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>5.背景综合设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">bg-color</span> <span class="selector-tag">bg-image</span> <span class="selector-tag">bg-repeat</span> <span class="selector-tag">bg-attchment</span> <span class="selector-tag">bg-position</span>(<span class="selector-tag">x</span>,<span class="selector-tag">y</span>);</span><br></pre></td></tr></table></figure><p>6.【CSS3】背景尺寸：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">background-size : contain/cover;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- contain：保证背景图片完整性；</span></span><br><span class="line"><span class="comment">- cover：保证背景图片完全覆盖整个区域；</span></span><br><span class="line"><span class="comment">- width&amp;height：设置背景的宽&amp;高；（一般设置1个参数，设置2个参数会导致图片变形）</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="2-4-CSS列表-list-style"><a href="#2-4-CSS列表-list-style" class="headerlink" title="2.4 *CSS列表-list-style"></a>2.4 *CSS列表-list-style</h2><p>1.列表项标志：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list-style-type : none/disc/circle/square/decimal...;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">none：无</span></span><br><span class="line"><span class="comment">disc：实心圆</span></span><br><span class="line"><span class="comment">circle：空心圆</span></span><br><span class="line"><span class="comment">square：实心方块</span></span><br><span class="line"><span class="comment">decimal：数字</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>2.列表项图像：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">list-style-image</span> : <span class="selector-tag">url</span>();</span><br></pre></td></tr></table></figure><p>3.列表标志位置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list-style-position : inside/outside;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">outside：默认值。保持标记位于文本的左侧。列表项目标记放置在文本以外，且环绕文本不根据标记对齐。</span></span><br><span class="line"><span class="comment">inside：列表项目标记放置在文本以内，且环绕文本根据标记对齐。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>4.列表综合设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">list-style</span> : <span class="selector-tag">image</span> <span class="selector-tag">type</span> <span class="selector-tag">position</span>;</span><br></pre></td></tr></table></figure><h2 id="2-5-CSS表格"><a href="#2-5-CSS表格" class="headerlink" title="2.5 *CSS表格"></a>2.5 *CSS表格</h2><p>1.折叠边框</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-collapse</span> : <span class="selector-tag">collapse</span>;</span><br></pre></td></tr></table></figure><p>2.水平对齐</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-align : left/center/right;</span><br></pre></td></tr></table></figure><p>3.垂直对齐</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vertical-align : top/center/bottom;</span><br></pre></td></tr></table></figure><p>4.空单元格显示/隐藏</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">empty-cells : show/hide;</span><br></pre></td></tr></table></figure><p>5.表格标题在上/在下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">caption-side : top/bottom;</span><br></pre></td></tr></table></figure><h2 id="2-6-CSS轮廓-outline"><a href="#2-6-CSS轮廓-outline" class="headerlink" title="2.6 *CSS轮廓-outline"></a>2.6 *CSS轮廓-outline</h2><p>1.轮廓颜色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">outline-color</span> : <span class="selector-tag">rgb</span>()</span><br></pre></td></tr></table></figure><p>2.轮廓样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">outline-style : solid/dotted/dashed/double...;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- soild：实线</span></span><br><span class="line"><span class="comment">- dotted：点线</span></span><br><span class="line"><span class="comment">- dashed：虚线</span></span><br><span class="line"><span class="comment">- double：双实线</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>3.轮廓宽度：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">outline-width : thick/medium/thin/px;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- thick：粗</span></span><br><span class="line"><span class="comment">- medium：中</span></span><br><span class="line"><span class="comment">- thin：细</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>4.轮廓综合设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">outline</span> : <span class="selector-tag">color</span> <span class="selector-tag">style</span> <span class="selector-tag">width</span>;</span><br></pre></td></tr></table></figure><h2 id="2-7-标签显示模式★"><a href="#2-7-标签显示模式★" class="headerlink" title="2.7 标签显示模式★"></a>2.7 标签显示模式★</h2><table><thead><tr><th>display</th><th>描述</th></tr></thead><tbody><tr><td><code>none</code></td><td>不显示</td></tr><tr><td><code>block</code></td><td>块级元素</td></tr><tr><td><code>inline</code></td><td>行内元素</td></tr><tr><td><code>inline-block</code></td><td>行内块元素</td></tr></tbody></table><h2 id="2-8-内容溢出盒子★"><a href="#2-8-内容溢出盒子★" class="headerlink" title="2.8 内容溢出盒子★"></a>2.8 内容溢出盒子★</h2><table><thead><tr><th>overflow</th><th>描述</th></tr></thead><tbody><tr><td><code>visible</code></td><td>默认值。内容溢出部分显示在盒子外；</td></tr><tr><td><code>hidden</code></td><td>隐藏内容溢出部分</td></tr><tr><td><code>scroll</code></td><td>如果内容溢出会被修剪，则浏览器会显示滚动条以便查看其余的内容；</td></tr><tr><td><code>auto</code></td><td>如果内容溢出被修剪，则浏览器会显示滚动条以便查看其余的内容；</td></tr></tbody></table><h1 id="3-CSS选择器"><a href="#3-CSS选择器" class="headerlink" title="3. CSS选择器"></a>3. CSS选择器</h1><h2 id="3-1-元素选择器"><a href="#3-1-元素选择器" class="headerlink" title="3.1 元素选择器"></a>3.1 元素选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标签&#123; </span><br><span class="line">属性:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-类选择器"><a href="#3-2-类选择器" class="headerlink" title="3.2 类选择器"></a>3.2 类选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.类名&#123;</span><br><span class="line">属性:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单类名调用：<code>class=&quot;类名&quot;</code>；<br>多类名调用：<code>class=&quot;类名1 类名2 ...&quot;</code>；</p><h2 id="3-3-id选择器"><a href="#3-3-id选择器" class="headerlink" title="3.3 id选择器"></a>3.3 id选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#id</span>&#123;</span><br><span class="line">属性:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-通配符选择器"><a href="#3-4-通配符选择器" class="headerlink" title="3.4 通配符选择器"></a>3.4 通配符选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*&#123;                </span><br><span class="line">属性:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>作用域：整个HTML页面</p></blockquote><h2 id="3-5-交集选择器"><a href="#3-5-交集选择器" class="headerlink" title="3.5 交集选择器"></a>3.5 交集选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器1选择器2&#123;</span><br><span class="line">    属性:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-并集选择器"><a href="#3-6-并集选择器" class="headerlink" title="3.6 并集选择器"></a>3.6 并集选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器1,选择器2&#123;</span><br><span class="line">    属性:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-7-后代选择器★"><a href="#3-7-后代选择器★" class="headerlink" title="3.7 后代选择器★"></a>3.7 后代选择器★</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">先代选择器 后代选择器&#123;</span><br><span class="line">    属性:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>作用于先代元素内的[所有的后代元素]；</p></blockquote><h2 id="3-8-子元素选择器★"><a href="#3-8-子元素选择器★" class="headerlink" title="3.8 子元素选择器★"></a>3.8 子元素选择器★</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">父选择器 &gt; 子选择器&#123;</span><br><span class="line">    属性:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>只作用于父元素内的[直接子元素]；</p></blockquote><h2 id="3-9-相邻兄弟选择器"><a href="#3-9-相邻兄弟选择器" class="headerlink" title="3.9 相邻兄弟选择器"></a>3.9 相邻兄弟选择器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">伯选择器 + 仲选择器&#123;</span><br><span class="line">    属性:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>作用于<strong>紧接在</strong>伯元素后的[仲元素]；</p></blockquote><h2 id="3-10-属性选择器"><a href="#3-10-属性选择器" class="headerlink" title="3.10 属性选择器"></a>3.10 属性选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[属性]</span>&#123;</span><br><span class="line">    属性:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标签<span class="selector-attr">[属性=值]</span>&#123;</span><br><span class="line">    属性:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-11-伪类选择器"><a href="#3-11-伪类选择器" class="headerlink" title="3.11 伪类选择器"></a>3.11 伪类选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器:伪类&#123;</span><br><span class="line">属性:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1.<code>&lt;a&gt;</code>链接伪类：</strong></p><ul><li><code>a:link</code>：未访问的链接；</li><li><code>a:visited</code>：已访问的链接；</li><li><code>a:hover</code>：鼠标移动到链接；</li><li><code>a:active</code>：鼠标点击时的连接；</li></ul><p><strong>2.位置结构伪类：</strong></p><ul><li><code>first-child</code>：第一个子元素；</li><li><code>last-child</code>：最后一个子元素；</li><li><code>nth-child(n)</code>：第n个元素（n=1,2,3…）；</li><li><code>nth-last-child(n)</code>：倒数第n个元素（n=1,2,3…）;<br>[n=<code>odd</code>：奇数 | n=<code>even</code>：偶数]</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line"><span class="selector-tag">-</span> ！不是第一个<span class="selector-tag">HTML</span>标签，而是第一个<span class="selector-tag">HTML</span>元素</span><br><span class="line"><span class="selector-tag">html</span>元素：文本，图像，链接；</span><br></pre></td></tr></table></figure><p><strong>3.【CSS3】目标伪类：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*:target 选择器用于选取当前活动的目标元素*/</span></span><br><span class="line"><span class="selector-pseudo">:target</span>&#123;</span><br><span class="line">    属性:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-12-伪元素选择器"><a href="#3-12-伪元素选择器" class="headerlink" title="3.12 伪元素选择器"></a>3.12 伪元素选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标签::伪元素&#123;</span><br><span class="line">    属性:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>伪元素：</strong></p><ul><li><p><code>first-line</code>：第一行；</p></li><li><p><code>first-letter</code>：第一个字符；</p></li><li><p><code>before</code>：在标签之前添加<code>content:新内容</code>；</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标签::before&#123;</span><br><span class="line">content:新内容;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>after</code>：在标签之后添加<code>content:新内容</code>；</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标签::after&#123;</span><br><span class="line">content:新内容;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>selection</code>：选中区域；</li></ul><h1 id="4-CSS框模型（Box-Model）★"><a href="#4-CSS框模型（Box-Model）★" class="headerlink" title="4. CSS框模型（Box Model）★"></a>4. CSS框模型（Box Model）★</h1><p><img src="http://p6uturdzt.bkt.clouddn.com/css-boxmodel.gif" alt="BoxModel"></p><h2 id="4-1-边框-border"><a href="#4-1-边框-border" class="headerlink" title="4.1 边框-border"></a>4.1 边框-border</h2><p>1.边框宽度：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-width</span> : <span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p>2.边框样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">border-style : solid/dashed/dotted/double;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- solid：实线</span></span><br><span class="line"><span class="comment">- dashed：虚线</span></span><br><span class="line"><span class="comment">- dotted：点线</span></span><br><span class="line"><span class="comment">- double：双实线</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>3.边框颜色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-color</span> : <span class="selector-tag">rgb</span>();</span><br></pre></td></tr></table></figure><p>4.边框综合设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span> : <span class="selector-tag">width</span> <span class="selector-tag">style</span> <span class="selector-tag">color</span>;</span><br></pre></td></tr></table></figure><p>5.单边边框：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">border-top/right/bottom/left-属性:值;</span><br><span class="line"><span class="comment">/* 单独设置某一边，设置方式与border同理 */</span></span><br></pre></td></tr></table></figure><p>6.圆角边框：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span> : 左上角半径<span class="selector-tag">px</span> 右上角半径<span class="selector-tag">px</span> 右下角半径<span class="selector-tag">px</span> 左下角半径<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><h2 id="4-2-内边距-padding"><a href="#4-2-内边距-padding" class="headerlink" title="4.2 内边距-padding"></a>4.2 内边距-padding</h2><p>1.内边距：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding</span> : <span class="selector-tag">top-px</span> <span class="selector-tag">right-px</span> <span class="selector-tag">bottom-px</span> <span class="selector-tag">left-px</span></span><br></pre></td></tr></table></figure><p>2.单边内边距：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">padding-top/right/bottom/left : px</span><br></pre></td></tr></table></figure><h2 id="4-3-外边距-margin"><a href="#4-3-外边距-margin" class="headerlink" title="4.3 外边距-margin"></a>4.3 外边距-margin</h2><p>1.外边距：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin</span><span class="selector-pseudo">:top-px</span> <span class="selector-tag">right-px</span> <span class="selector-tag">bottom-px</span> <span class="selector-tag">left-px</span>;</span><br></pre></td></tr></table></figure><p>2.单边外边距：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">margin-top/right/bottom/left : px;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">border/padding/margin综合设置提示：</span><br><span class="line"><span class="selector-tag">-</span> 可设置四个参数，分别对应<span class="selector-tag">top-right-bottom-left</span>，顺时针遍历设置；</span><br><span class="line">- 若只设置了1个value，则top=right=bottom=left=value；</span><br><span class="line">- 若只设置了2个value，则top=val_1,right=val_2,bottom=val_1,left=val_2；顺时针遍历赋值；</span><br><span class="line">- 若只设置了3个value，则top=val_1,right=val_2,bottom=val_3,left=val_1；顺时针遍历赋值；</span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">border-radius</span>半径设置顺序：左上<span class="selector-tag">-</span>右上<span class="selector-tag">-</span>右下<span class="selector-tag">-</span>坐下；顺时针遍历；</span><br></pre></td></tr></table></figure><h2 id="4-4-垂直外边距合并现象★"><a href="#4-4-垂直外边距合并现象★" class="headerlink" title="4.4 垂直外边距合并现象★"></a>4.4 垂直外边距合并现象★</h2><p>1.<strong>相邻盒子</strong>垂直外边距合并，margin合并取最大值；</p><p>&nbsp;&nbsp;&nbsp;解决方案：只设置一个margin；</p><p>2.<strong>嵌套盒子</strong>垂直外边距合并。</p><p>&nbsp;&nbsp;&nbsp;解决方案①：<strong><code>overflow:hidden</code></strong>；</p><p>&nbsp;&nbsp;&nbsp;解决方案②：使用<code>border</code>，<code>padding</code>；</p><h2 id="4-5-CSS3盒子-amp-IE6盒子"><a href="#4-5-CSS3盒子-amp-IE6盒子" class="headerlink" title="4.5 CSS3盒子&amp;IE6盒子"></a>4.5 CSS3盒子&amp;IE6盒子</h2><ul><li>IE6框模型：<code>box-sizing:content-box</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">IE6</span>框的大小：【<span class="selector-tag">width</span>+左右<span class="selector-tag">padding</span>+左右<span class="selector-tag">border</span>+左右<span class="selector-tag">margin</span>】</span><br><span class="line">×【<span class="selector-tag">height</span>+上下<span class="selector-tag">padding</span>+上下<span class="selector-tag">border</span>+上下<span class="selector-tag">margin</span>】</span><br></pre></td></tr></table></figure><ul><li>CSS3框模型：<code>box-sizing:border-box</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">CSS3</span>框的大小：【<span class="selector-tag">width</span>+左右<span class="selector-tag">margin</span>】×【<span class="selector-tag">height</span>+上下<span class="selector-tag">margin</span>】</span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">CSS3</span>盒的<span class="selector-attr">[width&amp;height]</span>包含<span class="selector-attr">[padding+border]</span></span><br></pre></td></tr></table></figure><h1 id="5-浮动"><a href="#5-浮动" class="headerlink" title="5. 浮动"></a>5. 浮动</h1><h2 id="5-1-浮动-float（难点）"><a href="#5-1-浮动-float（难点）" class="headerlink" title="5.1 浮动-float（难点）"></a>5.1 浮动-float（难点）</h2><p><strong>浮动：浮动块不在文档流中，不占文档流位置；但占浮动位置</strong>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float:left/right;</span><br></pre></td></tr></table></figure><p>（未完待详细解释）</p><h2 id="5-2-清除浮动-clear★"><a href="#5-2-清除浮动-clear★" class="headerlink" title="5.2 清除浮动-clear★"></a>5.2 清除浮动-clear★</h2><p>clear 属性规定元素的哪一侧不允许其他浮动元素。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear:left/right/both</span><br></pre></td></tr></table></figure><p><strong>清除浮动的方式：</strong></p><p>1.【W3C推荐】在盒子末尾再添加一个如下的空盒子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear:both;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在盒子样式中添加溢出隐藏样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span></span><br></pre></td></tr></table></figure><p>3.为盒子添加如下样式，在每次结束后都清除浮动：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">clear</span>:both&#125;  <span class="comment">/* 只适用于IE6、IE7。 */</span></span><br></pre></td></tr></table></figure><h1 id="6-定位"><a href="#6-定位" class="headerlink" title="6. 定位"></a>6. 定位</h1><h2 id="6-1-定位简介（难点）"><a href="#6-1-定位简介（难点）" class="headerlink" title="6.1 定位简介（难点）"></a>6.1 定位简介（难点）</h2><table><thead><tr><th>position</th><th>是否占文档流</th><th>定位策略</th></tr></thead><tbody><tr><td><code>static</code>：静态定位</td><td>占文档流</td><td></td></tr><tr><td><code>fixed</code>：固定定位</td><td>不占文档流</td><td>相对于视窗进行定位</td></tr><tr><td><code>relative</code>：相对定位</td><td>占文档流原位置</td><td>相对于原位置进行边偏移</td></tr><tr><td><code>absolute</code>：绝对定位</td><td>不占文档流</td><td>相对于其已定位的包含块定位</td></tr></tbody></table><h2 id="6-2-边偏移"><a href="#6-2-边偏移" class="headerlink" title="6.2 边偏移"></a>6.2 边偏移</h2><ol><li>前提：float || position || 不占文档流；</li><li>边偏移：<code>top</code>，<code>bottom</code>，<code>left</code>，<code>right</code>；</li></ol><h2 id="6-3-相对定位★"><a href="#6-3-相对定位★" class="headerlink" title="6.3 相对定位★"></a>6.3 相对定位★</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:relative</span></span><br></pre></td></tr></table></figure><p>1.相对于在文档流中的原位置进行边偏移；</p><p>2.仍占据文档流中的原位置；</p><p><img src="http://p6uturdzt.bkt.clouddn.com/css-relative.gif" alt="relative"></p><h2 id="6-4-绝对定位★"><a href="#6-4-绝对定位★" class="headerlink" title="6.4 绝对定位★"></a>6.4 绝对定位★</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span></span><br></pre></td></tr></table></figure><p>1.相对于[<strong>其已定位的包含块</strong>]进行边偏移；</p><p>2.已从<strong>文档流</strong>中<strong>完全删除</strong>，就好像该元素原来不存在一样；</p><p>3.元素定位后生成一个<strong>块级框</strong>，而不论原来它在正常流中生成何种类型的框；</p><p>4.绝对定位与文档流无关，所以可以覆盖在页面其他元素上；</p><p>5.可通过<code>z-index</code>控制堆叠次序；<code>z-index</code> 仅能在定位元素上奏效；</p><p>6.一般采取[子绝父相]策略；</p><h1 id="7-页面日常开发习惯"><a href="#7-页面日常开发习惯" class="headerlink" title="7. 页面日常开发习惯"></a>7. 页面日常开发习惯</h1><p>页面布局：div+CSS；</p><p>使用外部样式表，引入外部.css文件；</p><p>例行设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.清除盒子内外边距：*&#123;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">margin</span>:<span class="number">0</span>;&#125;；</span><br><span class="line">2.链接取消下划线：<span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>:none&#125;；</span><br><span class="line">3.列表取消列表项标志：<span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>:none&#125;；</span><br></pre></td></tr></table></figure><p>功能型样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-外边距实现盒子水平居中：margin:0 auto；</span><br><span class="line">-垂直居中：line-height:盒高；</span><br><span class="line">-清除浮动：<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear:both;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>；</span><br></pre></td></tr></table></figure><h1 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h1><h2 id="CSS长度"><a href="#CSS长度" class="headerlink" title="CSS长度"></a>CSS长度</h2><table><thead><tr><th>相对长度单位</th><th>描述</th></tr></thead><tbody><tr><td>px</td><td>像素值</td></tr><tr><td>em</td><td>相对于当前字符的尺寸（自适应）</td></tr><tr><td>%</td><td>百分比</td></tr></tbody></table><table><thead><tr><th>绝对长度单位</th><th>描述</th></tr></thead><tbody><tr><td>cm</td><td>厘米</td></tr><tr><td>mm</td><td>毫米</td></tr><tr><td>in</td><td>英寸</td></tr><tr><td>pt</td><td>磅（1pt=1/72英寸）</td></tr></tbody></table><h2 id="CSS颜色"><a href="#CSS颜色" class="headerlink" title="CSS颜色"></a>CSS颜色</h2><table><thead><tr><th>单位</th><th>描述</th></tr></thead><tbody><tr><td><code>color_name</code></td><td>颜色名称（如red）</td></tr><tr><td><code>rgb(0~255,0~255,0~255)</code></td><td>RGB值（如rgb(0,0,0)）</td></tr><tr><td><code>rgb(x%,x%,x%)</code></td><td>RGB百分比值（如rgb(100%,0%,0%)）</td></tr><tr><td><code>#rrggbb</code></td><td>十六进制数（如#c3c3c3）</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;!--# CSS--&gt;
&lt;p&gt;CSS（Cascading Style Sheets，层叠样式表），主要通过为HTML元素增添样式的方式修饰静态页面，实现了页面内容与样式分离。目前主流网页布局均采用 &lt;strong&gt;div+CSS&lt;/strong&gt; 方式实现。&lt;/p&gt;
    
    </summary>
    
      <category term="Web前端" scheme="https://liziczh.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Web前端" scheme="https://liziczh.com/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Web | HTML</title>
    <link href="https://liziczh.com/web-html.html"/>
    <id>https://liziczh.com/web-html.html</id>
    <published>2018-04-03T14:36:54.000Z</published>
    <updated>2018-06-25T04:06:05.798Z</updated>
    
    <content type="html"><![CDATA[<!--# HTML--><p>HTML（Hyper Text Mark-up Language，超文本标记语言），一种使用标记标签 (tag) 描述网页的语言，其中的“超文本“是指页面内除文本之外还可以包含图片、链接、程序、音频、视频等非文字元素。<br>HTML 常用于编写页面主体结构，CSS 常用于对页面进行静态修饰，JavaScript 常用于对网页增加动态功能。</p><a id="more"></a><h1 id="1-HTML基本结构"><a href="#1-HTML基本结构" class="headerlink" title="1. HTML基本结构"></a>1. HTML基本结构</h1><p>HTML注释：<code>&lt;!-- HTML注释格式 --&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML注释格式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 基本HTML文档格式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>文档标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">文档主体内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标准HTML文档格式 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>  <span class="comment">&lt;!-- H5文档类型=html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>  <span class="comment">&lt;!-- language=English --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span> <span class="comment">&lt;!-- 字符集 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 屏幕自适应大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    文档主体内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-HTML-头部标签"><a href="#2-HTML-头部标签" class="headerlink" title="2. HTML-头部标签"></a>2. HTML-头部标签</h1><h2 id="2-1-meta标签-元信息"><a href="#2-1-meta标签-元信息" class="headerlink" title="2.1 meta标签-元信息"></a>2.1 meta标签-元信息</h2><p>(1) meta标签：页面元信息，位于<code>&lt;head&gt;&lt;/head&gt;</code>中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">""</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>(2) meta标签属性：<strong>键值对</strong></p><ul><li>name:content</li><li>http-equiv:content</li></ul><table><thead><tr><th><code>&lt;meta/&gt;</code>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>content</td><td>some_text</td><td>定义与 http-equiv 或 name 属性相关的元信息</td></tr><tr><td>name</td><td>author<br><strong>description</strong><br><strong>keywords</strong><br>generator<br>revised<br>others</td><td>把 content 属性关联到一个name。</td></tr><tr><td>http-equiv</td><td>content-type<br>expires<br>refresh<br>set-cookie</td><td>把 content 属性关联到 http 头部</td></tr><tr><td>scheme</td><td>some_text</td><td>定义用于翻译 content 属性值的格式</td></tr></tbody></table><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>京东(JD.COM)-正品低价、品质保障、配送及时、轻松购物！<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"京东JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Keywords"</span> <span class="attr">content</span>=<span class="string">"网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,京东"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-link标签-链接外部资源"><a href="#2-2-link标签-链接外部资源" class="headerlink" title="2.2 link标签-链接外部资源"></a>2.2 link标签-链接外部资源</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--链接外部css文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"文件url"</span> /&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--链接icon文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"favicon.ico"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-base标签-基准链接"><a href="#2-3-base标签-基准链接" class="headerlink" title="2.3 base标签-基准链接"></a>2.3 base标签-基准链接</h2><p>base标签：为页面所有链接规定默认url或默认target。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">target</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><code>&lt;base/&gt;</code>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>herf</td><td>url</td><td>规定页面所有链接的默认url</td></tr><tr><td>target</td><td>_self<br>_blank</td><td>规定页面所有链接的默认打开方式</td></tr></tbody></table><h1 id="3-HTML标签"><a href="#3-HTML标签" class="headerlink" title="3. HTML标签"></a>3. HTML标签</h1><p>HTML元素：从开始标签（start tag）到结束标签（end tag）的所有代码；</p><p>空元素：没有内容的 HTML 元素；推荐<strong>在开始标签中关闭</strong>；如<code>&lt;br/&gt;</code>；</p><h2 id="3-1-HTML标签分类"><a href="#3-1-HTML标签分类" class="headerlink" title="3.1 HTML标签分类"></a>3.1 HTML标签分类</h2><p>按标签类型分类：</p><table><thead><tr><th>标签类型</th><th>标签</th></tr></thead><tbody><tr><td>单标签</td><td><code>&lt;br/&gt;</code>，<code>&lt;img/&gt;</code>，<code>&lt;input/&gt;</code>…</td></tr><tr><td>双标签</td><td><code>&lt;p&gt;&lt;/p&gt;</code>，<code>&lt;div&gt;&lt;/div&gt;</code>…</td></tr></tbody></table><p>按标签显示模式分类：</p><table><thead><tr><th>标签显示模式</th><th>标签</th></tr></thead><tbody><tr><td>块级元素</td><td><code>&lt;div&gt;&lt;/div&gt;</code>，<code>&lt;ul&gt;&lt;/ul&gt;</code>…</td></tr><tr><td>行级元素</td><td><code>&lt;span&gt;&lt;/span&gt;</code>，<code>&lt;a&gt;&lt;/a&gt;</code>…</td></tr><tr><td>行内块元素</td><td><code>&lt;img/&gt;</code>、<code>&lt;td&gt;&lt;/td&gt;</code>…</td></tr></tbody></table><h2 id="3-2-HTML标签属性"><a href="#3-2-HTML标签属性" class="headerlink" title="3.2 HTML标签属性"></a>3.2 HTML标签属性</h2><p>HTML标签属性格式：<strong>name=”value”</strong> ；</p><p>例如：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>id</td><td>规定元素的唯一 id</td></tr><tr><td>class</td><td>classname</td><td>规定元素的类名（classname）</td></tr><tr><td>style</td><td>style_definition</td><td>规定元素的行内样式（inline-style）</td></tr><tr><td>title</td><td>text</td><td>规定元素的额外信息（可在工具提示中显示）</td></tr></tbody></table><blockquote><p>详细参考<a href="http://www.w3school.com.cn/tags/html_ref_standardattributes.asp" target="_blank" rel="noopener">《HTML标准属性参考手册》</a></p></blockquote><h2 id="3-3-排版标签"><a href="#3-3-排版标签" class="headerlink" title="3.3 排版标签"></a>3.3 排版标签</h2><table><thead><tr><th>排版标签</th><th></th></tr></thead><tbody><tr><td>标题标签</td><td><code>&lt;h1&gt;一级标题&lt;/h1&gt;</code>~<code>&lt;h6&gt;六级标题&lt;/h6&gt;</code></td></tr><tr><td>段落标签</td><td><code>&lt;p&gt;这是一个段落&lt;/p&gt;</code></td></tr><tr><td>换行标签</td><td><code>&lt;br/&gt;</code></td></tr><tr><td>水平线标签</td><td><code>&lt;hr/&gt;</code></td></tr><tr><td>块标签</td><td><code>&lt;div&gt;&lt;/div&gt;</code></td></tr><tr><td>行标签</td><td><code>&lt;span&gt;&lt;/span&gt;</code></td></tr></tbody></table><h2 id="3-4-文本格式化标签"><a href="#3-4-文本格式化标签" class="headerlink" title="3.4 文本格式化标签"></a>3.4 文本格式化标签</h2><table><thead><tr><th>文本格式</th><th>HTML4</th><th>HTML5</th></tr></thead><tbody><tr><td>加粗</td><td><code>&lt;b&gt;&lt;/b&gt;</code></td><td><code>&lt;strong&gt;&lt;/strong&gt;</code></td></tr><tr><td>斜体</td><td><code>&lt;i&gt;&lt;/i&gt;</code></td><td><code>&lt;em&gt;&lt;/em&gt;</code></td></tr><tr><td>下划线</td><td><code>&lt;u&gt;&lt;/u&gt;</code>不推荐使用</td><td><code>&lt;ins&gt;&lt;/ins&gt;</code></td></tr><tr><td>删除线</td><td><code>&lt;s&gt;&lt;/s&gt;</code>不推荐使用</td><td><code>&lt;del&gt;&lt;/del&gt;</code></td></tr></tbody></table><h2 id="3-5-图片标签-img★"><a href="#3-5-图片标签-img★" class="headerlink" title="3.5 图片标签-img★"></a>3.5 图片标签-img★</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"url"</span> <span class="attr">alt</span>=<span class="string">"替代文本"</span> /&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><code>&lt;img/&gt;</code>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><strong>src</strong></td><td>url</td><td>本地图片路径 / 网络图片url</td></tr><tr><td><strong>alt</strong></td><td>text</td><td>图片非正常显示的替代文本</td></tr><tr><td>width&amp;height</td><td>px，%</td><td>设置图像宽&amp;高</td></tr><tr><td>title</td><td>text</td><td>鼠标悬停时的显示文本</td></tr><tr><td>border</td><td>px</td><td>图像边框宽度</td></tr></tbody></table><blockquote><p>避免图片失真：推荐width&amp;height只设置一个值；</p></blockquote><h2 id="3-6-链接标签-a★"><a href="#3-6-链接标签-a★" class="headerlink" title="3.6 链接标签-a★"></a>3.6 链接标签-a★</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"url"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><code>&lt;a&gt;</code>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><strong>href</strong></td><td>url</td><td>超链接url / #id</td></tr><tr><td>target</td><td>_self<br>_blank</td><td>本标签页打开（默认）<br>新标签页打开</td></tr><tr><td>name</td><td>text</td><td>锚点名称</td></tr></tbody></table><p><strong>锚点定位</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#id/name"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-7-列表标签"><a href="#3-7-列表标签" class="headerlink" title="3.7 列表标签"></a>3.7 列表标签</h2><h3 id="3-7-1-无序列表-ul"><a href="#3-7-1-无序列表-ul" class="headerlink" title="3.7.1 无序列表-ul"></a>3.7.1 无序列表-ul</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-7-2-有序列表-ol"><a href="#3-7-2-有序列表-ol" class="headerlink" title="3.7.2 有序列表-ol"></a>3.7.2 有序列表-ol</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-7-3-自定义列表-dl"><a href="#3-7-3-自定义列表-dl" class="headerlink" title="3.7.3 自定义列表-dl"></a>3.7.3 自定义列表-dl</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>上级表项1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>下级表项11<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>下级表项12<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>上级表项2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>下级表项21<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>下级表项22<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>列表项计数问题：从1开始计数，dl从dt开始计数；</p></blockquote><h2 id="3-8-表格标签-table"><a href="#3-8-表格标签-table" class="headerlink" title="3.8 表格标签-table"></a>3.8 表格标签-table</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>表头1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>表头2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第1行第1格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第1行第2格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第2行第1格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第2行第2格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>空单元格边框未显示问题：在空单元格中添加一个空格占位符<code>&amp;nbsp;</code>；</p></blockquote><p><code>&lt;table&gt;</code>属性：</p><ul><li><code>border</code>：设置边框；</li><li><code>cellspaceing</code>：单元格间距；</li><li><code>cellpadding</code>：单元格边距；</li></ul><p><code>&lt;td&gt;</code>属性：</p><ul><li><strong>合并单元格</strong>：<code>rowspan=&quot;&quot;</code>跨行， <code>colspan=&quot;&quot;</code>跨列；</li><li>水平对齐方式：<code>align=&quot;left/center/right&quot;</code>；</li></ul><h2 id="3-9-表单标签-form"><a href="#3-9-表单标签-form" class="headerlink" title="3.9 表单标签-form"></a>3.9 表单标签-form</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">表单域：表单元素；</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><code>&lt;form&gt;</code>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>action</td><td>url</td><td>规定提交表单的目的地址url</td></tr><tr><td>method</td><td><strong>GET</strong><br><strong>POST</strong></td><td>规定提交表单使用的 HTTP 方法</td></tr><tr><td>target</td><td>_self<br>_blank</td><td>规定action的打开方式</td></tr></tbody></table><blockquote><p><strong>HTTP 方法</strong>：</p><ul><li><strong>GET</strong>：表单数据在地址栏可见，明文；（默认）</li><li><strong>POST</strong>：表单数据在地址栏不可见，密文；</li></ul></blockquote><h3 id="3-9-1-input标签★"><a href="#3-9-1-input标签★" class="headerlink" title="3.9.1 input标签★"></a>3.9.1 input标签★</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><code>&lt;input/&gt;</code>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><strong>type</strong></td><td>text<br>password<br>radio<br>checkbox<br>button<br>submit<br>reset<br>image<br>file</td><td>单行文本输入框<br>密码输入框<br>单选框<br>复选框<br>普通按钮<br>提交按钮<br>重置按钮<br>图片<br>文件</td></tr><tr><td>name</td><td>用户自定义</td><td>input控件名称</td></tr><tr><td>value</td><td>用户自定义</td><td>input控件初始文本值</td></tr><tr><td><strong>checked</strong></td><td><strong>checked</strong></td><td>定义选框预选项</td></tr><tr><td><strong>disabled</strong></td><td><strong>disabled</strong></td><td>禁用表单元素</td></tr><tr><td>size</td><td>number</td><td>字段显示宽度</td></tr><tr><td>maxlength</td><td>number</td><td>字段最大长度</td></tr></tbody></table><p><strong>H5新增input属性：</strong></p><table><thead><tr><th><code>&lt;input/&gt;</code>属性（H5）</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>placeholder</td><td>text</td><td>输入字段的提示</td></tr><tr><td>autofocus</td><td>autofocus</td><td>规定在页面加载时是否获得焦点<br> （不适用于 type=”hidden”）</td></tr><tr><td>multiple</td><td>multiple</td><td>多文件上传</td></tr><tr><td>autocomplete</td><td>on<br>off</td><td>是否使用字段的自动完成功能</td></tr><tr><td>required</td><td>required</td><td>必填项，不能为空</td></tr></tbody></table><p><strong>H5新增input type值：</strong></p><table><thead><tr><th>input  type值（H5）</th><th>描述</th></tr></thead><tbody><tr><td>email</td><td>邮箱格式</td></tr><tr><td>tel</td><td>手机号码</td></tr><tr><td>url</td><td>url格式</td></tr><tr><td>number</td><td>数字格式</td></tr><tr><td>search</td><td>搜索框</td></tr><tr><td>range</td><td>自由拖动滑块</td></tr><tr><td>time</td><td>时分</td></tr><tr><td>date</td><td>年月日</td></tr><tr><td>datetime</td><td>时间</td></tr><tr><td>month</td><td>月年</td></tr><tr><td>week</td><td>星期 年</td></tr></tbody></table><h3 id="3-9-2-label标签"><a href="#3-9-2-label标签" class="headerlink" title="3.9.2 label标签"></a>3.9.2 label标签</h3><p>label标签：为 input 元素定义标注<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure></p><table><thead><tr><th><code>&lt;label&gt;</code>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>for</td><td>id</td><td>规定 label 绑定到哪个表单元素。</td></tr><tr><td>form</td><td>form_id</td><td>规定 label 字段所属的一个或多个表单。</td></tr></tbody></table><h3 id="3-9-3-select标签-下拉列表"><a href="#3-9-3-select标签-下拉列表" class="headerlink" title="3.9.3 select标签-下拉列表"></a>3.9.3 select标签-下拉列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>下拉项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>下拉项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><code>&lt;option&gt;</code>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><strong>selected</strong></td><td><strong>selected</strong></td><td>定义下拉列表预选项</td></tr><tr><td><strong>disabled</strong></td><td><strong>disabled</strong></td><td>禁用表单元素</td></tr><tr><td>value</td><td>text</td><td>定义送往服务器的选项值</td></tr></tbody></table><h3 id="3-9-4-textarea标签-文本域"><a href="#3-9-4-textarea标签-文本域" class="headerlink" title="3.9.4 textarea标签-文本域"></a>3.9.4 textarea标签-文本域</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">文本域：多行文本</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>rows</code>&amp;<code>cols</code>：定义文本的可见行&amp;列；</li></ul><h3 id="3-9-5-fieldset标签-元素分组"><a href="#3-9-5-fieldset标签-元素分组" class="headerlink" title="3.9.5 fieldset标签-元素分组"></a>3.9.5 fieldset标签-元素分组</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>元素组标题<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">表单元素1: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line">表单元素2: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-9-6-datalist标签-input可能值（H5）"><a href="#3-9-6-datalist标签-input可能值（H5）" class="headerlink" title="3.9.6 datalist标签-input可能值（H5）"></a>3.9.6 datalist标签-input可能值（H5）</h3><p>datalist标签：定义选项列表。与 input 连用，定义 input 可能的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">"datalist-id"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"datalist-id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"input可能值_01"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"input可能值_02"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"input可能值_03"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-10-多媒体标签"><a href="#3-10-多媒体标签" class="headerlink" title="3.10 多媒体标签"></a>3.10 多媒体标签</h2><h3 id="3-10-1-embed标签-嵌入内容"><a href="#3-10-1-embed标签-嵌入内容" class="headerlink" title="3.10.1 embed标签-嵌入内容"></a>3.10.1 embed标签-嵌入内容</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">""</span>/&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><code>&lt;embed/&gt;</code>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>src</td><td>url</td><td>嵌入内容的url</td></tr><tr><td>type</td><td>type</td><td>嵌入内容的类型</td></tr><tr><td>width&amp;height</td><td>px</td><td>嵌入内容的宽&amp;高</td></tr></tbody></table><h3 id="3-10-2-audio标签-音频"><a href="#3-10-2-audio标签-音频" class="headerlink" title="3.10.2 audio标签-音频"></a>3.10.2 audio标签-音频</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><code>&lt;audio&gt;</code>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>src</td><td>url</td><td>音频的url</td></tr><tr><td>autoplay</td><td>autoplay</td><td>自动播放</td></tr><tr><td>control</td><td>control</td><td>显示音频控件</td></tr><tr><td>loop</td><td>loop</td><td>循环播放</td></tr></tbody></table><h3 id="3-10-3-video标签-视频"><a href="#3-10-3-video标签-视频" class="headerlink" title="3.10.3 video标签-视频"></a>3.10.3 video标签-视频</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><code>&lt;video&gt;</code>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>src</td><td>url</td><td>音频的url</td></tr><tr><td>autoplay</td><td>autoplay</td><td>自动播放</td></tr><tr><td>control</td><td>control</td><td>显示视频控件</td></tr><tr><td>loop</td><td>loop</td><td>循环播放</td></tr><tr><td>width&amp;height</td><td>px</td><td>视频的宽&amp;高</td></tr></tbody></table><h1 id="4-HTML代码约束"><a href="#4-HTML代码约束" class="headerlink" title="4. HTML代码约束"></a>4. HTML代码约束</h1><ul><li>始终首行声明文档类型<code>&lt;!DOCTYPE html&gt;</code>；</li><li>建议关闭所有 HTML 元素；<strong>空元素</strong>，推荐<strong>在开始标签中关闭</strong>；</li><li>HTML标签对大小写不敏感，推荐使用<strong>小写标签</strong>；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!--# HTML--&gt;
&lt;p&gt;HTML（Hyper Text Mark-up Language，超文本标记语言），一种使用标记标签 (tag) 描述网页的语言，其中的“超文本“是指页面内除文本之外还可以包含图片、链接、程序、音频、视频等非文字元素。&lt;br&gt;HTML 常用于编写页面主体结构，CSS 常用于对页面进行静态修饰，JavaScript 常用于对网页增加动态功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Web前端" scheme="https://liziczh.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Web前端" scheme="https://liziczh.com/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
